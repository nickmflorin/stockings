@use "sass:map";
@use "sass:string";

@use "partials";
@use "./constants" as *;

$icon-sizes: (
  "xxs": 10px,
  "xs": 12px,
  "sm": 14px,
  "md": 16px,
  "lg": 20px,
  "xl": 24px,
  "xxl": 36px,
  "xxxl": 44px,
  "fill": 100%,
);

@function get-icon-size($size: $default-icon-size) {
  @return partials.mapget($icon-sizes, $size);
}

@mixin icon-fit($fit: $default-icon-size-fit) {
  @if $fit == "square" {
    // Do not set the aspect ratio on the underlying SVG - just the containing <i> tag.
    aspect-ratio: 1;
  } @else if $fit != "fit" {
    @error "Invalid fit #{$fit} provided!";
  }
}

@mixin icon-sizing($size, $dimension: $default-icon-size-dimension, $fit: null) {
  // The size can be provided as a numeric value (e.g. "30px") or a discrete size string (e.g. "sm").
  $size-value: if(map.has-key($icon-sizes, $size), partials.mapget($icon-sizes, $size), $size);

  @if $dimension == "height" {
    width: auto;
    height: $size-value;
    max-width: $size-value;
  } @else if $dimension == "width" {
    height: auto;
    width: $size-value;
    max-height: $size-value;
  } @else {
    @error "Invalid dimension #{$dimension} provided!";
  }
  /* The fit should be applied regardless of whether or not the Icon's size is provided as one of
     the discrete size strings. */
  @if $fit {
    @include icon-fit($fit);
  }
}

@mixin icon-size-classes($dimension) {
  @each $size in map.keys($icon-sizes) {
    &.icon--size-#{$size} {
      @include icon-sizing($size, $dimension);
    }
  }
}
