@use "./constants" as constants;

/*
There are several browsers, notably Google Chrome, that seem to believe they are allowed to just
manipulate the styling of certain input and button elements for purposes of auto-fill, not matter
how terrible it looks.

Not only do they make a lot of effort to do this, but they do it in a way that makes it nearly
impossible to override or stop.  Certain tricks have been passed down throughout the years, and
this file represents one of them: using a box-shadow that insets towards the inside of the component
that masks (covers) the styling that those browsers apply on auto-fill.
*/
@mixin remove-browser-autofill($bg-color: null) {
  // The actual value of the box-shadow spread (1000px) doesn't matter outside of the fact that it
  // must be large enough to cover the inside of the element.
  $box-shadow-mask: 0 0 0px 1000px if($bg-color, $bg-color, constants.$input-bg-color) inset;
  -webkit-box-shadow: $box-shadow-mask !important;
  box-shadow: $box-shadow-mask !important;
}

@mixin reset-browser-autofill(
  $elements,
  $bg-color: null,
  $font-family: null,
  $font-weight: null,
  $color: null
) {
  @each $element in $elements {
    #{$element} {
      &:-webkit-autofill {
        @include remove-browser-autofill;

        &:focus {
          @include remove-browser-autofill;
        }

        &:hover {
          @include remove-browser-autofill;
        }

        &::first-line {
          color: if($color, $color, constants.$input-color);
          font-family: if($font-family, $font-family, constants.$input-font-family);
          font-weight: if($font-weight, $font-weight, constants.$input-font-weight);
          width: 100%;
        }
      }
    }
  }
}

@include reset-browser-autofill(("input", "textarea"));

input:focus-visible {
  outline: none !important;
}
