//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
  output   = "../model/generated"
}

enum ElementAttribute {
  HREF
  SRC
  VALUE
  DATA_GA_PRODUCT_NAME
}

enum ScrapingErrorCode {
  MISSING_ATTRIBUTE
  INVALID_ATTRIBUTE
  MISSING_TEXT
  INVALID_TEXT
  NONUNIQUE_TEXT
  MISSING_ELEMENT
  NONUNIQUE_ELEMENT
  HTTP_NETWORK
  HTTP_CLIENT
  HTTP_SERIALIZATION
}

enum ProductRecordDataField {
  PRICE
  RAW_PRICE
  STATUS
}

enum ProductStatus {
  OutOfStock
  InStock
  AvailableForBackorder
  NotListed
}

enum ProductCategory {
  HandTools
}

enum ProductSubCategory {
  HandPlanes
  Saws
  Chisels
  Spokeshaves
  GreenWoodworking
  AccessoryTools
}

enum PriceChangeCondition {
  PriceIncrease
  PriceDecrease
}

enum SubscriptionType {
  NewProductSubscription
  PriceChangeSubscription
  StatusChangeSubscription
}

enum NotificationType {
  NewProductNotification
  PriceChangeNotification
  StatusChangeNotification
}

enum NotificationState {
  Pending
  Sent
  Failed
}

model User {
  id                             String                   @id() @default(uuid()) @db.Uuid()
  clerkId                        String                   @unique()
  firstName                      String
  lastName                       String
  profileImageUrl                String?
  emailAddress                   String
  createdAt                      DateTime                 @default(now())
  updatedAt                      DateTime                 @updatedAt()
  createdProducts                Product[]                @relation("createdProducts")
  updatedProducts                Product[]                @relation("updatedProducts")
  createdProductRecords          ProductRecord[]          @relation("createdProductRecords")
  updatedProductRecords          ProductRecord[]          @relation("updatedProductRecords")
  createdProductSubscriptions    ProductSubscription[]    @relation("createdProductSubscriptions")
  updatedProductSubscriptions    ProductSubscription[]    @relation("updatedProductSubscriptions")
  productSubscriptions           ProductSubscription[]    @relation("productSubscriptions")
  createdNotifications           Notification[]           @relation("createdNotifications")
  updatedNotifications           Notification[]           @relation("updatedNotifications")
  notifications                  Notification[]           @relation("notifications")
  createdProcessedProductRecords ProcessedProductRecord[] @relation("createdProcessedProductRecords")
  updatedProcessedProductRecords ProcessedProductRecord[] @relation("updatedProcessedProductRecords")
  processedProductRecords        ProcessedProductRecord[] @relation("processedProductRecords")
}

model HttpNetworkErrorData {
  id  String @id() @default(uuid()) @db.Uuid()
  url String
}

model HttpSerializationErrorData {
  id  String @id() @default(uuid()) @db.Uuid()
  url String
}

model HttpClientErrorData {
  id     String @id() @default(uuid()) @db.Uuid()
  url    String
  status Int
}

model MissingAttributeErrorData {
  id         String           @id() @default(uuid()) @db.Uuid()
  attribute  ElementAttribute
  parentHtml String?
}

model InvalidAttributeErrorData {
  id         String           @id() @default(uuid()) @db.Uuid()
  attribute  ElementAttribute
  parentHtml String?
  value      String
}

model InvalidTextErrorData {
  id         String  @id() @default(uuid()) @db.Uuid()
  parentHtml String?
  value      String
}

model MissingTextErrorData {
  id         String  @id() @default(uuid()) @db.Uuid()
  parentHtml String?
}

model NonUniqueTextErrorData {
  id         String  @id() @default(uuid()) @db.Uuid()
  parentHtml String?
}

model MissingElementErrorData {
  id         String  @id() @default(uuid()) @db.Uuid()
  parentHtml String?
  selector   String
}

model NonUniqueElementErrorData {
  id         String  @id() @default(uuid()) @db.Uuid()
  parentHtml String?
  selector   String
}

model ProductRecordError {
  id        String                 @id() @default(uuid()) @db.Uuid()
  errorId   String                 @unique() @db.Uuid()
  errorCode ScrapingErrorCode
  record    ProductRecord          @relation("errors", fields: [recordId], references: [id])
  recordId  String                 @unique() @db.Uuid()
  field     ProductRecordDataField
  message   String
}

model ProductRecord {
  id                        String                     @id() @default(uuid()) @db.Uuid()
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt()
  createdById               String                     @db.Uuid()
  updatedById               String                     @db.Uuid()
  timestamp                 DateTime                   @default(now())
  createdBy                 User                       @relation("createdProductRecords", fields: [createdById], references: [id])
  updatedBy                 User                       @relation("updatedProductRecords", fields: [updatedById], references: [id])
  product                   Product                    @relation("records", fields: [productId], references: [id])
  productId                 String                     @db.Uuid()
  price                     Float?
  rawPrice                  String?
  status                    ProductStatus?
  wasManuallyCreated        Boolean                    @default(false)
  manuallyChangedFields     ProductRecordDataField[]   @default([])
  errors                    ProductRecordError[]       @relation("errors")
  statusChangeNotifications StatusChangeNotification[] @relation("statusChangeNotifications")
  priceChangeNotifications  PriceChangeNotification[]  @relation("priceChangeNotifications")
  processedRecords          ProcessedProductRecord[]   @relation("processedRecords")
}

model ProcessedProductRecord {
  id          String        @id() @default(uuid()) @db.Uuid()
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()
  createdById String        @db.Uuid()
  updatedById String        @db.Uuid()
  createdBy   User          @relation("createdProcessedProductRecords", fields: [createdById], references: [id])
  updatedBy   User          @relation("updatedProcessedProductRecords", fields: [updatedById], references: [id])
  recordId    String        @db.Uuid()
  record      ProductRecord @relation("processedRecords", fields: [recordId], references: [id])
  user        User          @relation("processedProductRecords", fields: [userId], references: [id])
  userId      String        @db.Uuid()

  @@unique([userId, recordId])
}

model Product {
  id                      String                   @id() @default(uuid()) @db.Uuid()
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt()
  createdById             String                   @db.Uuid()
  updatedById             String                   @db.Uuid()
  createdBy               User                     @relation("createdProducts", fields: [createdById], references: [id])
  updatedBy               User                     @relation("updatedProducts", fields: [updatedById], references: [id])
  name                    String?
  slug                    String                   @unique()
  code                    String?
  imageSrc                String?
  records                 ProductRecord[]          @relation("records")
  status                  ProductStatus?
  statusLastUpdatedAt     DateTime?
  statusAsOf              DateTime?
  price                   Float?
  priceLastUpdatedAt      DateTime?
  priceAsOf               DateTime?
  category                ProductCategory
  subCategories           ProductSubCategory[]
  subscriptions           ProductSubscription[]    @relation("subscriptions")
  newProductNotifications NewProductNotification[] @relation("newProductNotifications")
}

/// @@delegate(subscriptionType)
model ProductSubscription {
  id                                    String                    @id() @default(uuid()) @db.Uuid()
  createdAt                             DateTime                  @default(now())
  updatedAt                             DateTime                  @updatedAt()
  createdById                           String                    @db.Uuid()
  updatedById                           String                    @db.Uuid()
  createdBy                             User                      @relation("createdProductSubscriptions", fields: [createdById], references: [id])
  updatedBy                             User                      @relation("updatedProductSubscriptions", fields: [updatedById], references: [id])
  subscriptionType                      SubscriptionType
  userId                                String                    @db.Uuid()
  user                                  User                      @relation("productSubscriptions", fields: [userId], references: [id])
  product                               Product                   @relation("subscriptions", fields: [productId], references: [id])
  productId                             String                    @db.Uuid()
  enabled                               Boolean                   @default(true)
  delegate_aux_statusChangeSubscription StatusChangeSubscription?
  delegate_aux_priceChangeSubscription  PriceChangeSubscription?

  @@unique([userId, productId, subscriptionType])
}

model StatusChangeSubscriptionCondition {
  id             String                   @id() @default(uuid()) @db.Uuid()
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt()
  fromStatus     ProductStatus[]
  toStatus       ProductStatus[]
  subscription   StatusChangeSubscription @relation("conditions", fields: [subscriptionId], references: [id])
  subscriptionId String                   @db.Uuid()
}

model StatusChangeSubscription {
  id                               String                              @id() @default(uuid()) @db.Uuid()
  conditions                       StatusChangeSubscriptionCondition[] @relation("conditions")
  notifications                    StatusChangeNotification[]          @relation("notifications")
  delegate_aux_productSubscription ProductSubscription                 @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PriceChangeSubscription {
  id                               String                    @id() @default(uuid()) @db.Uuid()
  conditions                       PriceChangeCondition[]    @default([PriceIncrease, PriceDecrease])
  notifications                    PriceChangeNotification[] @relation("notifications")
  delegate_aux_productSubscription ProductSubscription       @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// @@delegate(notificationType)
model Notification {
  id                                    String                    @id() @default(uuid()) @db.Uuid()
  createdAt                             DateTime                  @default(now())
  updatedAt                             DateTime                  @updatedAt()
  createdById                           String                    @db.Uuid()
  updatedById                           String                    @db.Uuid()
  createdBy                             User                      @relation("createdNotifications", fields: [createdById], references: [id])
  updatedBy                             User                      @relation("updatedNotifications", fields: [updatedById], references: [id])
  user                                  User                      @relation("notifications", fields: [userId], references: [id])
  userId                                String                    @db.Uuid()
  notificationType                      NotificationType
  state                                 NotificationState
  stateAsOf                             DateTime
  failedAt                              DateTime?
  sentAt                                DateTime?
  delegate_aux_priceChangeNotification  PriceChangeNotification?
  delegate_aux_statusChangeNotification StatusChangeNotification?
  delegate_aux_newProductNotification   NewProductNotification?
}

model PriceChangeNotification {
  id                        String                  @id() @default(uuid()) @db.Uuid()
  productRecordId           String                  @db.Uuid()
  productRecord             ProductRecord           @relation("priceChangeNotifications", fields: [productRecordId], references: [id])
  subscriptionId            String                  @db.Uuid()
  subscription              PriceChangeSubscription @relation("notifications", fields: [subscriptionId], references: [id])
  condition                 PriceChangeCondition
  previousPrice             Float
  newPrice                  Float
  delegate_aux_notification Notification            @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model StatusChangeNotification {
  id                        String                   @id() @default(uuid()) @db.Uuid()
  productRecordId           String                   @db.Uuid()
  productRecord             ProductRecord            @relation("statusChangeNotifications", fields: [productRecordId], references: [id])
  subscriptionId            String                   @db.Uuid()
  subscription              StatusChangeSubscription @relation("notifications", fields: [subscriptionId], references: [id])
  previousStatus            ProductStatus
  newStatus                 ProductStatus
  delegate_aux_notification Notification             @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model NewProductNotification {
  id                        String       @id() @default(uuid()) @db.Uuid()
  productId                 String       @db.Uuid()
  product                   Product      @relation("newProductNotifications", fields: [productId], references: [id])
  delegate_aux_notification Notification @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
