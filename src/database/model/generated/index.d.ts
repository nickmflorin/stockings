
/**
 * Client
**/

import * as runtime from './runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model HttpNetworkErrorData
 * 
 */
export type HttpNetworkErrorData = $Result.DefaultSelection<Prisma.$HttpNetworkErrorDataPayload>
/**
 * Model HttpSerializationErrorData
 * 
 */
export type HttpSerializationErrorData = $Result.DefaultSelection<Prisma.$HttpSerializationErrorDataPayload>
/**
 * Model HttpClientErrorData
 * 
 */
export type HttpClientErrorData = $Result.DefaultSelection<Prisma.$HttpClientErrorDataPayload>
/**
 * Model MissingAttributeErrorData
 * 
 */
export type MissingAttributeErrorData = $Result.DefaultSelection<Prisma.$MissingAttributeErrorDataPayload>
/**
 * Model InvalidAttributeErrorData
 * 
 */
export type InvalidAttributeErrorData = $Result.DefaultSelection<Prisma.$InvalidAttributeErrorDataPayload>
/**
 * Model InvalidTextErrorData
 * 
 */
export type InvalidTextErrorData = $Result.DefaultSelection<Prisma.$InvalidTextErrorDataPayload>
/**
 * Model MissingTextErrorData
 * 
 */
export type MissingTextErrorData = $Result.DefaultSelection<Prisma.$MissingTextErrorDataPayload>
/**
 * Model NonUniqueTextErrorData
 * 
 */
export type NonUniqueTextErrorData = $Result.DefaultSelection<Prisma.$NonUniqueTextErrorDataPayload>
/**
 * Model MissingElementErrorData
 * 
 */
export type MissingElementErrorData = $Result.DefaultSelection<Prisma.$MissingElementErrorDataPayload>
/**
 * Model NonUniqueElementErrorData
 * 
 */
export type NonUniqueElementErrorData = $Result.DefaultSelection<Prisma.$NonUniqueElementErrorDataPayload>
/**
 * Model ProductRecordError
 * 
 */
export type ProductRecordError = $Result.DefaultSelection<Prisma.$ProductRecordErrorPayload>
/**
 * Model ProductRecord
 * 
 */
export type ProductRecord = $Result.DefaultSelection<Prisma.$ProductRecordPayload>
/**
 * Model ProcessedProductRecord
 * 
 */
export type ProcessedProductRecord = $Result.DefaultSelection<Prisma.$ProcessedProductRecordPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model ProductSubscription
 * @@delegate(subscriptionType)
 */
export type ProductSubscription = $Result.DefaultSelection<Prisma.$ProductSubscriptionPayload>
/**
 * Model StatusChangeSubscriptionCondition
 * 
 */
export type StatusChangeSubscriptionCondition = $Result.DefaultSelection<Prisma.$StatusChangeSubscriptionConditionPayload>
/**
 * Model StatusChangeSubscription
 * 
 */
export type StatusChangeSubscription = $Result.DefaultSelection<Prisma.$StatusChangeSubscriptionPayload>
/**
 * Model PriceChangeSubscription
 * 
 */
export type PriceChangeSubscription = $Result.DefaultSelection<Prisma.$PriceChangeSubscriptionPayload>
/**
 * Model Notification
 * @@delegate(notificationType)
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model PriceChangeNotification
 * 
 */
export type PriceChangeNotification = $Result.DefaultSelection<Prisma.$PriceChangeNotificationPayload>
/**
 * Model StatusChangeNotification
 * 
 */
export type StatusChangeNotification = $Result.DefaultSelection<Prisma.$StatusChangeNotificationPayload>
/**
 * Model NewProductNotification
 * 
 */
export type NewProductNotification = $Result.DefaultSelection<Prisma.$NewProductNotificationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ElementAttribute: {
  HREF: 'HREF',
  SRC: 'SRC',
  VALUE: 'VALUE',
  DATA_GA_PRODUCT_NAME: 'DATA_GA_PRODUCT_NAME'
};

export type ElementAttribute = (typeof ElementAttribute)[keyof typeof ElementAttribute]


export const ScrapingErrorCode: {
  MISSING_ATTRIBUTE: 'MISSING_ATTRIBUTE',
  INVALID_ATTRIBUTE: 'INVALID_ATTRIBUTE',
  MISSING_TEXT: 'MISSING_TEXT',
  INVALID_TEXT: 'INVALID_TEXT',
  NONUNIQUE_TEXT: 'NONUNIQUE_TEXT',
  MISSING_ELEMENT: 'MISSING_ELEMENT',
  NONUNIQUE_ELEMENT: 'NONUNIQUE_ELEMENT',
  HTTP_NETWORK: 'HTTP_NETWORK',
  HTTP_CLIENT: 'HTTP_CLIENT',
  HTTP_SERIALIZATION: 'HTTP_SERIALIZATION'
};

export type ScrapingErrorCode = (typeof ScrapingErrorCode)[keyof typeof ScrapingErrorCode]


export const ProductRecordDataField: {
  PRICE: 'PRICE',
  RAW_PRICE: 'RAW_PRICE',
  STATUS: 'STATUS'
};

export type ProductRecordDataField = (typeof ProductRecordDataField)[keyof typeof ProductRecordDataField]


export const ProductStatus: {
  OutOfStock: 'OutOfStock',
  InStock: 'InStock',
  AvailableForBackorder: 'AvailableForBackorder',
  NotListed: 'NotListed'
};

export type ProductStatus = (typeof ProductStatus)[keyof typeof ProductStatus]


export const ProductCategory: {
  HandTools: 'HandTools'
};

export type ProductCategory = (typeof ProductCategory)[keyof typeof ProductCategory]


export const ProductSubCategory: {
  HandPlanes: 'HandPlanes',
  Saws: 'Saws',
  Chisels: 'Chisels',
  Spokeshaves: 'Spokeshaves',
  GreenWoodworking: 'GreenWoodworking',
  AccessoryTools: 'AccessoryTools'
};

export type ProductSubCategory = (typeof ProductSubCategory)[keyof typeof ProductSubCategory]


export const SubscriptionType: {
  NewProductSubscription: 'NewProductSubscription',
  PriceChangeSubscription: 'PriceChangeSubscription',
  StatusChangeSubscription: 'StatusChangeSubscription'
};

export type SubscriptionType = (typeof SubscriptionType)[keyof typeof SubscriptionType]


export const PriceChangeSubscriptionCondition: {
  PriceIncrease: 'PriceIncrease',
  PriceDecrease: 'PriceDecrease'
};

export type PriceChangeSubscriptionCondition = (typeof PriceChangeSubscriptionCondition)[keyof typeof PriceChangeSubscriptionCondition]


export const NotificationType: {
  NewProductNotification: 'NewProductNotification',
  PriceChangeNotification: 'PriceChangeNotification',
  StatusChangeNotification: 'StatusChangeNotification'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const NotificationState: {
  Pending: 'Pending',
  Sent: 'Sent',
  Failed: 'Failed'
};

export type NotificationState = (typeof NotificationState)[keyof typeof NotificationState]

}

export type ElementAttribute = $Enums.ElementAttribute

export const ElementAttribute: typeof $Enums.ElementAttribute

export type ScrapingErrorCode = $Enums.ScrapingErrorCode

export const ScrapingErrorCode: typeof $Enums.ScrapingErrorCode

export type ProductRecordDataField = $Enums.ProductRecordDataField

export const ProductRecordDataField: typeof $Enums.ProductRecordDataField

export type ProductStatus = $Enums.ProductStatus

export const ProductStatus: typeof $Enums.ProductStatus

export type ProductCategory = $Enums.ProductCategory

export const ProductCategory: typeof $Enums.ProductCategory

export type ProductSubCategory = $Enums.ProductSubCategory

export const ProductSubCategory: typeof $Enums.ProductSubCategory

export type SubscriptionType = $Enums.SubscriptionType

export const SubscriptionType: typeof $Enums.SubscriptionType

export type PriceChangeSubscriptionCondition = $Enums.PriceChangeSubscriptionCondition

export const PriceChangeSubscriptionCondition: typeof $Enums.PriceChangeSubscriptionCondition

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type NotificationState = $Enums.NotificationState

export const NotificationState: typeof $Enums.NotificationState

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.httpNetworkErrorData`: Exposes CRUD operations for the **HttpNetworkErrorData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HttpNetworkErrorData
    * const httpNetworkErrorData = await prisma.httpNetworkErrorData.findMany()
    * ```
    */
  get httpNetworkErrorData(): Prisma.HttpNetworkErrorDataDelegate<ExtArgs>;

  /**
   * `prisma.httpSerializationErrorData`: Exposes CRUD operations for the **HttpSerializationErrorData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HttpSerializationErrorData
    * const httpSerializationErrorData = await prisma.httpSerializationErrorData.findMany()
    * ```
    */
  get httpSerializationErrorData(): Prisma.HttpSerializationErrorDataDelegate<ExtArgs>;

  /**
   * `prisma.httpClientErrorData`: Exposes CRUD operations for the **HttpClientErrorData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HttpClientErrorData
    * const httpClientErrorData = await prisma.httpClientErrorData.findMany()
    * ```
    */
  get httpClientErrorData(): Prisma.HttpClientErrorDataDelegate<ExtArgs>;

  /**
   * `prisma.missingAttributeErrorData`: Exposes CRUD operations for the **MissingAttributeErrorData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MissingAttributeErrorData
    * const missingAttributeErrorData = await prisma.missingAttributeErrorData.findMany()
    * ```
    */
  get missingAttributeErrorData(): Prisma.MissingAttributeErrorDataDelegate<ExtArgs>;

  /**
   * `prisma.invalidAttributeErrorData`: Exposes CRUD operations for the **InvalidAttributeErrorData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvalidAttributeErrorData
    * const invalidAttributeErrorData = await prisma.invalidAttributeErrorData.findMany()
    * ```
    */
  get invalidAttributeErrorData(): Prisma.InvalidAttributeErrorDataDelegate<ExtArgs>;

  /**
   * `prisma.invalidTextErrorData`: Exposes CRUD operations for the **InvalidTextErrorData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvalidTextErrorData
    * const invalidTextErrorData = await prisma.invalidTextErrorData.findMany()
    * ```
    */
  get invalidTextErrorData(): Prisma.InvalidTextErrorDataDelegate<ExtArgs>;

  /**
   * `prisma.missingTextErrorData`: Exposes CRUD operations for the **MissingTextErrorData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MissingTextErrorData
    * const missingTextErrorData = await prisma.missingTextErrorData.findMany()
    * ```
    */
  get missingTextErrorData(): Prisma.MissingTextErrorDataDelegate<ExtArgs>;

  /**
   * `prisma.nonUniqueTextErrorData`: Exposes CRUD operations for the **NonUniqueTextErrorData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NonUniqueTextErrorData
    * const nonUniqueTextErrorData = await prisma.nonUniqueTextErrorData.findMany()
    * ```
    */
  get nonUniqueTextErrorData(): Prisma.NonUniqueTextErrorDataDelegate<ExtArgs>;

  /**
   * `prisma.missingElementErrorData`: Exposes CRUD operations for the **MissingElementErrorData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MissingElementErrorData
    * const missingElementErrorData = await prisma.missingElementErrorData.findMany()
    * ```
    */
  get missingElementErrorData(): Prisma.MissingElementErrorDataDelegate<ExtArgs>;

  /**
   * `prisma.nonUniqueElementErrorData`: Exposes CRUD operations for the **NonUniqueElementErrorData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NonUniqueElementErrorData
    * const nonUniqueElementErrorData = await prisma.nonUniqueElementErrorData.findMany()
    * ```
    */
  get nonUniqueElementErrorData(): Prisma.NonUniqueElementErrorDataDelegate<ExtArgs>;

  /**
   * `prisma.productRecordError`: Exposes CRUD operations for the **ProductRecordError** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductRecordErrors
    * const productRecordErrors = await prisma.productRecordError.findMany()
    * ```
    */
  get productRecordError(): Prisma.ProductRecordErrorDelegate<ExtArgs>;

  /**
   * `prisma.productRecord`: Exposes CRUD operations for the **ProductRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductRecords
    * const productRecords = await prisma.productRecord.findMany()
    * ```
    */
  get productRecord(): Prisma.ProductRecordDelegate<ExtArgs>;

  /**
   * `prisma.processedProductRecord`: Exposes CRUD operations for the **ProcessedProductRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProcessedProductRecords
    * const processedProductRecords = await prisma.processedProductRecord.findMany()
    * ```
    */
  get processedProductRecord(): Prisma.ProcessedProductRecordDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.productSubscription`: Exposes CRUD operations for the **ProductSubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductSubscriptions
    * const productSubscriptions = await prisma.productSubscription.findMany()
    * ```
    */
  get productSubscription(): Prisma.ProductSubscriptionDelegate<ExtArgs>;

  /**
   * `prisma.statusChangeSubscriptionCondition`: Exposes CRUD operations for the **StatusChangeSubscriptionCondition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusChangeSubscriptionConditions
    * const statusChangeSubscriptionConditions = await prisma.statusChangeSubscriptionCondition.findMany()
    * ```
    */
  get statusChangeSubscriptionCondition(): Prisma.StatusChangeSubscriptionConditionDelegate<ExtArgs>;

  /**
   * `prisma.statusChangeSubscription`: Exposes CRUD operations for the **StatusChangeSubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusChangeSubscriptions
    * const statusChangeSubscriptions = await prisma.statusChangeSubscription.findMany()
    * ```
    */
  get statusChangeSubscription(): Prisma.StatusChangeSubscriptionDelegate<ExtArgs>;

  /**
   * `prisma.priceChangeSubscription`: Exposes CRUD operations for the **PriceChangeSubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PriceChangeSubscriptions
    * const priceChangeSubscriptions = await prisma.priceChangeSubscription.findMany()
    * ```
    */
  get priceChangeSubscription(): Prisma.PriceChangeSubscriptionDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.priceChangeNotification`: Exposes CRUD operations for the **PriceChangeNotification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PriceChangeNotifications
    * const priceChangeNotifications = await prisma.priceChangeNotification.findMany()
    * ```
    */
  get priceChangeNotification(): Prisma.PriceChangeNotificationDelegate<ExtArgs>;

  /**
   * `prisma.statusChangeNotification`: Exposes CRUD operations for the **StatusChangeNotification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusChangeNotifications
    * const statusChangeNotifications = await prisma.statusChangeNotification.findMany()
    * ```
    */
  get statusChangeNotification(): Prisma.StatusChangeNotificationDelegate<ExtArgs>;

  /**
   * `prisma.newProductNotification`: Exposes CRUD operations for the **NewProductNotification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NewProductNotifications
    * const newProductNotifications = await prisma.newProductNotification.findMany()
    * ```
    */
  get newProductNotification(): Prisma.NewProductNotificationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.8.0
   * Query Engine version: 4c784e32044a8a016d99474bd02a3b6123742169
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    HttpNetworkErrorData: 'HttpNetworkErrorData',
    HttpSerializationErrorData: 'HttpSerializationErrorData',
    HttpClientErrorData: 'HttpClientErrorData',
    MissingAttributeErrorData: 'MissingAttributeErrorData',
    InvalidAttributeErrorData: 'InvalidAttributeErrorData',
    InvalidTextErrorData: 'InvalidTextErrorData',
    MissingTextErrorData: 'MissingTextErrorData',
    NonUniqueTextErrorData: 'NonUniqueTextErrorData',
    MissingElementErrorData: 'MissingElementErrorData',
    NonUniqueElementErrorData: 'NonUniqueElementErrorData',
    ProductRecordError: 'ProductRecordError',
    ProductRecord: 'ProductRecord',
    ProcessedProductRecord: 'ProcessedProductRecord',
    Product: 'Product',
    ProductSubscription: 'ProductSubscription',
    StatusChangeSubscriptionCondition: 'StatusChangeSubscriptionCondition',
    StatusChangeSubscription: 'StatusChangeSubscription',
    PriceChangeSubscription: 'PriceChangeSubscription',
    Notification: 'Notification',
    PriceChangeNotification: 'PriceChangeNotification',
    StatusChangeNotification: 'StatusChangeNotification',
    NewProductNotification: 'NewProductNotification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'httpNetworkErrorData' | 'httpSerializationErrorData' | 'httpClientErrorData' | 'missingAttributeErrorData' | 'invalidAttributeErrorData' | 'invalidTextErrorData' | 'missingTextErrorData' | 'nonUniqueTextErrorData' | 'missingElementErrorData' | 'nonUniqueElementErrorData' | 'productRecordError' | 'productRecord' | 'processedProductRecord' | 'product' | 'productSubscription' | 'statusChangeSubscriptionCondition' | 'statusChangeSubscription' | 'priceChangeSubscription' | 'notification' | 'priceChangeNotification' | 'statusChangeNotification' | 'newProductNotification'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      HttpNetworkErrorData: {
        payload: Prisma.$HttpNetworkErrorDataPayload<ExtArgs>
        fields: Prisma.HttpNetworkErrorDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HttpNetworkErrorDataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpNetworkErrorDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HttpNetworkErrorDataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpNetworkErrorDataPayload>
          }
          findFirst: {
            args: Prisma.HttpNetworkErrorDataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpNetworkErrorDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HttpNetworkErrorDataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpNetworkErrorDataPayload>
          }
          findMany: {
            args: Prisma.HttpNetworkErrorDataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpNetworkErrorDataPayload>[]
          }
          create: {
            args: Prisma.HttpNetworkErrorDataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpNetworkErrorDataPayload>
          }
          createMany: {
            args: Prisma.HttpNetworkErrorDataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HttpNetworkErrorDataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpNetworkErrorDataPayload>
          }
          update: {
            args: Prisma.HttpNetworkErrorDataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpNetworkErrorDataPayload>
          }
          deleteMany: {
            args: Prisma.HttpNetworkErrorDataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HttpNetworkErrorDataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HttpNetworkErrorDataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpNetworkErrorDataPayload>
          }
          aggregate: {
            args: Prisma.HttpNetworkErrorDataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHttpNetworkErrorData>
          }
          groupBy: {
            args: Prisma.HttpNetworkErrorDataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HttpNetworkErrorDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.HttpNetworkErrorDataCountArgs<ExtArgs>,
            result: $Utils.Optional<HttpNetworkErrorDataCountAggregateOutputType> | number
          }
        }
      }
      HttpSerializationErrorData: {
        payload: Prisma.$HttpSerializationErrorDataPayload<ExtArgs>
        fields: Prisma.HttpSerializationErrorDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HttpSerializationErrorDataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpSerializationErrorDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HttpSerializationErrorDataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpSerializationErrorDataPayload>
          }
          findFirst: {
            args: Prisma.HttpSerializationErrorDataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpSerializationErrorDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HttpSerializationErrorDataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpSerializationErrorDataPayload>
          }
          findMany: {
            args: Prisma.HttpSerializationErrorDataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpSerializationErrorDataPayload>[]
          }
          create: {
            args: Prisma.HttpSerializationErrorDataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpSerializationErrorDataPayload>
          }
          createMany: {
            args: Prisma.HttpSerializationErrorDataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HttpSerializationErrorDataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpSerializationErrorDataPayload>
          }
          update: {
            args: Prisma.HttpSerializationErrorDataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpSerializationErrorDataPayload>
          }
          deleteMany: {
            args: Prisma.HttpSerializationErrorDataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HttpSerializationErrorDataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HttpSerializationErrorDataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpSerializationErrorDataPayload>
          }
          aggregate: {
            args: Prisma.HttpSerializationErrorDataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHttpSerializationErrorData>
          }
          groupBy: {
            args: Prisma.HttpSerializationErrorDataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HttpSerializationErrorDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.HttpSerializationErrorDataCountArgs<ExtArgs>,
            result: $Utils.Optional<HttpSerializationErrorDataCountAggregateOutputType> | number
          }
        }
      }
      HttpClientErrorData: {
        payload: Prisma.$HttpClientErrorDataPayload<ExtArgs>
        fields: Prisma.HttpClientErrorDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HttpClientErrorDataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpClientErrorDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HttpClientErrorDataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpClientErrorDataPayload>
          }
          findFirst: {
            args: Prisma.HttpClientErrorDataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpClientErrorDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HttpClientErrorDataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpClientErrorDataPayload>
          }
          findMany: {
            args: Prisma.HttpClientErrorDataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpClientErrorDataPayload>[]
          }
          create: {
            args: Prisma.HttpClientErrorDataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpClientErrorDataPayload>
          }
          createMany: {
            args: Prisma.HttpClientErrorDataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HttpClientErrorDataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpClientErrorDataPayload>
          }
          update: {
            args: Prisma.HttpClientErrorDataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpClientErrorDataPayload>
          }
          deleteMany: {
            args: Prisma.HttpClientErrorDataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HttpClientErrorDataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HttpClientErrorDataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HttpClientErrorDataPayload>
          }
          aggregate: {
            args: Prisma.HttpClientErrorDataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHttpClientErrorData>
          }
          groupBy: {
            args: Prisma.HttpClientErrorDataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HttpClientErrorDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.HttpClientErrorDataCountArgs<ExtArgs>,
            result: $Utils.Optional<HttpClientErrorDataCountAggregateOutputType> | number
          }
        }
      }
      MissingAttributeErrorData: {
        payload: Prisma.$MissingAttributeErrorDataPayload<ExtArgs>
        fields: Prisma.MissingAttributeErrorDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MissingAttributeErrorDataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingAttributeErrorDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MissingAttributeErrorDataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingAttributeErrorDataPayload>
          }
          findFirst: {
            args: Prisma.MissingAttributeErrorDataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingAttributeErrorDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MissingAttributeErrorDataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingAttributeErrorDataPayload>
          }
          findMany: {
            args: Prisma.MissingAttributeErrorDataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingAttributeErrorDataPayload>[]
          }
          create: {
            args: Prisma.MissingAttributeErrorDataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingAttributeErrorDataPayload>
          }
          createMany: {
            args: Prisma.MissingAttributeErrorDataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MissingAttributeErrorDataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingAttributeErrorDataPayload>
          }
          update: {
            args: Prisma.MissingAttributeErrorDataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingAttributeErrorDataPayload>
          }
          deleteMany: {
            args: Prisma.MissingAttributeErrorDataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MissingAttributeErrorDataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MissingAttributeErrorDataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingAttributeErrorDataPayload>
          }
          aggregate: {
            args: Prisma.MissingAttributeErrorDataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMissingAttributeErrorData>
          }
          groupBy: {
            args: Prisma.MissingAttributeErrorDataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MissingAttributeErrorDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.MissingAttributeErrorDataCountArgs<ExtArgs>,
            result: $Utils.Optional<MissingAttributeErrorDataCountAggregateOutputType> | number
          }
        }
      }
      InvalidAttributeErrorData: {
        payload: Prisma.$InvalidAttributeErrorDataPayload<ExtArgs>
        fields: Prisma.InvalidAttributeErrorDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvalidAttributeErrorDataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidAttributeErrorDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvalidAttributeErrorDataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidAttributeErrorDataPayload>
          }
          findFirst: {
            args: Prisma.InvalidAttributeErrorDataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidAttributeErrorDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvalidAttributeErrorDataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidAttributeErrorDataPayload>
          }
          findMany: {
            args: Prisma.InvalidAttributeErrorDataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidAttributeErrorDataPayload>[]
          }
          create: {
            args: Prisma.InvalidAttributeErrorDataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidAttributeErrorDataPayload>
          }
          createMany: {
            args: Prisma.InvalidAttributeErrorDataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.InvalidAttributeErrorDataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidAttributeErrorDataPayload>
          }
          update: {
            args: Prisma.InvalidAttributeErrorDataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidAttributeErrorDataPayload>
          }
          deleteMany: {
            args: Prisma.InvalidAttributeErrorDataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InvalidAttributeErrorDataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InvalidAttributeErrorDataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidAttributeErrorDataPayload>
          }
          aggregate: {
            args: Prisma.InvalidAttributeErrorDataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInvalidAttributeErrorData>
          }
          groupBy: {
            args: Prisma.InvalidAttributeErrorDataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InvalidAttributeErrorDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvalidAttributeErrorDataCountArgs<ExtArgs>,
            result: $Utils.Optional<InvalidAttributeErrorDataCountAggregateOutputType> | number
          }
        }
      }
      InvalidTextErrorData: {
        payload: Prisma.$InvalidTextErrorDataPayload<ExtArgs>
        fields: Prisma.InvalidTextErrorDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvalidTextErrorDataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTextErrorDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvalidTextErrorDataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTextErrorDataPayload>
          }
          findFirst: {
            args: Prisma.InvalidTextErrorDataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTextErrorDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvalidTextErrorDataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTextErrorDataPayload>
          }
          findMany: {
            args: Prisma.InvalidTextErrorDataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTextErrorDataPayload>[]
          }
          create: {
            args: Prisma.InvalidTextErrorDataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTextErrorDataPayload>
          }
          createMany: {
            args: Prisma.InvalidTextErrorDataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.InvalidTextErrorDataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTextErrorDataPayload>
          }
          update: {
            args: Prisma.InvalidTextErrorDataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTextErrorDataPayload>
          }
          deleteMany: {
            args: Prisma.InvalidTextErrorDataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InvalidTextErrorDataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InvalidTextErrorDataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvalidTextErrorDataPayload>
          }
          aggregate: {
            args: Prisma.InvalidTextErrorDataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInvalidTextErrorData>
          }
          groupBy: {
            args: Prisma.InvalidTextErrorDataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InvalidTextErrorDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvalidTextErrorDataCountArgs<ExtArgs>,
            result: $Utils.Optional<InvalidTextErrorDataCountAggregateOutputType> | number
          }
        }
      }
      MissingTextErrorData: {
        payload: Prisma.$MissingTextErrorDataPayload<ExtArgs>
        fields: Prisma.MissingTextErrorDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MissingTextErrorDataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingTextErrorDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MissingTextErrorDataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingTextErrorDataPayload>
          }
          findFirst: {
            args: Prisma.MissingTextErrorDataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingTextErrorDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MissingTextErrorDataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingTextErrorDataPayload>
          }
          findMany: {
            args: Prisma.MissingTextErrorDataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingTextErrorDataPayload>[]
          }
          create: {
            args: Prisma.MissingTextErrorDataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingTextErrorDataPayload>
          }
          createMany: {
            args: Prisma.MissingTextErrorDataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MissingTextErrorDataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingTextErrorDataPayload>
          }
          update: {
            args: Prisma.MissingTextErrorDataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingTextErrorDataPayload>
          }
          deleteMany: {
            args: Prisma.MissingTextErrorDataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MissingTextErrorDataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MissingTextErrorDataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingTextErrorDataPayload>
          }
          aggregate: {
            args: Prisma.MissingTextErrorDataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMissingTextErrorData>
          }
          groupBy: {
            args: Prisma.MissingTextErrorDataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MissingTextErrorDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.MissingTextErrorDataCountArgs<ExtArgs>,
            result: $Utils.Optional<MissingTextErrorDataCountAggregateOutputType> | number
          }
        }
      }
      NonUniqueTextErrorData: {
        payload: Prisma.$NonUniqueTextErrorDataPayload<ExtArgs>
        fields: Prisma.NonUniqueTextErrorDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NonUniqueTextErrorDataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueTextErrorDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NonUniqueTextErrorDataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueTextErrorDataPayload>
          }
          findFirst: {
            args: Prisma.NonUniqueTextErrorDataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueTextErrorDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NonUniqueTextErrorDataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueTextErrorDataPayload>
          }
          findMany: {
            args: Prisma.NonUniqueTextErrorDataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueTextErrorDataPayload>[]
          }
          create: {
            args: Prisma.NonUniqueTextErrorDataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueTextErrorDataPayload>
          }
          createMany: {
            args: Prisma.NonUniqueTextErrorDataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NonUniqueTextErrorDataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueTextErrorDataPayload>
          }
          update: {
            args: Prisma.NonUniqueTextErrorDataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueTextErrorDataPayload>
          }
          deleteMany: {
            args: Prisma.NonUniqueTextErrorDataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NonUniqueTextErrorDataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NonUniqueTextErrorDataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueTextErrorDataPayload>
          }
          aggregate: {
            args: Prisma.NonUniqueTextErrorDataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNonUniqueTextErrorData>
          }
          groupBy: {
            args: Prisma.NonUniqueTextErrorDataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NonUniqueTextErrorDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.NonUniqueTextErrorDataCountArgs<ExtArgs>,
            result: $Utils.Optional<NonUniqueTextErrorDataCountAggregateOutputType> | number
          }
        }
      }
      MissingElementErrorData: {
        payload: Prisma.$MissingElementErrorDataPayload<ExtArgs>
        fields: Prisma.MissingElementErrorDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MissingElementErrorDataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingElementErrorDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MissingElementErrorDataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingElementErrorDataPayload>
          }
          findFirst: {
            args: Prisma.MissingElementErrorDataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingElementErrorDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MissingElementErrorDataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingElementErrorDataPayload>
          }
          findMany: {
            args: Prisma.MissingElementErrorDataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingElementErrorDataPayload>[]
          }
          create: {
            args: Prisma.MissingElementErrorDataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingElementErrorDataPayload>
          }
          createMany: {
            args: Prisma.MissingElementErrorDataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MissingElementErrorDataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingElementErrorDataPayload>
          }
          update: {
            args: Prisma.MissingElementErrorDataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingElementErrorDataPayload>
          }
          deleteMany: {
            args: Prisma.MissingElementErrorDataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MissingElementErrorDataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MissingElementErrorDataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MissingElementErrorDataPayload>
          }
          aggregate: {
            args: Prisma.MissingElementErrorDataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMissingElementErrorData>
          }
          groupBy: {
            args: Prisma.MissingElementErrorDataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MissingElementErrorDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.MissingElementErrorDataCountArgs<ExtArgs>,
            result: $Utils.Optional<MissingElementErrorDataCountAggregateOutputType> | number
          }
        }
      }
      NonUniqueElementErrorData: {
        payload: Prisma.$NonUniqueElementErrorDataPayload<ExtArgs>
        fields: Prisma.NonUniqueElementErrorDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NonUniqueElementErrorDataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueElementErrorDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NonUniqueElementErrorDataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueElementErrorDataPayload>
          }
          findFirst: {
            args: Prisma.NonUniqueElementErrorDataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueElementErrorDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NonUniqueElementErrorDataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueElementErrorDataPayload>
          }
          findMany: {
            args: Prisma.NonUniqueElementErrorDataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueElementErrorDataPayload>[]
          }
          create: {
            args: Prisma.NonUniqueElementErrorDataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueElementErrorDataPayload>
          }
          createMany: {
            args: Prisma.NonUniqueElementErrorDataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NonUniqueElementErrorDataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueElementErrorDataPayload>
          }
          update: {
            args: Prisma.NonUniqueElementErrorDataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueElementErrorDataPayload>
          }
          deleteMany: {
            args: Prisma.NonUniqueElementErrorDataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NonUniqueElementErrorDataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NonUniqueElementErrorDataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NonUniqueElementErrorDataPayload>
          }
          aggregate: {
            args: Prisma.NonUniqueElementErrorDataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNonUniqueElementErrorData>
          }
          groupBy: {
            args: Prisma.NonUniqueElementErrorDataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NonUniqueElementErrorDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.NonUniqueElementErrorDataCountArgs<ExtArgs>,
            result: $Utils.Optional<NonUniqueElementErrorDataCountAggregateOutputType> | number
          }
        }
      }
      ProductRecordError: {
        payload: Prisma.$ProductRecordErrorPayload<ExtArgs>
        fields: Prisma.ProductRecordErrorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductRecordErrorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordErrorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductRecordErrorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordErrorPayload>
          }
          findFirst: {
            args: Prisma.ProductRecordErrorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordErrorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductRecordErrorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordErrorPayload>
          }
          findMany: {
            args: Prisma.ProductRecordErrorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordErrorPayload>[]
          }
          create: {
            args: Prisma.ProductRecordErrorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordErrorPayload>
          }
          createMany: {
            args: Prisma.ProductRecordErrorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductRecordErrorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordErrorPayload>
          }
          update: {
            args: Prisma.ProductRecordErrorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordErrorPayload>
          }
          deleteMany: {
            args: Prisma.ProductRecordErrorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductRecordErrorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductRecordErrorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordErrorPayload>
          }
          aggregate: {
            args: Prisma.ProductRecordErrorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductRecordError>
          }
          groupBy: {
            args: Prisma.ProductRecordErrorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductRecordErrorGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductRecordErrorCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductRecordErrorCountAggregateOutputType> | number
          }
        }
      }
      ProductRecord: {
        payload: Prisma.$ProductRecordPayload<ExtArgs>
        fields: Prisma.ProductRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductRecordFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductRecordFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordPayload>
          }
          findFirst: {
            args: Prisma.ProductRecordFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductRecordFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordPayload>
          }
          findMany: {
            args: Prisma.ProductRecordFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordPayload>[]
          }
          create: {
            args: Prisma.ProductRecordCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordPayload>
          }
          createMany: {
            args: Prisma.ProductRecordCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductRecordDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordPayload>
          }
          update: {
            args: Prisma.ProductRecordUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordPayload>
          }
          deleteMany: {
            args: Prisma.ProductRecordDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductRecordUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductRecordUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductRecordPayload>
          }
          aggregate: {
            args: Prisma.ProductRecordAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductRecord>
          }
          groupBy: {
            args: Prisma.ProductRecordGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductRecordCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductRecordCountAggregateOutputType> | number
          }
        }
      }
      ProcessedProductRecord: {
        payload: Prisma.$ProcessedProductRecordPayload<ExtArgs>
        fields: Prisma.ProcessedProductRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProcessedProductRecordFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcessedProductRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProcessedProductRecordFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcessedProductRecordPayload>
          }
          findFirst: {
            args: Prisma.ProcessedProductRecordFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcessedProductRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProcessedProductRecordFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcessedProductRecordPayload>
          }
          findMany: {
            args: Prisma.ProcessedProductRecordFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcessedProductRecordPayload>[]
          }
          create: {
            args: Prisma.ProcessedProductRecordCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcessedProductRecordPayload>
          }
          createMany: {
            args: Prisma.ProcessedProductRecordCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProcessedProductRecordDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcessedProductRecordPayload>
          }
          update: {
            args: Prisma.ProcessedProductRecordUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcessedProductRecordPayload>
          }
          deleteMany: {
            args: Prisma.ProcessedProductRecordDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProcessedProductRecordUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProcessedProductRecordUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcessedProductRecordPayload>
          }
          aggregate: {
            args: Prisma.ProcessedProductRecordAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProcessedProductRecord>
          }
          groupBy: {
            args: Prisma.ProcessedProductRecordGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProcessedProductRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProcessedProductRecordCountArgs<ExtArgs>,
            result: $Utils.Optional<ProcessedProductRecordCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      ProductSubscription: {
        payload: Prisma.$ProductSubscriptionPayload<ExtArgs>
        fields: Prisma.ProductSubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductSubscriptionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductSubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductSubscriptionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductSubscriptionPayload>
          }
          findFirst: {
            args: Prisma.ProductSubscriptionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductSubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductSubscriptionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductSubscriptionPayload>
          }
          findMany: {
            args: Prisma.ProductSubscriptionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductSubscriptionPayload>[]
          }
          create: {
            args: Prisma.ProductSubscriptionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductSubscriptionPayload>
          }
          createMany: {
            args: Prisma.ProductSubscriptionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductSubscriptionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductSubscriptionPayload>
          }
          update: {
            args: Prisma.ProductSubscriptionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductSubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.ProductSubscriptionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductSubscriptionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductSubscriptionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductSubscriptionPayload>
          }
          aggregate: {
            args: Prisma.ProductSubscriptionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductSubscription>
          }
          groupBy: {
            args: Prisma.ProductSubscriptionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductSubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductSubscriptionCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductSubscriptionCountAggregateOutputType> | number
          }
        }
      }
      StatusChangeSubscriptionCondition: {
        payload: Prisma.$StatusChangeSubscriptionConditionPayload<ExtArgs>
        fields: Prisma.StatusChangeSubscriptionConditionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusChangeSubscriptionConditionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionConditionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusChangeSubscriptionConditionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionConditionPayload>
          }
          findFirst: {
            args: Prisma.StatusChangeSubscriptionConditionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionConditionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusChangeSubscriptionConditionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionConditionPayload>
          }
          findMany: {
            args: Prisma.StatusChangeSubscriptionConditionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionConditionPayload>[]
          }
          create: {
            args: Prisma.StatusChangeSubscriptionConditionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionConditionPayload>
          }
          createMany: {
            args: Prisma.StatusChangeSubscriptionConditionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StatusChangeSubscriptionConditionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionConditionPayload>
          }
          update: {
            args: Prisma.StatusChangeSubscriptionConditionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionConditionPayload>
          }
          deleteMany: {
            args: Prisma.StatusChangeSubscriptionConditionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StatusChangeSubscriptionConditionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StatusChangeSubscriptionConditionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionConditionPayload>
          }
          aggregate: {
            args: Prisma.StatusChangeSubscriptionConditionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStatusChangeSubscriptionCondition>
          }
          groupBy: {
            args: Prisma.StatusChangeSubscriptionConditionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StatusChangeSubscriptionConditionGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusChangeSubscriptionConditionCountArgs<ExtArgs>,
            result: $Utils.Optional<StatusChangeSubscriptionConditionCountAggregateOutputType> | number
          }
        }
      }
      StatusChangeSubscription: {
        payload: Prisma.$StatusChangeSubscriptionPayload<ExtArgs>
        fields: Prisma.StatusChangeSubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusChangeSubscriptionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusChangeSubscriptionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionPayload>
          }
          findFirst: {
            args: Prisma.StatusChangeSubscriptionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusChangeSubscriptionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionPayload>
          }
          findMany: {
            args: Prisma.StatusChangeSubscriptionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionPayload>[]
          }
          create: {
            args: Prisma.StatusChangeSubscriptionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionPayload>
          }
          createMany: {
            args: Prisma.StatusChangeSubscriptionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StatusChangeSubscriptionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionPayload>
          }
          update: {
            args: Prisma.StatusChangeSubscriptionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.StatusChangeSubscriptionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StatusChangeSubscriptionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StatusChangeSubscriptionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeSubscriptionPayload>
          }
          aggregate: {
            args: Prisma.StatusChangeSubscriptionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStatusChangeSubscription>
          }
          groupBy: {
            args: Prisma.StatusChangeSubscriptionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StatusChangeSubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusChangeSubscriptionCountArgs<ExtArgs>,
            result: $Utils.Optional<StatusChangeSubscriptionCountAggregateOutputType> | number
          }
        }
      }
      PriceChangeSubscription: {
        payload: Prisma.$PriceChangeSubscriptionPayload<ExtArgs>
        fields: Prisma.PriceChangeSubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PriceChangeSubscriptionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeSubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PriceChangeSubscriptionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeSubscriptionPayload>
          }
          findFirst: {
            args: Prisma.PriceChangeSubscriptionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeSubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PriceChangeSubscriptionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeSubscriptionPayload>
          }
          findMany: {
            args: Prisma.PriceChangeSubscriptionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeSubscriptionPayload>[]
          }
          create: {
            args: Prisma.PriceChangeSubscriptionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeSubscriptionPayload>
          }
          createMany: {
            args: Prisma.PriceChangeSubscriptionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PriceChangeSubscriptionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeSubscriptionPayload>
          }
          update: {
            args: Prisma.PriceChangeSubscriptionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeSubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.PriceChangeSubscriptionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PriceChangeSubscriptionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PriceChangeSubscriptionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeSubscriptionPayload>
          }
          aggregate: {
            args: Prisma.PriceChangeSubscriptionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePriceChangeSubscription>
          }
          groupBy: {
            args: Prisma.PriceChangeSubscriptionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PriceChangeSubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PriceChangeSubscriptionCountArgs<ExtArgs>,
            result: $Utils.Optional<PriceChangeSubscriptionCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      PriceChangeNotification: {
        payload: Prisma.$PriceChangeNotificationPayload<ExtArgs>
        fields: Prisma.PriceChangeNotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PriceChangeNotificationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeNotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PriceChangeNotificationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeNotificationPayload>
          }
          findFirst: {
            args: Prisma.PriceChangeNotificationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeNotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PriceChangeNotificationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeNotificationPayload>
          }
          findMany: {
            args: Prisma.PriceChangeNotificationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeNotificationPayload>[]
          }
          create: {
            args: Prisma.PriceChangeNotificationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeNotificationPayload>
          }
          createMany: {
            args: Prisma.PriceChangeNotificationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PriceChangeNotificationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeNotificationPayload>
          }
          update: {
            args: Prisma.PriceChangeNotificationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeNotificationPayload>
          }
          deleteMany: {
            args: Prisma.PriceChangeNotificationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PriceChangeNotificationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PriceChangeNotificationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PriceChangeNotificationPayload>
          }
          aggregate: {
            args: Prisma.PriceChangeNotificationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePriceChangeNotification>
          }
          groupBy: {
            args: Prisma.PriceChangeNotificationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PriceChangeNotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.PriceChangeNotificationCountArgs<ExtArgs>,
            result: $Utils.Optional<PriceChangeNotificationCountAggregateOutputType> | number
          }
        }
      }
      StatusChangeNotification: {
        payload: Prisma.$StatusChangeNotificationPayload<ExtArgs>
        fields: Prisma.StatusChangeNotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusChangeNotificationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeNotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusChangeNotificationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeNotificationPayload>
          }
          findFirst: {
            args: Prisma.StatusChangeNotificationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeNotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusChangeNotificationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeNotificationPayload>
          }
          findMany: {
            args: Prisma.StatusChangeNotificationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeNotificationPayload>[]
          }
          create: {
            args: Prisma.StatusChangeNotificationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeNotificationPayload>
          }
          createMany: {
            args: Prisma.StatusChangeNotificationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StatusChangeNotificationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeNotificationPayload>
          }
          update: {
            args: Prisma.StatusChangeNotificationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeNotificationPayload>
          }
          deleteMany: {
            args: Prisma.StatusChangeNotificationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StatusChangeNotificationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StatusChangeNotificationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusChangeNotificationPayload>
          }
          aggregate: {
            args: Prisma.StatusChangeNotificationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStatusChangeNotification>
          }
          groupBy: {
            args: Prisma.StatusChangeNotificationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StatusChangeNotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusChangeNotificationCountArgs<ExtArgs>,
            result: $Utils.Optional<StatusChangeNotificationCountAggregateOutputType> | number
          }
        }
      }
      NewProductNotification: {
        payload: Prisma.$NewProductNotificationPayload<ExtArgs>
        fields: Prisma.NewProductNotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NewProductNotificationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewProductNotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NewProductNotificationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewProductNotificationPayload>
          }
          findFirst: {
            args: Prisma.NewProductNotificationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewProductNotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NewProductNotificationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewProductNotificationPayload>
          }
          findMany: {
            args: Prisma.NewProductNotificationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewProductNotificationPayload>[]
          }
          create: {
            args: Prisma.NewProductNotificationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewProductNotificationPayload>
          }
          createMany: {
            args: Prisma.NewProductNotificationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NewProductNotificationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewProductNotificationPayload>
          }
          update: {
            args: Prisma.NewProductNotificationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewProductNotificationPayload>
          }
          deleteMany: {
            args: Prisma.NewProductNotificationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NewProductNotificationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NewProductNotificationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NewProductNotificationPayload>
          }
          aggregate: {
            args: Prisma.NewProductNotificationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNewProductNotification>
          }
          groupBy: {
            args: Prisma.NewProductNotificationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NewProductNotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NewProductNotificationCountArgs<ExtArgs>,
            result: $Utils.Optional<NewProductNotificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdProducts: number
    updatedProducts: number
    createdProductRecords: number
    updatedProductRecords: number
    createdProductSubscriptions: number
    updatedProductSubscriptions: number
    productSubscriptions: number
    createdNotifications: number
    updatedNotifications: number
    notifications: number
    createdProcessedProductRecords: number
    updatedProcessedProductRecords: number
    processedProductRecords: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdProducts?: boolean | UserCountOutputTypeCountCreatedProductsArgs
    updatedProducts?: boolean | UserCountOutputTypeCountUpdatedProductsArgs
    createdProductRecords?: boolean | UserCountOutputTypeCountCreatedProductRecordsArgs
    updatedProductRecords?: boolean | UserCountOutputTypeCountUpdatedProductRecordsArgs
    createdProductSubscriptions?: boolean | UserCountOutputTypeCountCreatedProductSubscriptionsArgs
    updatedProductSubscriptions?: boolean | UserCountOutputTypeCountUpdatedProductSubscriptionsArgs
    productSubscriptions?: boolean | UserCountOutputTypeCountProductSubscriptionsArgs
    createdNotifications?: boolean | UserCountOutputTypeCountCreatedNotificationsArgs
    updatedNotifications?: boolean | UserCountOutputTypeCountUpdatedNotificationsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    createdProcessedProductRecords?: boolean | UserCountOutputTypeCountCreatedProcessedProductRecordsArgs
    updatedProcessedProductRecords?: boolean | UserCountOutputTypeCountUpdatedProcessedProductRecordsArgs
    processedProductRecords?: boolean | UserCountOutputTypeCountProcessedProductRecordsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedProductRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductRecordWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedProductRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductRecordWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedProductSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductSubscriptionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedProductSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductSubscriptionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProductSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductSubscriptionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedProcessedProductRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessedProductRecordWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedProcessedProductRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessedProductRecordWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProcessedProductRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessedProductRecordWhereInput
  }



  /**
   * Count Type ProductRecordCountOutputType
   */

  export type ProductRecordCountOutputType = {
    errors: number
    statusChangeNotifications: number
    priceChangeNotifications: number
    processedRecords: number
  }

  export type ProductRecordCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    errors?: boolean | ProductRecordCountOutputTypeCountErrorsArgs
    statusChangeNotifications?: boolean | ProductRecordCountOutputTypeCountStatusChangeNotificationsArgs
    priceChangeNotifications?: boolean | ProductRecordCountOutputTypeCountPriceChangeNotificationsArgs
    processedRecords?: boolean | ProductRecordCountOutputTypeCountProcessedRecordsArgs
  }

  // Custom InputTypes

  /**
   * ProductRecordCountOutputType without action
   */
  export type ProductRecordCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecordCountOutputType
     */
    select?: ProductRecordCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProductRecordCountOutputType without action
   */
  export type ProductRecordCountOutputTypeCountErrorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductRecordErrorWhereInput
  }


  /**
   * ProductRecordCountOutputType without action
   */
  export type ProductRecordCountOutputTypeCountStatusChangeNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusChangeNotificationWhereInput
  }


  /**
   * ProductRecordCountOutputType without action
   */
  export type ProductRecordCountOutputTypeCountPriceChangeNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceChangeNotificationWhereInput
  }


  /**
   * ProductRecordCountOutputType without action
   */
  export type ProductRecordCountOutputTypeCountProcessedRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessedProductRecordWhereInput
  }



  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    records: number
    subscriptions: number
    newProductNotifications: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    records?: boolean | ProductCountOutputTypeCountRecordsArgs
    subscriptions?: boolean | ProductCountOutputTypeCountSubscriptionsArgs
    newProductNotifications?: boolean | ProductCountOutputTypeCountNewProductNotificationsArgs
  }

  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductRecordWhereInput
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductSubscriptionWhereInput
  }


  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountNewProductNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewProductNotificationWhereInput
  }



  /**
   * Count Type StatusChangeSubscriptionCountOutputType
   */

  export type StatusChangeSubscriptionCountOutputType = {
    conditions: number
    notifications: number
  }

  export type StatusChangeSubscriptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conditions?: boolean | StatusChangeSubscriptionCountOutputTypeCountConditionsArgs
    notifications?: boolean | StatusChangeSubscriptionCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes

  /**
   * StatusChangeSubscriptionCountOutputType without action
   */
  export type StatusChangeSubscriptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscriptionCountOutputType
     */
    select?: StatusChangeSubscriptionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StatusChangeSubscriptionCountOutputType without action
   */
  export type StatusChangeSubscriptionCountOutputTypeCountConditionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusChangeSubscriptionConditionWhereInput
  }


  /**
   * StatusChangeSubscriptionCountOutputType without action
   */
  export type StatusChangeSubscriptionCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusChangeNotificationWhereInput
  }



  /**
   * Count Type PriceChangeSubscriptionCountOutputType
   */

  export type PriceChangeSubscriptionCountOutputType = {
    notifications: number
  }

  export type PriceChangeSubscriptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | PriceChangeSubscriptionCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes

  /**
   * PriceChangeSubscriptionCountOutputType without action
   */
  export type PriceChangeSubscriptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeSubscriptionCountOutputType
     */
    select?: PriceChangeSubscriptionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PriceChangeSubscriptionCountOutputType without action
   */
  export type PriceChangeSubscriptionCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceChangeNotificationWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    clerkId: string | null
    firstName: string | null
    lastName: string | null
    profileImageUrl: string | null
    emailAddress: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    clerkId: string | null
    firstName: string | null
    lastName: string | null
    profileImageUrl: string | null
    emailAddress: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    clerkId: number
    firstName: number
    lastName: number
    profileImageUrl: number
    emailAddress: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    clerkId?: true
    firstName?: true
    lastName?: true
    profileImageUrl?: true
    emailAddress?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    clerkId?: true
    firstName?: true
    lastName?: true
    profileImageUrl?: true
    emailAddress?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    clerkId?: true
    firstName?: true
    lastName?: true
    profileImageUrl?: true
    emailAddress?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl: string | null
    emailAddress: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    firstName?: boolean
    lastName?: boolean
    profileImageUrl?: boolean
    emailAddress?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdProducts?: boolean | User$createdProductsArgs<ExtArgs>
    updatedProducts?: boolean | User$updatedProductsArgs<ExtArgs>
    createdProductRecords?: boolean | User$createdProductRecordsArgs<ExtArgs>
    updatedProductRecords?: boolean | User$updatedProductRecordsArgs<ExtArgs>
    createdProductSubscriptions?: boolean | User$createdProductSubscriptionsArgs<ExtArgs>
    updatedProductSubscriptions?: boolean | User$updatedProductSubscriptionsArgs<ExtArgs>
    productSubscriptions?: boolean | User$productSubscriptionsArgs<ExtArgs>
    createdNotifications?: boolean | User$createdNotificationsArgs<ExtArgs>
    updatedNotifications?: boolean | User$updatedNotificationsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    createdProcessedProductRecords?: boolean | User$createdProcessedProductRecordsArgs<ExtArgs>
    updatedProcessedProductRecords?: boolean | User$updatedProcessedProductRecordsArgs<ExtArgs>
    processedProductRecords?: boolean | User$processedProductRecordsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    clerkId?: boolean
    firstName?: boolean
    lastName?: boolean
    profileImageUrl?: boolean
    emailAddress?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdProducts?: boolean | User$createdProductsArgs<ExtArgs>
    updatedProducts?: boolean | User$updatedProductsArgs<ExtArgs>
    createdProductRecords?: boolean | User$createdProductRecordsArgs<ExtArgs>
    updatedProductRecords?: boolean | User$updatedProductRecordsArgs<ExtArgs>
    createdProductSubscriptions?: boolean | User$createdProductSubscriptionsArgs<ExtArgs>
    updatedProductSubscriptions?: boolean | User$updatedProductSubscriptionsArgs<ExtArgs>
    productSubscriptions?: boolean | User$productSubscriptionsArgs<ExtArgs>
    createdNotifications?: boolean | User$createdNotificationsArgs<ExtArgs>
    updatedNotifications?: boolean | User$updatedNotificationsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    createdProcessedProductRecords?: boolean | User$createdProcessedProductRecordsArgs<ExtArgs>
    updatedProcessedProductRecords?: boolean | User$updatedProcessedProductRecordsArgs<ExtArgs>
    processedProductRecords?: boolean | User$processedProductRecordsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      createdProducts: Prisma.$ProductPayload<ExtArgs>[]
      updatedProducts: Prisma.$ProductPayload<ExtArgs>[]
      createdProductRecords: Prisma.$ProductRecordPayload<ExtArgs>[]
      updatedProductRecords: Prisma.$ProductRecordPayload<ExtArgs>[]
      createdProductSubscriptions: Prisma.$ProductSubscriptionPayload<ExtArgs>[]
      updatedProductSubscriptions: Prisma.$ProductSubscriptionPayload<ExtArgs>[]
      productSubscriptions: Prisma.$ProductSubscriptionPayload<ExtArgs>[]
      createdNotifications: Prisma.$NotificationPayload<ExtArgs>[]
      updatedNotifications: Prisma.$NotificationPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      createdProcessedProductRecords: Prisma.$ProcessedProductRecordPayload<ExtArgs>[]
      updatedProcessedProductRecords: Prisma.$ProcessedProductRecordPayload<ExtArgs>[]
      processedProductRecords: Prisma.$ProcessedProductRecordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clerkId: string
      firstName: string
      lastName: string
      profileImageUrl: string | null
      emailAddress: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdProducts<T extends User$createdProductsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'> | Null>;

    updatedProducts<T extends User$updatedProductsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'> | Null>;

    createdProductRecords<T extends User$createdProductRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdProductRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductRecordPayload<ExtArgs>, T, 'findMany'> | Null>;

    updatedProductRecords<T extends User$updatedProductRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedProductRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductRecordPayload<ExtArgs>, T, 'findMany'> | Null>;

    createdProductSubscriptions<T extends User$createdProductSubscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdProductSubscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductSubscriptionPayload<ExtArgs>, T, 'findMany'> | Null>;

    updatedProductSubscriptions<T extends User$updatedProductSubscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedProductSubscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductSubscriptionPayload<ExtArgs>, T, 'findMany'> | Null>;

    productSubscriptions<T extends User$productSubscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, User$productSubscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductSubscriptionPayload<ExtArgs>, T, 'findMany'> | Null>;

    createdNotifications<T extends User$createdNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    updatedNotifications<T extends User$updatedNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    createdProcessedProductRecords<T extends User$createdProcessedProductRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdProcessedProductRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessedProductRecordPayload<ExtArgs>, T, 'findMany'> | Null>;

    updatedProcessedProductRecords<T extends User$updatedProcessedProductRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedProcessedProductRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessedProductRecordPayload<ExtArgs>, T, 'findMany'> | Null>;

    processedProductRecords<T extends User$processedProductRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$processedProductRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessedProductRecordPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly clerkId: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly profileImageUrl: FieldRef<"User", 'String'>
    readonly emailAddress: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.createdProducts
   */
  export type User$createdProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * User.updatedProducts
   */
  export type User$updatedProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * User.createdProductRecords
   */
  export type User$createdProductRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecord
     */
    select?: ProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordInclude<ExtArgs> | null
    where?: ProductRecordWhereInput
    orderBy?: ProductRecordOrderByWithRelationInput | ProductRecordOrderByWithRelationInput[]
    cursor?: ProductRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductRecordScalarFieldEnum | ProductRecordScalarFieldEnum[]
  }


  /**
   * User.updatedProductRecords
   */
  export type User$updatedProductRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecord
     */
    select?: ProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordInclude<ExtArgs> | null
    where?: ProductRecordWhereInput
    orderBy?: ProductRecordOrderByWithRelationInput | ProductRecordOrderByWithRelationInput[]
    cursor?: ProductRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductRecordScalarFieldEnum | ProductRecordScalarFieldEnum[]
  }


  /**
   * User.createdProductSubscriptions
   */
  export type User$createdProductSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSubscription
     */
    select?: ProductSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSubscriptionInclude<ExtArgs> | null
    where?: ProductSubscriptionWhereInput
    orderBy?: ProductSubscriptionOrderByWithRelationInput | ProductSubscriptionOrderByWithRelationInput[]
    cursor?: ProductSubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductSubscriptionScalarFieldEnum | ProductSubscriptionScalarFieldEnum[]
  }


  /**
   * User.updatedProductSubscriptions
   */
  export type User$updatedProductSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSubscription
     */
    select?: ProductSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSubscriptionInclude<ExtArgs> | null
    where?: ProductSubscriptionWhereInput
    orderBy?: ProductSubscriptionOrderByWithRelationInput | ProductSubscriptionOrderByWithRelationInput[]
    cursor?: ProductSubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductSubscriptionScalarFieldEnum | ProductSubscriptionScalarFieldEnum[]
  }


  /**
   * User.productSubscriptions
   */
  export type User$productSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSubscription
     */
    select?: ProductSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSubscriptionInclude<ExtArgs> | null
    where?: ProductSubscriptionWhereInput
    orderBy?: ProductSubscriptionOrderByWithRelationInput | ProductSubscriptionOrderByWithRelationInput[]
    cursor?: ProductSubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductSubscriptionScalarFieldEnum | ProductSubscriptionScalarFieldEnum[]
  }


  /**
   * User.createdNotifications
   */
  export type User$createdNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * User.updatedNotifications
   */
  export type User$updatedNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * User.createdProcessedProductRecords
   */
  export type User$createdProcessedProductRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessedProductRecord
     */
    select?: ProcessedProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcessedProductRecordInclude<ExtArgs> | null
    where?: ProcessedProductRecordWhereInput
    orderBy?: ProcessedProductRecordOrderByWithRelationInput | ProcessedProductRecordOrderByWithRelationInput[]
    cursor?: ProcessedProductRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessedProductRecordScalarFieldEnum | ProcessedProductRecordScalarFieldEnum[]
  }


  /**
   * User.updatedProcessedProductRecords
   */
  export type User$updatedProcessedProductRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessedProductRecord
     */
    select?: ProcessedProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcessedProductRecordInclude<ExtArgs> | null
    where?: ProcessedProductRecordWhereInput
    orderBy?: ProcessedProductRecordOrderByWithRelationInput | ProcessedProductRecordOrderByWithRelationInput[]
    cursor?: ProcessedProductRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessedProductRecordScalarFieldEnum | ProcessedProductRecordScalarFieldEnum[]
  }


  /**
   * User.processedProductRecords
   */
  export type User$processedProductRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessedProductRecord
     */
    select?: ProcessedProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcessedProductRecordInclude<ExtArgs> | null
    where?: ProcessedProductRecordWhereInput
    orderBy?: ProcessedProductRecordOrderByWithRelationInput | ProcessedProductRecordOrderByWithRelationInput[]
    cursor?: ProcessedProductRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessedProductRecordScalarFieldEnum | ProcessedProductRecordScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model HttpNetworkErrorData
   */

  export type AggregateHttpNetworkErrorData = {
    _count: HttpNetworkErrorDataCountAggregateOutputType | null
    _min: HttpNetworkErrorDataMinAggregateOutputType | null
    _max: HttpNetworkErrorDataMaxAggregateOutputType | null
  }

  export type HttpNetworkErrorDataMinAggregateOutputType = {
    id: string | null
    url: string | null
  }

  export type HttpNetworkErrorDataMaxAggregateOutputType = {
    id: string | null
    url: string | null
  }

  export type HttpNetworkErrorDataCountAggregateOutputType = {
    id: number
    url: number
    _all: number
  }


  export type HttpNetworkErrorDataMinAggregateInputType = {
    id?: true
    url?: true
  }

  export type HttpNetworkErrorDataMaxAggregateInputType = {
    id?: true
    url?: true
  }

  export type HttpNetworkErrorDataCountAggregateInputType = {
    id?: true
    url?: true
    _all?: true
  }

  export type HttpNetworkErrorDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HttpNetworkErrorData to aggregate.
     */
    where?: HttpNetworkErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HttpNetworkErrorData to fetch.
     */
    orderBy?: HttpNetworkErrorDataOrderByWithRelationInput | HttpNetworkErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HttpNetworkErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HttpNetworkErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HttpNetworkErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HttpNetworkErrorData
    **/
    _count?: true | HttpNetworkErrorDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HttpNetworkErrorDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HttpNetworkErrorDataMaxAggregateInputType
  }

  export type GetHttpNetworkErrorDataAggregateType<T extends HttpNetworkErrorDataAggregateArgs> = {
        [P in keyof T & keyof AggregateHttpNetworkErrorData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHttpNetworkErrorData[P]>
      : GetScalarType<T[P], AggregateHttpNetworkErrorData[P]>
  }




  export type HttpNetworkErrorDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HttpNetworkErrorDataWhereInput
    orderBy?: HttpNetworkErrorDataOrderByWithAggregationInput | HttpNetworkErrorDataOrderByWithAggregationInput[]
    by: HttpNetworkErrorDataScalarFieldEnum[] | HttpNetworkErrorDataScalarFieldEnum
    having?: HttpNetworkErrorDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HttpNetworkErrorDataCountAggregateInputType | true
    _min?: HttpNetworkErrorDataMinAggregateInputType
    _max?: HttpNetworkErrorDataMaxAggregateInputType
  }

  export type HttpNetworkErrorDataGroupByOutputType = {
    id: string
    url: string
    _count: HttpNetworkErrorDataCountAggregateOutputType | null
    _min: HttpNetworkErrorDataMinAggregateOutputType | null
    _max: HttpNetworkErrorDataMaxAggregateOutputType | null
  }

  type GetHttpNetworkErrorDataGroupByPayload<T extends HttpNetworkErrorDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HttpNetworkErrorDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HttpNetworkErrorDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HttpNetworkErrorDataGroupByOutputType[P]>
            : GetScalarType<T[P], HttpNetworkErrorDataGroupByOutputType[P]>
        }
      >
    >


  export type HttpNetworkErrorDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
  }, ExtArgs["result"]["httpNetworkErrorData"]>

  export type HttpNetworkErrorDataSelectScalar = {
    id?: boolean
    url?: boolean
  }


  export type $HttpNetworkErrorDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HttpNetworkErrorData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
    }, ExtArgs["result"]["httpNetworkErrorData"]>
    composites: {}
  }


  type HttpNetworkErrorDataGetPayload<S extends boolean | null | undefined | HttpNetworkErrorDataDefaultArgs> = $Result.GetResult<Prisma.$HttpNetworkErrorDataPayload, S>

  type HttpNetworkErrorDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HttpNetworkErrorDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HttpNetworkErrorDataCountAggregateInputType | true
    }

  export interface HttpNetworkErrorDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HttpNetworkErrorData'], meta: { name: 'HttpNetworkErrorData' } }
    /**
     * Find zero or one HttpNetworkErrorData that matches the filter.
     * @param {HttpNetworkErrorDataFindUniqueArgs} args - Arguments to find a HttpNetworkErrorData
     * @example
     * // Get one HttpNetworkErrorData
     * const httpNetworkErrorData = await prisma.httpNetworkErrorData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HttpNetworkErrorDataFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HttpNetworkErrorDataFindUniqueArgs<ExtArgs>>
    ): Prisma__HttpNetworkErrorDataClient<$Result.GetResult<Prisma.$HttpNetworkErrorDataPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one HttpNetworkErrorData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HttpNetworkErrorDataFindUniqueOrThrowArgs} args - Arguments to find a HttpNetworkErrorData
     * @example
     * // Get one HttpNetworkErrorData
     * const httpNetworkErrorData = await prisma.httpNetworkErrorData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HttpNetworkErrorDataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpNetworkErrorDataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HttpNetworkErrorDataClient<$Result.GetResult<Prisma.$HttpNetworkErrorDataPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first HttpNetworkErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpNetworkErrorDataFindFirstArgs} args - Arguments to find a HttpNetworkErrorData
     * @example
     * // Get one HttpNetworkErrorData
     * const httpNetworkErrorData = await prisma.httpNetworkErrorData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HttpNetworkErrorDataFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpNetworkErrorDataFindFirstArgs<ExtArgs>>
    ): Prisma__HttpNetworkErrorDataClient<$Result.GetResult<Prisma.$HttpNetworkErrorDataPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first HttpNetworkErrorData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpNetworkErrorDataFindFirstOrThrowArgs} args - Arguments to find a HttpNetworkErrorData
     * @example
     * // Get one HttpNetworkErrorData
     * const httpNetworkErrorData = await prisma.httpNetworkErrorData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HttpNetworkErrorDataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpNetworkErrorDataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HttpNetworkErrorDataClient<$Result.GetResult<Prisma.$HttpNetworkErrorDataPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more HttpNetworkErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpNetworkErrorDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HttpNetworkErrorData
     * const httpNetworkErrorData = await prisma.httpNetworkErrorData.findMany()
     * 
     * // Get first 10 HttpNetworkErrorData
     * const httpNetworkErrorData = await prisma.httpNetworkErrorData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const httpNetworkErrorDataWithIdOnly = await prisma.httpNetworkErrorData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HttpNetworkErrorDataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpNetworkErrorDataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HttpNetworkErrorDataPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a HttpNetworkErrorData.
     * @param {HttpNetworkErrorDataCreateArgs} args - Arguments to create a HttpNetworkErrorData.
     * @example
     * // Create one HttpNetworkErrorData
     * const HttpNetworkErrorData = await prisma.httpNetworkErrorData.create({
     *   data: {
     *     // ... data to create a HttpNetworkErrorData
     *   }
     * })
     * 
    **/
    create<T extends HttpNetworkErrorDataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HttpNetworkErrorDataCreateArgs<ExtArgs>>
    ): Prisma__HttpNetworkErrorDataClient<$Result.GetResult<Prisma.$HttpNetworkErrorDataPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many HttpNetworkErrorData.
     *     @param {HttpNetworkErrorDataCreateManyArgs} args - Arguments to create many HttpNetworkErrorData.
     *     @example
     *     // Create many HttpNetworkErrorData
     *     const httpNetworkErrorData = await prisma.httpNetworkErrorData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HttpNetworkErrorDataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpNetworkErrorDataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HttpNetworkErrorData.
     * @param {HttpNetworkErrorDataDeleteArgs} args - Arguments to delete one HttpNetworkErrorData.
     * @example
     * // Delete one HttpNetworkErrorData
     * const HttpNetworkErrorData = await prisma.httpNetworkErrorData.delete({
     *   where: {
     *     // ... filter to delete one HttpNetworkErrorData
     *   }
     * })
     * 
    **/
    delete<T extends HttpNetworkErrorDataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HttpNetworkErrorDataDeleteArgs<ExtArgs>>
    ): Prisma__HttpNetworkErrorDataClient<$Result.GetResult<Prisma.$HttpNetworkErrorDataPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one HttpNetworkErrorData.
     * @param {HttpNetworkErrorDataUpdateArgs} args - Arguments to update one HttpNetworkErrorData.
     * @example
     * // Update one HttpNetworkErrorData
     * const httpNetworkErrorData = await prisma.httpNetworkErrorData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HttpNetworkErrorDataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HttpNetworkErrorDataUpdateArgs<ExtArgs>>
    ): Prisma__HttpNetworkErrorDataClient<$Result.GetResult<Prisma.$HttpNetworkErrorDataPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more HttpNetworkErrorData.
     * @param {HttpNetworkErrorDataDeleteManyArgs} args - Arguments to filter HttpNetworkErrorData to delete.
     * @example
     * // Delete a few HttpNetworkErrorData
     * const { count } = await prisma.httpNetworkErrorData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HttpNetworkErrorDataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpNetworkErrorDataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HttpNetworkErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpNetworkErrorDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HttpNetworkErrorData
     * const httpNetworkErrorData = await prisma.httpNetworkErrorData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HttpNetworkErrorDataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HttpNetworkErrorDataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HttpNetworkErrorData.
     * @param {HttpNetworkErrorDataUpsertArgs} args - Arguments to update or create a HttpNetworkErrorData.
     * @example
     * // Update or create a HttpNetworkErrorData
     * const httpNetworkErrorData = await prisma.httpNetworkErrorData.upsert({
     *   create: {
     *     // ... data to create a HttpNetworkErrorData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HttpNetworkErrorData we want to update
     *   }
     * })
    **/
    upsert<T extends HttpNetworkErrorDataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HttpNetworkErrorDataUpsertArgs<ExtArgs>>
    ): Prisma__HttpNetworkErrorDataClient<$Result.GetResult<Prisma.$HttpNetworkErrorDataPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of HttpNetworkErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpNetworkErrorDataCountArgs} args - Arguments to filter HttpNetworkErrorData to count.
     * @example
     * // Count the number of HttpNetworkErrorData
     * const count = await prisma.httpNetworkErrorData.count({
     *   where: {
     *     // ... the filter for the HttpNetworkErrorData we want to count
     *   }
     * })
    **/
    count<T extends HttpNetworkErrorDataCountArgs>(
      args?: Subset<T, HttpNetworkErrorDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HttpNetworkErrorDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HttpNetworkErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpNetworkErrorDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HttpNetworkErrorDataAggregateArgs>(args: Subset<T, HttpNetworkErrorDataAggregateArgs>): Prisma.PrismaPromise<GetHttpNetworkErrorDataAggregateType<T>>

    /**
     * Group by HttpNetworkErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpNetworkErrorDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HttpNetworkErrorDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HttpNetworkErrorDataGroupByArgs['orderBy'] }
        : { orderBy?: HttpNetworkErrorDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HttpNetworkErrorDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHttpNetworkErrorDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HttpNetworkErrorData model
   */
  readonly fields: HttpNetworkErrorDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HttpNetworkErrorData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HttpNetworkErrorDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the HttpNetworkErrorData model
   */ 
  interface HttpNetworkErrorDataFieldRefs {
    readonly id: FieldRef<"HttpNetworkErrorData", 'String'>
    readonly url: FieldRef<"HttpNetworkErrorData", 'String'>
  }
    

  // Custom InputTypes

  /**
   * HttpNetworkErrorData findUnique
   */
  export type HttpNetworkErrorDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpNetworkErrorData
     */
    select?: HttpNetworkErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which HttpNetworkErrorData to fetch.
     */
    where: HttpNetworkErrorDataWhereUniqueInput
  }


  /**
   * HttpNetworkErrorData findUniqueOrThrow
   */
  export type HttpNetworkErrorDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpNetworkErrorData
     */
    select?: HttpNetworkErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which HttpNetworkErrorData to fetch.
     */
    where: HttpNetworkErrorDataWhereUniqueInput
  }


  /**
   * HttpNetworkErrorData findFirst
   */
  export type HttpNetworkErrorDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpNetworkErrorData
     */
    select?: HttpNetworkErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which HttpNetworkErrorData to fetch.
     */
    where?: HttpNetworkErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HttpNetworkErrorData to fetch.
     */
    orderBy?: HttpNetworkErrorDataOrderByWithRelationInput | HttpNetworkErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HttpNetworkErrorData.
     */
    cursor?: HttpNetworkErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HttpNetworkErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HttpNetworkErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HttpNetworkErrorData.
     */
    distinct?: HttpNetworkErrorDataScalarFieldEnum | HttpNetworkErrorDataScalarFieldEnum[]
  }


  /**
   * HttpNetworkErrorData findFirstOrThrow
   */
  export type HttpNetworkErrorDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpNetworkErrorData
     */
    select?: HttpNetworkErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which HttpNetworkErrorData to fetch.
     */
    where?: HttpNetworkErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HttpNetworkErrorData to fetch.
     */
    orderBy?: HttpNetworkErrorDataOrderByWithRelationInput | HttpNetworkErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HttpNetworkErrorData.
     */
    cursor?: HttpNetworkErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HttpNetworkErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HttpNetworkErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HttpNetworkErrorData.
     */
    distinct?: HttpNetworkErrorDataScalarFieldEnum | HttpNetworkErrorDataScalarFieldEnum[]
  }


  /**
   * HttpNetworkErrorData findMany
   */
  export type HttpNetworkErrorDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpNetworkErrorData
     */
    select?: HttpNetworkErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which HttpNetworkErrorData to fetch.
     */
    where?: HttpNetworkErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HttpNetworkErrorData to fetch.
     */
    orderBy?: HttpNetworkErrorDataOrderByWithRelationInput | HttpNetworkErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HttpNetworkErrorData.
     */
    cursor?: HttpNetworkErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HttpNetworkErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HttpNetworkErrorData.
     */
    skip?: number
    distinct?: HttpNetworkErrorDataScalarFieldEnum | HttpNetworkErrorDataScalarFieldEnum[]
  }


  /**
   * HttpNetworkErrorData create
   */
  export type HttpNetworkErrorDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpNetworkErrorData
     */
    select?: HttpNetworkErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to create a HttpNetworkErrorData.
     */
    data: XOR<HttpNetworkErrorDataCreateInput, HttpNetworkErrorDataUncheckedCreateInput>
  }


  /**
   * HttpNetworkErrorData createMany
   */
  export type HttpNetworkErrorDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HttpNetworkErrorData.
     */
    data: HttpNetworkErrorDataCreateManyInput | HttpNetworkErrorDataCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * HttpNetworkErrorData update
   */
  export type HttpNetworkErrorDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpNetworkErrorData
     */
    select?: HttpNetworkErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to update a HttpNetworkErrorData.
     */
    data: XOR<HttpNetworkErrorDataUpdateInput, HttpNetworkErrorDataUncheckedUpdateInput>
    /**
     * Choose, which HttpNetworkErrorData to update.
     */
    where: HttpNetworkErrorDataWhereUniqueInput
  }


  /**
   * HttpNetworkErrorData updateMany
   */
  export type HttpNetworkErrorDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HttpNetworkErrorData.
     */
    data: XOR<HttpNetworkErrorDataUpdateManyMutationInput, HttpNetworkErrorDataUncheckedUpdateManyInput>
    /**
     * Filter which HttpNetworkErrorData to update
     */
    where?: HttpNetworkErrorDataWhereInput
  }


  /**
   * HttpNetworkErrorData upsert
   */
  export type HttpNetworkErrorDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpNetworkErrorData
     */
    select?: HttpNetworkErrorDataSelect<ExtArgs> | null
    /**
     * The filter to search for the HttpNetworkErrorData to update in case it exists.
     */
    where: HttpNetworkErrorDataWhereUniqueInput
    /**
     * In case the HttpNetworkErrorData found by the `where` argument doesn't exist, create a new HttpNetworkErrorData with this data.
     */
    create: XOR<HttpNetworkErrorDataCreateInput, HttpNetworkErrorDataUncheckedCreateInput>
    /**
     * In case the HttpNetworkErrorData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HttpNetworkErrorDataUpdateInput, HttpNetworkErrorDataUncheckedUpdateInput>
  }


  /**
   * HttpNetworkErrorData delete
   */
  export type HttpNetworkErrorDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpNetworkErrorData
     */
    select?: HttpNetworkErrorDataSelect<ExtArgs> | null
    /**
     * Filter which HttpNetworkErrorData to delete.
     */
    where: HttpNetworkErrorDataWhereUniqueInput
  }


  /**
   * HttpNetworkErrorData deleteMany
   */
  export type HttpNetworkErrorDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HttpNetworkErrorData to delete
     */
    where?: HttpNetworkErrorDataWhereInput
  }


  /**
   * HttpNetworkErrorData without action
   */
  export type HttpNetworkErrorDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpNetworkErrorData
     */
    select?: HttpNetworkErrorDataSelect<ExtArgs> | null
  }



  /**
   * Model HttpSerializationErrorData
   */

  export type AggregateHttpSerializationErrorData = {
    _count: HttpSerializationErrorDataCountAggregateOutputType | null
    _min: HttpSerializationErrorDataMinAggregateOutputType | null
    _max: HttpSerializationErrorDataMaxAggregateOutputType | null
  }

  export type HttpSerializationErrorDataMinAggregateOutputType = {
    id: string | null
    url: string | null
  }

  export type HttpSerializationErrorDataMaxAggregateOutputType = {
    id: string | null
    url: string | null
  }

  export type HttpSerializationErrorDataCountAggregateOutputType = {
    id: number
    url: number
    _all: number
  }


  export type HttpSerializationErrorDataMinAggregateInputType = {
    id?: true
    url?: true
  }

  export type HttpSerializationErrorDataMaxAggregateInputType = {
    id?: true
    url?: true
  }

  export type HttpSerializationErrorDataCountAggregateInputType = {
    id?: true
    url?: true
    _all?: true
  }

  export type HttpSerializationErrorDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HttpSerializationErrorData to aggregate.
     */
    where?: HttpSerializationErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HttpSerializationErrorData to fetch.
     */
    orderBy?: HttpSerializationErrorDataOrderByWithRelationInput | HttpSerializationErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HttpSerializationErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HttpSerializationErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HttpSerializationErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HttpSerializationErrorData
    **/
    _count?: true | HttpSerializationErrorDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HttpSerializationErrorDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HttpSerializationErrorDataMaxAggregateInputType
  }

  export type GetHttpSerializationErrorDataAggregateType<T extends HttpSerializationErrorDataAggregateArgs> = {
        [P in keyof T & keyof AggregateHttpSerializationErrorData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHttpSerializationErrorData[P]>
      : GetScalarType<T[P], AggregateHttpSerializationErrorData[P]>
  }




  export type HttpSerializationErrorDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HttpSerializationErrorDataWhereInput
    orderBy?: HttpSerializationErrorDataOrderByWithAggregationInput | HttpSerializationErrorDataOrderByWithAggregationInput[]
    by: HttpSerializationErrorDataScalarFieldEnum[] | HttpSerializationErrorDataScalarFieldEnum
    having?: HttpSerializationErrorDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HttpSerializationErrorDataCountAggregateInputType | true
    _min?: HttpSerializationErrorDataMinAggregateInputType
    _max?: HttpSerializationErrorDataMaxAggregateInputType
  }

  export type HttpSerializationErrorDataGroupByOutputType = {
    id: string
    url: string
    _count: HttpSerializationErrorDataCountAggregateOutputType | null
    _min: HttpSerializationErrorDataMinAggregateOutputType | null
    _max: HttpSerializationErrorDataMaxAggregateOutputType | null
  }

  type GetHttpSerializationErrorDataGroupByPayload<T extends HttpSerializationErrorDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HttpSerializationErrorDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HttpSerializationErrorDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HttpSerializationErrorDataGroupByOutputType[P]>
            : GetScalarType<T[P], HttpSerializationErrorDataGroupByOutputType[P]>
        }
      >
    >


  export type HttpSerializationErrorDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
  }, ExtArgs["result"]["httpSerializationErrorData"]>

  export type HttpSerializationErrorDataSelectScalar = {
    id?: boolean
    url?: boolean
  }


  export type $HttpSerializationErrorDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HttpSerializationErrorData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
    }, ExtArgs["result"]["httpSerializationErrorData"]>
    composites: {}
  }


  type HttpSerializationErrorDataGetPayload<S extends boolean | null | undefined | HttpSerializationErrorDataDefaultArgs> = $Result.GetResult<Prisma.$HttpSerializationErrorDataPayload, S>

  type HttpSerializationErrorDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HttpSerializationErrorDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HttpSerializationErrorDataCountAggregateInputType | true
    }

  export interface HttpSerializationErrorDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HttpSerializationErrorData'], meta: { name: 'HttpSerializationErrorData' } }
    /**
     * Find zero or one HttpSerializationErrorData that matches the filter.
     * @param {HttpSerializationErrorDataFindUniqueArgs} args - Arguments to find a HttpSerializationErrorData
     * @example
     * // Get one HttpSerializationErrorData
     * const httpSerializationErrorData = await prisma.httpSerializationErrorData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HttpSerializationErrorDataFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HttpSerializationErrorDataFindUniqueArgs<ExtArgs>>
    ): Prisma__HttpSerializationErrorDataClient<$Result.GetResult<Prisma.$HttpSerializationErrorDataPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one HttpSerializationErrorData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HttpSerializationErrorDataFindUniqueOrThrowArgs} args - Arguments to find a HttpSerializationErrorData
     * @example
     * // Get one HttpSerializationErrorData
     * const httpSerializationErrorData = await prisma.httpSerializationErrorData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HttpSerializationErrorDataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpSerializationErrorDataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HttpSerializationErrorDataClient<$Result.GetResult<Prisma.$HttpSerializationErrorDataPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first HttpSerializationErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpSerializationErrorDataFindFirstArgs} args - Arguments to find a HttpSerializationErrorData
     * @example
     * // Get one HttpSerializationErrorData
     * const httpSerializationErrorData = await prisma.httpSerializationErrorData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HttpSerializationErrorDataFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpSerializationErrorDataFindFirstArgs<ExtArgs>>
    ): Prisma__HttpSerializationErrorDataClient<$Result.GetResult<Prisma.$HttpSerializationErrorDataPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first HttpSerializationErrorData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpSerializationErrorDataFindFirstOrThrowArgs} args - Arguments to find a HttpSerializationErrorData
     * @example
     * // Get one HttpSerializationErrorData
     * const httpSerializationErrorData = await prisma.httpSerializationErrorData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HttpSerializationErrorDataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpSerializationErrorDataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HttpSerializationErrorDataClient<$Result.GetResult<Prisma.$HttpSerializationErrorDataPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more HttpSerializationErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpSerializationErrorDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HttpSerializationErrorData
     * const httpSerializationErrorData = await prisma.httpSerializationErrorData.findMany()
     * 
     * // Get first 10 HttpSerializationErrorData
     * const httpSerializationErrorData = await prisma.httpSerializationErrorData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const httpSerializationErrorDataWithIdOnly = await prisma.httpSerializationErrorData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HttpSerializationErrorDataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpSerializationErrorDataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HttpSerializationErrorDataPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a HttpSerializationErrorData.
     * @param {HttpSerializationErrorDataCreateArgs} args - Arguments to create a HttpSerializationErrorData.
     * @example
     * // Create one HttpSerializationErrorData
     * const HttpSerializationErrorData = await prisma.httpSerializationErrorData.create({
     *   data: {
     *     // ... data to create a HttpSerializationErrorData
     *   }
     * })
     * 
    **/
    create<T extends HttpSerializationErrorDataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HttpSerializationErrorDataCreateArgs<ExtArgs>>
    ): Prisma__HttpSerializationErrorDataClient<$Result.GetResult<Prisma.$HttpSerializationErrorDataPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many HttpSerializationErrorData.
     *     @param {HttpSerializationErrorDataCreateManyArgs} args - Arguments to create many HttpSerializationErrorData.
     *     @example
     *     // Create many HttpSerializationErrorData
     *     const httpSerializationErrorData = await prisma.httpSerializationErrorData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HttpSerializationErrorDataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpSerializationErrorDataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HttpSerializationErrorData.
     * @param {HttpSerializationErrorDataDeleteArgs} args - Arguments to delete one HttpSerializationErrorData.
     * @example
     * // Delete one HttpSerializationErrorData
     * const HttpSerializationErrorData = await prisma.httpSerializationErrorData.delete({
     *   where: {
     *     // ... filter to delete one HttpSerializationErrorData
     *   }
     * })
     * 
    **/
    delete<T extends HttpSerializationErrorDataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HttpSerializationErrorDataDeleteArgs<ExtArgs>>
    ): Prisma__HttpSerializationErrorDataClient<$Result.GetResult<Prisma.$HttpSerializationErrorDataPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one HttpSerializationErrorData.
     * @param {HttpSerializationErrorDataUpdateArgs} args - Arguments to update one HttpSerializationErrorData.
     * @example
     * // Update one HttpSerializationErrorData
     * const httpSerializationErrorData = await prisma.httpSerializationErrorData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HttpSerializationErrorDataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HttpSerializationErrorDataUpdateArgs<ExtArgs>>
    ): Prisma__HttpSerializationErrorDataClient<$Result.GetResult<Prisma.$HttpSerializationErrorDataPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more HttpSerializationErrorData.
     * @param {HttpSerializationErrorDataDeleteManyArgs} args - Arguments to filter HttpSerializationErrorData to delete.
     * @example
     * // Delete a few HttpSerializationErrorData
     * const { count } = await prisma.httpSerializationErrorData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HttpSerializationErrorDataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpSerializationErrorDataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HttpSerializationErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpSerializationErrorDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HttpSerializationErrorData
     * const httpSerializationErrorData = await prisma.httpSerializationErrorData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HttpSerializationErrorDataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HttpSerializationErrorDataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HttpSerializationErrorData.
     * @param {HttpSerializationErrorDataUpsertArgs} args - Arguments to update or create a HttpSerializationErrorData.
     * @example
     * // Update or create a HttpSerializationErrorData
     * const httpSerializationErrorData = await prisma.httpSerializationErrorData.upsert({
     *   create: {
     *     // ... data to create a HttpSerializationErrorData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HttpSerializationErrorData we want to update
     *   }
     * })
    **/
    upsert<T extends HttpSerializationErrorDataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HttpSerializationErrorDataUpsertArgs<ExtArgs>>
    ): Prisma__HttpSerializationErrorDataClient<$Result.GetResult<Prisma.$HttpSerializationErrorDataPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of HttpSerializationErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpSerializationErrorDataCountArgs} args - Arguments to filter HttpSerializationErrorData to count.
     * @example
     * // Count the number of HttpSerializationErrorData
     * const count = await prisma.httpSerializationErrorData.count({
     *   where: {
     *     // ... the filter for the HttpSerializationErrorData we want to count
     *   }
     * })
    **/
    count<T extends HttpSerializationErrorDataCountArgs>(
      args?: Subset<T, HttpSerializationErrorDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HttpSerializationErrorDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HttpSerializationErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpSerializationErrorDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HttpSerializationErrorDataAggregateArgs>(args: Subset<T, HttpSerializationErrorDataAggregateArgs>): Prisma.PrismaPromise<GetHttpSerializationErrorDataAggregateType<T>>

    /**
     * Group by HttpSerializationErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpSerializationErrorDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HttpSerializationErrorDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HttpSerializationErrorDataGroupByArgs['orderBy'] }
        : { orderBy?: HttpSerializationErrorDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HttpSerializationErrorDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHttpSerializationErrorDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HttpSerializationErrorData model
   */
  readonly fields: HttpSerializationErrorDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HttpSerializationErrorData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HttpSerializationErrorDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the HttpSerializationErrorData model
   */ 
  interface HttpSerializationErrorDataFieldRefs {
    readonly id: FieldRef<"HttpSerializationErrorData", 'String'>
    readonly url: FieldRef<"HttpSerializationErrorData", 'String'>
  }
    

  // Custom InputTypes

  /**
   * HttpSerializationErrorData findUnique
   */
  export type HttpSerializationErrorDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpSerializationErrorData
     */
    select?: HttpSerializationErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which HttpSerializationErrorData to fetch.
     */
    where: HttpSerializationErrorDataWhereUniqueInput
  }


  /**
   * HttpSerializationErrorData findUniqueOrThrow
   */
  export type HttpSerializationErrorDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpSerializationErrorData
     */
    select?: HttpSerializationErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which HttpSerializationErrorData to fetch.
     */
    where: HttpSerializationErrorDataWhereUniqueInput
  }


  /**
   * HttpSerializationErrorData findFirst
   */
  export type HttpSerializationErrorDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpSerializationErrorData
     */
    select?: HttpSerializationErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which HttpSerializationErrorData to fetch.
     */
    where?: HttpSerializationErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HttpSerializationErrorData to fetch.
     */
    orderBy?: HttpSerializationErrorDataOrderByWithRelationInput | HttpSerializationErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HttpSerializationErrorData.
     */
    cursor?: HttpSerializationErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HttpSerializationErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HttpSerializationErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HttpSerializationErrorData.
     */
    distinct?: HttpSerializationErrorDataScalarFieldEnum | HttpSerializationErrorDataScalarFieldEnum[]
  }


  /**
   * HttpSerializationErrorData findFirstOrThrow
   */
  export type HttpSerializationErrorDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpSerializationErrorData
     */
    select?: HttpSerializationErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which HttpSerializationErrorData to fetch.
     */
    where?: HttpSerializationErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HttpSerializationErrorData to fetch.
     */
    orderBy?: HttpSerializationErrorDataOrderByWithRelationInput | HttpSerializationErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HttpSerializationErrorData.
     */
    cursor?: HttpSerializationErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HttpSerializationErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HttpSerializationErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HttpSerializationErrorData.
     */
    distinct?: HttpSerializationErrorDataScalarFieldEnum | HttpSerializationErrorDataScalarFieldEnum[]
  }


  /**
   * HttpSerializationErrorData findMany
   */
  export type HttpSerializationErrorDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpSerializationErrorData
     */
    select?: HttpSerializationErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which HttpSerializationErrorData to fetch.
     */
    where?: HttpSerializationErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HttpSerializationErrorData to fetch.
     */
    orderBy?: HttpSerializationErrorDataOrderByWithRelationInput | HttpSerializationErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HttpSerializationErrorData.
     */
    cursor?: HttpSerializationErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HttpSerializationErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HttpSerializationErrorData.
     */
    skip?: number
    distinct?: HttpSerializationErrorDataScalarFieldEnum | HttpSerializationErrorDataScalarFieldEnum[]
  }


  /**
   * HttpSerializationErrorData create
   */
  export type HttpSerializationErrorDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpSerializationErrorData
     */
    select?: HttpSerializationErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to create a HttpSerializationErrorData.
     */
    data: XOR<HttpSerializationErrorDataCreateInput, HttpSerializationErrorDataUncheckedCreateInput>
  }


  /**
   * HttpSerializationErrorData createMany
   */
  export type HttpSerializationErrorDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HttpSerializationErrorData.
     */
    data: HttpSerializationErrorDataCreateManyInput | HttpSerializationErrorDataCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * HttpSerializationErrorData update
   */
  export type HttpSerializationErrorDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpSerializationErrorData
     */
    select?: HttpSerializationErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to update a HttpSerializationErrorData.
     */
    data: XOR<HttpSerializationErrorDataUpdateInput, HttpSerializationErrorDataUncheckedUpdateInput>
    /**
     * Choose, which HttpSerializationErrorData to update.
     */
    where: HttpSerializationErrorDataWhereUniqueInput
  }


  /**
   * HttpSerializationErrorData updateMany
   */
  export type HttpSerializationErrorDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HttpSerializationErrorData.
     */
    data: XOR<HttpSerializationErrorDataUpdateManyMutationInput, HttpSerializationErrorDataUncheckedUpdateManyInput>
    /**
     * Filter which HttpSerializationErrorData to update
     */
    where?: HttpSerializationErrorDataWhereInput
  }


  /**
   * HttpSerializationErrorData upsert
   */
  export type HttpSerializationErrorDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpSerializationErrorData
     */
    select?: HttpSerializationErrorDataSelect<ExtArgs> | null
    /**
     * The filter to search for the HttpSerializationErrorData to update in case it exists.
     */
    where: HttpSerializationErrorDataWhereUniqueInput
    /**
     * In case the HttpSerializationErrorData found by the `where` argument doesn't exist, create a new HttpSerializationErrorData with this data.
     */
    create: XOR<HttpSerializationErrorDataCreateInput, HttpSerializationErrorDataUncheckedCreateInput>
    /**
     * In case the HttpSerializationErrorData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HttpSerializationErrorDataUpdateInput, HttpSerializationErrorDataUncheckedUpdateInput>
  }


  /**
   * HttpSerializationErrorData delete
   */
  export type HttpSerializationErrorDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpSerializationErrorData
     */
    select?: HttpSerializationErrorDataSelect<ExtArgs> | null
    /**
     * Filter which HttpSerializationErrorData to delete.
     */
    where: HttpSerializationErrorDataWhereUniqueInput
  }


  /**
   * HttpSerializationErrorData deleteMany
   */
  export type HttpSerializationErrorDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HttpSerializationErrorData to delete
     */
    where?: HttpSerializationErrorDataWhereInput
  }


  /**
   * HttpSerializationErrorData without action
   */
  export type HttpSerializationErrorDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpSerializationErrorData
     */
    select?: HttpSerializationErrorDataSelect<ExtArgs> | null
  }



  /**
   * Model HttpClientErrorData
   */

  export type AggregateHttpClientErrorData = {
    _count: HttpClientErrorDataCountAggregateOutputType | null
    _avg: HttpClientErrorDataAvgAggregateOutputType | null
    _sum: HttpClientErrorDataSumAggregateOutputType | null
    _min: HttpClientErrorDataMinAggregateOutputType | null
    _max: HttpClientErrorDataMaxAggregateOutputType | null
  }

  export type HttpClientErrorDataAvgAggregateOutputType = {
    status: number | null
  }

  export type HttpClientErrorDataSumAggregateOutputType = {
    status: number | null
  }

  export type HttpClientErrorDataMinAggregateOutputType = {
    id: string | null
    url: string | null
    status: number | null
  }

  export type HttpClientErrorDataMaxAggregateOutputType = {
    id: string | null
    url: string | null
    status: number | null
  }

  export type HttpClientErrorDataCountAggregateOutputType = {
    id: number
    url: number
    status: number
    _all: number
  }


  export type HttpClientErrorDataAvgAggregateInputType = {
    status?: true
  }

  export type HttpClientErrorDataSumAggregateInputType = {
    status?: true
  }

  export type HttpClientErrorDataMinAggregateInputType = {
    id?: true
    url?: true
    status?: true
  }

  export type HttpClientErrorDataMaxAggregateInputType = {
    id?: true
    url?: true
    status?: true
  }

  export type HttpClientErrorDataCountAggregateInputType = {
    id?: true
    url?: true
    status?: true
    _all?: true
  }

  export type HttpClientErrorDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HttpClientErrorData to aggregate.
     */
    where?: HttpClientErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HttpClientErrorData to fetch.
     */
    orderBy?: HttpClientErrorDataOrderByWithRelationInput | HttpClientErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HttpClientErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HttpClientErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HttpClientErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HttpClientErrorData
    **/
    _count?: true | HttpClientErrorDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HttpClientErrorDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HttpClientErrorDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HttpClientErrorDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HttpClientErrorDataMaxAggregateInputType
  }

  export type GetHttpClientErrorDataAggregateType<T extends HttpClientErrorDataAggregateArgs> = {
        [P in keyof T & keyof AggregateHttpClientErrorData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHttpClientErrorData[P]>
      : GetScalarType<T[P], AggregateHttpClientErrorData[P]>
  }




  export type HttpClientErrorDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HttpClientErrorDataWhereInput
    orderBy?: HttpClientErrorDataOrderByWithAggregationInput | HttpClientErrorDataOrderByWithAggregationInput[]
    by: HttpClientErrorDataScalarFieldEnum[] | HttpClientErrorDataScalarFieldEnum
    having?: HttpClientErrorDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HttpClientErrorDataCountAggregateInputType | true
    _avg?: HttpClientErrorDataAvgAggregateInputType
    _sum?: HttpClientErrorDataSumAggregateInputType
    _min?: HttpClientErrorDataMinAggregateInputType
    _max?: HttpClientErrorDataMaxAggregateInputType
  }

  export type HttpClientErrorDataGroupByOutputType = {
    id: string
    url: string
    status: number
    _count: HttpClientErrorDataCountAggregateOutputType | null
    _avg: HttpClientErrorDataAvgAggregateOutputType | null
    _sum: HttpClientErrorDataSumAggregateOutputType | null
    _min: HttpClientErrorDataMinAggregateOutputType | null
    _max: HttpClientErrorDataMaxAggregateOutputType | null
  }

  type GetHttpClientErrorDataGroupByPayload<T extends HttpClientErrorDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HttpClientErrorDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HttpClientErrorDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HttpClientErrorDataGroupByOutputType[P]>
            : GetScalarType<T[P], HttpClientErrorDataGroupByOutputType[P]>
        }
      >
    >


  export type HttpClientErrorDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    status?: boolean
  }, ExtArgs["result"]["httpClientErrorData"]>

  export type HttpClientErrorDataSelectScalar = {
    id?: boolean
    url?: boolean
    status?: boolean
  }


  export type $HttpClientErrorDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HttpClientErrorData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      status: number
    }, ExtArgs["result"]["httpClientErrorData"]>
    composites: {}
  }


  type HttpClientErrorDataGetPayload<S extends boolean | null | undefined | HttpClientErrorDataDefaultArgs> = $Result.GetResult<Prisma.$HttpClientErrorDataPayload, S>

  type HttpClientErrorDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HttpClientErrorDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HttpClientErrorDataCountAggregateInputType | true
    }

  export interface HttpClientErrorDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HttpClientErrorData'], meta: { name: 'HttpClientErrorData' } }
    /**
     * Find zero or one HttpClientErrorData that matches the filter.
     * @param {HttpClientErrorDataFindUniqueArgs} args - Arguments to find a HttpClientErrorData
     * @example
     * // Get one HttpClientErrorData
     * const httpClientErrorData = await prisma.httpClientErrorData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HttpClientErrorDataFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HttpClientErrorDataFindUniqueArgs<ExtArgs>>
    ): Prisma__HttpClientErrorDataClient<$Result.GetResult<Prisma.$HttpClientErrorDataPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one HttpClientErrorData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HttpClientErrorDataFindUniqueOrThrowArgs} args - Arguments to find a HttpClientErrorData
     * @example
     * // Get one HttpClientErrorData
     * const httpClientErrorData = await prisma.httpClientErrorData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HttpClientErrorDataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpClientErrorDataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HttpClientErrorDataClient<$Result.GetResult<Prisma.$HttpClientErrorDataPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first HttpClientErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpClientErrorDataFindFirstArgs} args - Arguments to find a HttpClientErrorData
     * @example
     * // Get one HttpClientErrorData
     * const httpClientErrorData = await prisma.httpClientErrorData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HttpClientErrorDataFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpClientErrorDataFindFirstArgs<ExtArgs>>
    ): Prisma__HttpClientErrorDataClient<$Result.GetResult<Prisma.$HttpClientErrorDataPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first HttpClientErrorData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpClientErrorDataFindFirstOrThrowArgs} args - Arguments to find a HttpClientErrorData
     * @example
     * // Get one HttpClientErrorData
     * const httpClientErrorData = await prisma.httpClientErrorData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HttpClientErrorDataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpClientErrorDataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HttpClientErrorDataClient<$Result.GetResult<Prisma.$HttpClientErrorDataPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more HttpClientErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpClientErrorDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HttpClientErrorData
     * const httpClientErrorData = await prisma.httpClientErrorData.findMany()
     * 
     * // Get first 10 HttpClientErrorData
     * const httpClientErrorData = await prisma.httpClientErrorData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const httpClientErrorDataWithIdOnly = await prisma.httpClientErrorData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HttpClientErrorDataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpClientErrorDataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HttpClientErrorDataPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a HttpClientErrorData.
     * @param {HttpClientErrorDataCreateArgs} args - Arguments to create a HttpClientErrorData.
     * @example
     * // Create one HttpClientErrorData
     * const HttpClientErrorData = await prisma.httpClientErrorData.create({
     *   data: {
     *     // ... data to create a HttpClientErrorData
     *   }
     * })
     * 
    **/
    create<T extends HttpClientErrorDataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HttpClientErrorDataCreateArgs<ExtArgs>>
    ): Prisma__HttpClientErrorDataClient<$Result.GetResult<Prisma.$HttpClientErrorDataPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many HttpClientErrorData.
     *     @param {HttpClientErrorDataCreateManyArgs} args - Arguments to create many HttpClientErrorData.
     *     @example
     *     // Create many HttpClientErrorData
     *     const httpClientErrorData = await prisma.httpClientErrorData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HttpClientErrorDataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpClientErrorDataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HttpClientErrorData.
     * @param {HttpClientErrorDataDeleteArgs} args - Arguments to delete one HttpClientErrorData.
     * @example
     * // Delete one HttpClientErrorData
     * const HttpClientErrorData = await prisma.httpClientErrorData.delete({
     *   where: {
     *     // ... filter to delete one HttpClientErrorData
     *   }
     * })
     * 
    **/
    delete<T extends HttpClientErrorDataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HttpClientErrorDataDeleteArgs<ExtArgs>>
    ): Prisma__HttpClientErrorDataClient<$Result.GetResult<Prisma.$HttpClientErrorDataPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one HttpClientErrorData.
     * @param {HttpClientErrorDataUpdateArgs} args - Arguments to update one HttpClientErrorData.
     * @example
     * // Update one HttpClientErrorData
     * const httpClientErrorData = await prisma.httpClientErrorData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HttpClientErrorDataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HttpClientErrorDataUpdateArgs<ExtArgs>>
    ): Prisma__HttpClientErrorDataClient<$Result.GetResult<Prisma.$HttpClientErrorDataPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more HttpClientErrorData.
     * @param {HttpClientErrorDataDeleteManyArgs} args - Arguments to filter HttpClientErrorData to delete.
     * @example
     * // Delete a few HttpClientErrorData
     * const { count } = await prisma.httpClientErrorData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HttpClientErrorDataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HttpClientErrorDataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HttpClientErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpClientErrorDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HttpClientErrorData
     * const httpClientErrorData = await prisma.httpClientErrorData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HttpClientErrorDataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HttpClientErrorDataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HttpClientErrorData.
     * @param {HttpClientErrorDataUpsertArgs} args - Arguments to update or create a HttpClientErrorData.
     * @example
     * // Update or create a HttpClientErrorData
     * const httpClientErrorData = await prisma.httpClientErrorData.upsert({
     *   create: {
     *     // ... data to create a HttpClientErrorData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HttpClientErrorData we want to update
     *   }
     * })
    **/
    upsert<T extends HttpClientErrorDataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HttpClientErrorDataUpsertArgs<ExtArgs>>
    ): Prisma__HttpClientErrorDataClient<$Result.GetResult<Prisma.$HttpClientErrorDataPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of HttpClientErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpClientErrorDataCountArgs} args - Arguments to filter HttpClientErrorData to count.
     * @example
     * // Count the number of HttpClientErrorData
     * const count = await prisma.httpClientErrorData.count({
     *   where: {
     *     // ... the filter for the HttpClientErrorData we want to count
     *   }
     * })
    **/
    count<T extends HttpClientErrorDataCountArgs>(
      args?: Subset<T, HttpClientErrorDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HttpClientErrorDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HttpClientErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpClientErrorDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HttpClientErrorDataAggregateArgs>(args: Subset<T, HttpClientErrorDataAggregateArgs>): Prisma.PrismaPromise<GetHttpClientErrorDataAggregateType<T>>

    /**
     * Group by HttpClientErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HttpClientErrorDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HttpClientErrorDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HttpClientErrorDataGroupByArgs['orderBy'] }
        : { orderBy?: HttpClientErrorDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HttpClientErrorDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHttpClientErrorDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HttpClientErrorData model
   */
  readonly fields: HttpClientErrorDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HttpClientErrorData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HttpClientErrorDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the HttpClientErrorData model
   */ 
  interface HttpClientErrorDataFieldRefs {
    readonly id: FieldRef<"HttpClientErrorData", 'String'>
    readonly url: FieldRef<"HttpClientErrorData", 'String'>
    readonly status: FieldRef<"HttpClientErrorData", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * HttpClientErrorData findUnique
   */
  export type HttpClientErrorDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpClientErrorData
     */
    select?: HttpClientErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which HttpClientErrorData to fetch.
     */
    where: HttpClientErrorDataWhereUniqueInput
  }


  /**
   * HttpClientErrorData findUniqueOrThrow
   */
  export type HttpClientErrorDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpClientErrorData
     */
    select?: HttpClientErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which HttpClientErrorData to fetch.
     */
    where: HttpClientErrorDataWhereUniqueInput
  }


  /**
   * HttpClientErrorData findFirst
   */
  export type HttpClientErrorDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpClientErrorData
     */
    select?: HttpClientErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which HttpClientErrorData to fetch.
     */
    where?: HttpClientErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HttpClientErrorData to fetch.
     */
    orderBy?: HttpClientErrorDataOrderByWithRelationInput | HttpClientErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HttpClientErrorData.
     */
    cursor?: HttpClientErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HttpClientErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HttpClientErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HttpClientErrorData.
     */
    distinct?: HttpClientErrorDataScalarFieldEnum | HttpClientErrorDataScalarFieldEnum[]
  }


  /**
   * HttpClientErrorData findFirstOrThrow
   */
  export type HttpClientErrorDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpClientErrorData
     */
    select?: HttpClientErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which HttpClientErrorData to fetch.
     */
    where?: HttpClientErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HttpClientErrorData to fetch.
     */
    orderBy?: HttpClientErrorDataOrderByWithRelationInput | HttpClientErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HttpClientErrorData.
     */
    cursor?: HttpClientErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HttpClientErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HttpClientErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HttpClientErrorData.
     */
    distinct?: HttpClientErrorDataScalarFieldEnum | HttpClientErrorDataScalarFieldEnum[]
  }


  /**
   * HttpClientErrorData findMany
   */
  export type HttpClientErrorDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpClientErrorData
     */
    select?: HttpClientErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which HttpClientErrorData to fetch.
     */
    where?: HttpClientErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HttpClientErrorData to fetch.
     */
    orderBy?: HttpClientErrorDataOrderByWithRelationInput | HttpClientErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HttpClientErrorData.
     */
    cursor?: HttpClientErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HttpClientErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HttpClientErrorData.
     */
    skip?: number
    distinct?: HttpClientErrorDataScalarFieldEnum | HttpClientErrorDataScalarFieldEnum[]
  }


  /**
   * HttpClientErrorData create
   */
  export type HttpClientErrorDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpClientErrorData
     */
    select?: HttpClientErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to create a HttpClientErrorData.
     */
    data: XOR<HttpClientErrorDataCreateInput, HttpClientErrorDataUncheckedCreateInput>
  }


  /**
   * HttpClientErrorData createMany
   */
  export type HttpClientErrorDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HttpClientErrorData.
     */
    data: HttpClientErrorDataCreateManyInput | HttpClientErrorDataCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * HttpClientErrorData update
   */
  export type HttpClientErrorDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpClientErrorData
     */
    select?: HttpClientErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to update a HttpClientErrorData.
     */
    data: XOR<HttpClientErrorDataUpdateInput, HttpClientErrorDataUncheckedUpdateInput>
    /**
     * Choose, which HttpClientErrorData to update.
     */
    where: HttpClientErrorDataWhereUniqueInput
  }


  /**
   * HttpClientErrorData updateMany
   */
  export type HttpClientErrorDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HttpClientErrorData.
     */
    data: XOR<HttpClientErrorDataUpdateManyMutationInput, HttpClientErrorDataUncheckedUpdateManyInput>
    /**
     * Filter which HttpClientErrorData to update
     */
    where?: HttpClientErrorDataWhereInput
  }


  /**
   * HttpClientErrorData upsert
   */
  export type HttpClientErrorDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpClientErrorData
     */
    select?: HttpClientErrorDataSelect<ExtArgs> | null
    /**
     * The filter to search for the HttpClientErrorData to update in case it exists.
     */
    where: HttpClientErrorDataWhereUniqueInput
    /**
     * In case the HttpClientErrorData found by the `where` argument doesn't exist, create a new HttpClientErrorData with this data.
     */
    create: XOR<HttpClientErrorDataCreateInput, HttpClientErrorDataUncheckedCreateInput>
    /**
     * In case the HttpClientErrorData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HttpClientErrorDataUpdateInput, HttpClientErrorDataUncheckedUpdateInput>
  }


  /**
   * HttpClientErrorData delete
   */
  export type HttpClientErrorDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpClientErrorData
     */
    select?: HttpClientErrorDataSelect<ExtArgs> | null
    /**
     * Filter which HttpClientErrorData to delete.
     */
    where: HttpClientErrorDataWhereUniqueInput
  }


  /**
   * HttpClientErrorData deleteMany
   */
  export type HttpClientErrorDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HttpClientErrorData to delete
     */
    where?: HttpClientErrorDataWhereInput
  }


  /**
   * HttpClientErrorData without action
   */
  export type HttpClientErrorDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HttpClientErrorData
     */
    select?: HttpClientErrorDataSelect<ExtArgs> | null
  }



  /**
   * Model MissingAttributeErrorData
   */

  export type AggregateMissingAttributeErrorData = {
    _count: MissingAttributeErrorDataCountAggregateOutputType | null
    _min: MissingAttributeErrorDataMinAggregateOutputType | null
    _max: MissingAttributeErrorDataMaxAggregateOutputType | null
  }

  export type MissingAttributeErrorDataMinAggregateOutputType = {
    id: string | null
    attribute: $Enums.ElementAttribute | null
    parentHtml: string | null
  }

  export type MissingAttributeErrorDataMaxAggregateOutputType = {
    id: string | null
    attribute: $Enums.ElementAttribute | null
    parentHtml: string | null
  }

  export type MissingAttributeErrorDataCountAggregateOutputType = {
    id: number
    attribute: number
    parentHtml: number
    _all: number
  }


  export type MissingAttributeErrorDataMinAggregateInputType = {
    id?: true
    attribute?: true
    parentHtml?: true
  }

  export type MissingAttributeErrorDataMaxAggregateInputType = {
    id?: true
    attribute?: true
    parentHtml?: true
  }

  export type MissingAttributeErrorDataCountAggregateInputType = {
    id?: true
    attribute?: true
    parentHtml?: true
    _all?: true
  }

  export type MissingAttributeErrorDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MissingAttributeErrorData to aggregate.
     */
    where?: MissingAttributeErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MissingAttributeErrorData to fetch.
     */
    orderBy?: MissingAttributeErrorDataOrderByWithRelationInput | MissingAttributeErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MissingAttributeErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MissingAttributeErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MissingAttributeErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MissingAttributeErrorData
    **/
    _count?: true | MissingAttributeErrorDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MissingAttributeErrorDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MissingAttributeErrorDataMaxAggregateInputType
  }

  export type GetMissingAttributeErrorDataAggregateType<T extends MissingAttributeErrorDataAggregateArgs> = {
        [P in keyof T & keyof AggregateMissingAttributeErrorData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMissingAttributeErrorData[P]>
      : GetScalarType<T[P], AggregateMissingAttributeErrorData[P]>
  }




  export type MissingAttributeErrorDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MissingAttributeErrorDataWhereInput
    orderBy?: MissingAttributeErrorDataOrderByWithAggregationInput | MissingAttributeErrorDataOrderByWithAggregationInput[]
    by: MissingAttributeErrorDataScalarFieldEnum[] | MissingAttributeErrorDataScalarFieldEnum
    having?: MissingAttributeErrorDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MissingAttributeErrorDataCountAggregateInputType | true
    _min?: MissingAttributeErrorDataMinAggregateInputType
    _max?: MissingAttributeErrorDataMaxAggregateInputType
  }

  export type MissingAttributeErrorDataGroupByOutputType = {
    id: string
    attribute: $Enums.ElementAttribute
    parentHtml: string | null
    _count: MissingAttributeErrorDataCountAggregateOutputType | null
    _min: MissingAttributeErrorDataMinAggregateOutputType | null
    _max: MissingAttributeErrorDataMaxAggregateOutputType | null
  }

  type GetMissingAttributeErrorDataGroupByPayload<T extends MissingAttributeErrorDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MissingAttributeErrorDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MissingAttributeErrorDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MissingAttributeErrorDataGroupByOutputType[P]>
            : GetScalarType<T[P], MissingAttributeErrorDataGroupByOutputType[P]>
        }
      >
    >


  export type MissingAttributeErrorDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    attribute?: boolean
    parentHtml?: boolean
  }, ExtArgs["result"]["missingAttributeErrorData"]>

  export type MissingAttributeErrorDataSelectScalar = {
    id?: boolean
    attribute?: boolean
    parentHtml?: boolean
  }


  export type $MissingAttributeErrorDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MissingAttributeErrorData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      attribute: $Enums.ElementAttribute
      parentHtml: string | null
    }, ExtArgs["result"]["missingAttributeErrorData"]>
    composites: {}
  }


  type MissingAttributeErrorDataGetPayload<S extends boolean | null | undefined | MissingAttributeErrorDataDefaultArgs> = $Result.GetResult<Prisma.$MissingAttributeErrorDataPayload, S>

  type MissingAttributeErrorDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MissingAttributeErrorDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MissingAttributeErrorDataCountAggregateInputType | true
    }

  export interface MissingAttributeErrorDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MissingAttributeErrorData'], meta: { name: 'MissingAttributeErrorData' } }
    /**
     * Find zero or one MissingAttributeErrorData that matches the filter.
     * @param {MissingAttributeErrorDataFindUniqueArgs} args - Arguments to find a MissingAttributeErrorData
     * @example
     * // Get one MissingAttributeErrorData
     * const missingAttributeErrorData = await prisma.missingAttributeErrorData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MissingAttributeErrorDataFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MissingAttributeErrorDataFindUniqueArgs<ExtArgs>>
    ): Prisma__MissingAttributeErrorDataClient<$Result.GetResult<Prisma.$MissingAttributeErrorDataPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MissingAttributeErrorData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MissingAttributeErrorDataFindUniqueOrThrowArgs} args - Arguments to find a MissingAttributeErrorData
     * @example
     * // Get one MissingAttributeErrorData
     * const missingAttributeErrorData = await prisma.missingAttributeErrorData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MissingAttributeErrorDataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingAttributeErrorDataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MissingAttributeErrorDataClient<$Result.GetResult<Prisma.$MissingAttributeErrorDataPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MissingAttributeErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingAttributeErrorDataFindFirstArgs} args - Arguments to find a MissingAttributeErrorData
     * @example
     * // Get one MissingAttributeErrorData
     * const missingAttributeErrorData = await prisma.missingAttributeErrorData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MissingAttributeErrorDataFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingAttributeErrorDataFindFirstArgs<ExtArgs>>
    ): Prisma__MissingAttributeErrorDataClient<$Result.GetResult<Prisma.$MissingAttributeErrorDataPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MissingAttributeErrorData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingAttributeErrorDataFindFirstOrThrowArgs} args - Arguments to find a MissingAttributeErrorData
     * @example
     * // Get one MissingAttributeErrorData
     * const missingAttributeErrorData = await prisma.missingAttributeErrorData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MissingAttributeErrorDataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingAttributeErrorDataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MissingAttributeErrorDataClient<$Result.GetResult<Prisma.$MissingAttributeErrorDataPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MissingAttributeErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingAttributeErrorDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MissingAttributeErrorData
     * const missingAttributeErrorData = await prisma.missingAttributeErrorData.findMany()
     * 
     * // Get first 10 MissingAttributeErrorData
     * const missingAttributeErrorData = await prisma.missingAttributeErrorData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const missingAttributeErrorDataWithIdOnly = await prisma.missingAttributeErrorData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MissingAttributeErrorDataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingAttributeErrorDataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MissingAttributeErrorDataPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MissingAttributeErrorData.
     * @param {MissingAttributeErrorDataCreateArgs} args - Arguments to create a MissingAttributeErrorData.
     * @example
     * // Create one MissingAttributeErrorData
     * const MissingAttributeErrorData = await prisma.missingAttributeErrorData.create({
     *   data: {
     *     // ... data to create a MissingAttributeErrorData
     *   }
     * })
     * 
    **/
    create<T extends MissingAttributeErrorDataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MissingAttributeErrorDataCreateArgs<ExtArgs>>
    ): Prisma__MissingAttributeErrorDataClient<$Result.GetResult<Prisma.$MissingAttributeErrorDataPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MissingAttributeErrorData.
     *     @param {MissingAttributeErrorDataCreateManyArgs} args - Arguments to create many MissingAttributeErrorData.
     *     @example
     *     // Create many MissingAttributeErrorData
     *     const missingAttributeErrorData = await prisma.missingAttributeErrorData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MissingAttributeErrorDataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingAttributeErrorDataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MissingAttributeErrorData.
     * @param {MissingAttributeErrorDataDeleteArgs} args - Arguments to delete one MissingAttributeErrorData.
     * @example
     * // Delete one MissingAttributeErrorData
     * const MissingAttributeErrorData = await prisma.missingAttributeErrorData.delete({
     *   where: {
     *     // ... filter to delete one MissingAttributeErrorData
     *   }
     * })
     * 
    **/
    delete<T extends MissingAttributeErrorDataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MissingAttributeErrorDataDeleteArgs<ExtArgs>>
    ): Prisma__MissingAttributeErrorDataClient<$Result.GetResult<Prisma.$MissingAttributeErrorDataPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MissingAttributeErrorData.
     * @param {MissingAttributeErrorDataUpdateArgs} args - Arguments to update one MissingAttributeErrorData.
     * @example
     * // Update one MissingAttributeErrorData
     * const missingAttributeErrorData = await prisma.missingAttributeErrorData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MissingAttributeErrorDataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MissingAttributeErrorDataUpdateArgs<ExtArgs>>
    ): Prisma__MissingAttributeErrorDataClient<$Result.GetResult<Prisma.$MissingAttributeErrorDataPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MissingAttributeErrorData.
     * @param {MissingAttributeErrorDataDeleteManyArgs} args - Arguments to filter MissingAttributeErrorData to delete.
     * @example
     * // Delete a few MissingAttributeErrorData
     * const { count } = await prisma.missingAttributeErrorData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MissingAttributeErrorDataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingAttributeErrorDataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MissingAttributeErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingAttributeErrorDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MissingAttributeErrorData
     * const missingAttributeErrorData = await prisma.missingAttributeErrorData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MissingAttributeErrorDataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MissingAttributeErrorDataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MissingAttributeErrorData.
     * @param {MissingAttributeErrorDataUpsertArgs} args - Arguments to update or create a MissingAttributeErrorData.
     * @example
     * // Update or create a MissingAttributeErrorData
     * const missingAttributeErrorData = await prisma.missingAttributeErrorData.upsert({
     *   create: {
     *     // ... data to create a MissingAttributeErrorData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MissingAttributeErrorData we want to update
     *   }
     * })
    **/
    upsert<T extends MissingAttributeErrorDataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MissingAttributeErrorDataUpsertArgs<ExtArgs>>
    ): Prisma__MissingAttributeErrorDataClient<$Result.GetResult<Prisma.$MissingAttributeErrorDataPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MissingAttributeErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingAttributeErrorDataCountArgs} args - Arguments to filter MissingAttributeErrorData to count.
     * @example
     * // Count the number of MissingAttributeErrorData
     * const count = await prisma.missingAttributeErrorData.count({
     *   where: {
     *     // ... the filter for the MissingAttributeErrorData we want to count
     *   }
     * })
    **/
    count<T extends MissingAttributeErrorDataCountArgs>(
      args?: Subset<T, MissingAttributeErrorDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MissingAttributeErrorDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MissingAttributeErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingAttributeErrorDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MissingAttributeErrorDataAggregateArgs>(args: Subset<T, MissingAttributeErrorDataAggregateArgs>): Prisma.PrismaPromise<GetMissingAttributeErrorDataAggregateType<T>>

    /**
     * Group by MissingAttributeErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingAttributeErrorDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MissingAttributeErrorDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MissingAttributeErrorDataGroupByArgs['orderBy'] }
        : { orderBy?: MissingAttributeErrorDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MissingAttributeErrorDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMissingAttributeErrorDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MissingAttributeErrorData model
   */
  readonly fields: MissingAttributeErrorDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MissingAttributeErrorData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MissingAttributeErrorDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MissingAttributeErrorData model
   */ 
  interface MissingAttributeErrorDataFieldRefs {
    readonly id: FieldRef<"MissingAttributeErrorData", 'String'>
    readonly attribute: FieldRef<"MissingAttributeErrorData", 'ElementAttribute'>
    readonly parentHtml: FieldRef<"MissingAttributeErrorData", 'String'>
  }
    

  // Custom InputTypes

  /**
   * MissingAttributeErrorData findUnique
   */
  export type MissingAttributeErrorDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingAttributeErrorData
     */
    select?: MissingAttributeErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which MissingAttributeErrorData to fetch.
     */
    where: MissingAttributeErrorDataWhereUniqueInput
  }


  /**
   * MissingAttributeErrorData findUniqueOrThrow
   */
  export type MissingAttributeErrorDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingAttributeErrorData
     */
    select?: MissingAttributeErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which MissingAttributeErrorData to fetch.
     */
    where: MissingAttributeErrorDataWhereUniqueInput
  }


  /**
   * MissingAttributeErrorData findFirst
   */
  export type MissingAttributeErrorDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingAttributeErrorData
     */
    select?: MissingAttributeErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which MissingAttributeErrorData to fetch.
     */
    where?: MissingAttributeErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MissingAttributeErrorData to fetch.
     */
    orderBy?: MissingAttributeErrorDataOrderByWithRelationInput | MissingAttributeErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MissingAttributeErrorData.
     */
    cursor?: MissingAttributeErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MissingAttributeErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MissingAttributeErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MissingAttributeErrorData.
     */
    distinct?: MissingAttributeErrorDataScalarFieldEnum | MissingAttributeErrorDataScalarFieldEnum[]
  }


  /**
   * MissingAttributeErrorData findFirstOrThrow
   */
  export type MissingAttributeErrorDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingAttributeErrorData
     */
    select?: MissingAttributeErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which MissingAttributeErrorData to fetch.
     */
    where?: MissingAttributeErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MissingAttributeErrorData to fetch.
     */
    orderBy?: MissingAttributeErrorDataOrderByWithRelationInput | MissingAttributeErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MissingAttributeErrorData.
     */
    cursor?: MissingAttributeErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MissingAttributeErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MissingAttributeErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MissingAttributeErrorData.
     */
    distinct?: MissingAttributeErrorDataScalarFieldEnum | MissingAttributeErrorDataScalarFieldEnum[]
  }


  /**
   * MissingAttributeErrorData findMany
   */
  export type MissingAttributeErrorDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingAttributeErrorData
     */
    select?: MissingAttributeErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which MissingAttributeErrorData to fetch.
     */
    where?: MissingAttributeErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MissingAttributeErrorData to fetch.
     */
    orderBy?: MissingAttributeErrorDataOrderByWithRelationInput | MissingAttributeErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MissingAttributeErrorData.
     */
    cursor?: MissingAttributeErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MissingAttributeErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MissingAttributeErrorData.
     */
    skip?: number
    distinct?: MissingAttributeErrorDataScalarFieldEnum | MissingAttributeErrorDataScalarFieldEnum[]
  }


  /**
   * MissingAttributeErrorData create
   */
  export type MissingAttributeErrorDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingAttributeErrorData
     */
    select?: MissingAttributeErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to create a MissingAttributeErrorData.
     */
    data: XOR<MissingAttributeErrorDataCreateInput, MissingAttributeErrorDataUncheckedCreateInput>
  }


  /**
   * MissingAttributeErrorData createMany
   */
  export type MissingAttributeErrorDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MissingAttributeErrorData.
     */
    data: MissingAttributeErrorDataCreateManyInput | MissingAttributeErrorDataCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * MissingAttributeErrorData update
   */
  export type MissingAttributeErrorDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingAttributeErrorData
     */
    select?: MissingAttributeErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to update a MissingAttributeErrorData.
     */
    data: XOR<MissingAttributeErrorDataUpdateInput, MissingAttributeErrorDataUncheckedUpdateInput>
    /**
     * Choose, which MissingAttributeErrorData to update.
     */
    where: MissingAttributeErrorDataWhereUniqueInput
  }


  /**
   * MissingAttributeErrorData updateMany
   */
  export type MissingAttributeErrorDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MissingAttributeErrorData.
     */
    data: XOR<MissingAttributeErrorDataUpdateManyMutationInput, MissingAttributeErrorDataUncheckedUpdateManyInput>
    /**
     * Filter which MissingAttributeErrorData to update
     */
    where?: MissingAttributeErrorDataWhereInput
  }


  /**
   * MissingAttributeErrorData upsert
   */
  export type MissingAttributeErrorDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingAttributeErrorData
     */
    select?: MissingAttributeErrorDataSelect<ExtArgs> | null
    /**
     * The filter to search for the MissingAttributeErrorData to update in case it exists.
     */
    where: MissingAttributeErrorDataWhereUniqueInput
    /**
     * In case the MissingAttributeErrorData found by the `where` argument doesn't exist, create a new MissingAttributeErrorData with this data.
     */
    create: XOR<MissingAttributeErrorDataCreateInput, MissingAttributeErrorDataUncheckedCreateInput>
    /**
     * In case the MissingAttributeErrorData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MissingAttributeErrorDataUpdateInput, MissingAttributeErrorDataUncheckedUpdateInput>
  }


  /**
   * MissingAttributeErrorData delete
   */
  export type MissingAttributeErrorDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingAttributeErrorData
     */
    select?: MissingAttributeErrorDataSelect<ExtArgs> | null
    /**
     * Filter which MissingAttributeErrorData to delete.
     */
    where: MissingAttributeErrorDataWhereUniqueInput
  }


  /**
   * MissingAttributeErrorData deleteMany
   */
  export type MissingAttributeErrorDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MissingAttributeErrorData to delete
     */
    where?: MissingAttributeErrorDataWhereInput
  }


  /**
   * MissingAttributeErrorData without action
   */
  export type MissingAttributeErrorDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingAttributeErrorData
     */
    select?: MissingAttributeErrorDataSelect<ExtArgs> | null
  }



  /**
   * Model InvalidAttributeErrorData
   */

  export type AggregateInvalidAttributeErrorData = {
    _count: InvalidAttributeErrorDataCountAggregateOutputType | null
    _min: InvalidAttributeErrorDataMinAggregateOutputType | null
    _max: InvalidAttributeErrorDataMaxAggregateOutputType | null
  }

  export type InvalidAttributeErrorDataMinAggregateOutputType = {
    id: string | null
    attribute: $Enums.ElementAttribute | null
    parentHtml: string | null
    value: string | null
  }

  export type InvalidAttributeErrorDataMaxAggregateOutputType = {
    id: string | null
    attribute: $Enums.ElementAttribute | null
    parentHtml: string | null
    value: string | null
  }

  export type InvalidAttributeErrorDataCountAggregateOutputType = {
    id: number
    attribute: number
    parentHtml: number
    value: number
    _all: number
  }


  export type InvalidAttributeErrorDataMinAggregateInputType = {
    id?: true
    attribute?: true
    parentHtml?: true
    value?: true
  }

  export type InvalidAttributeErrorDataMaxAggregateInputType = {
    id?: true
    attribute?: true
    parentHtml?: true
    value?: true
  }

  export type InvalidAttributeErrorDataCountAggregateInputType = {
    id?: true
    attribute?: true
    parentHtml?: true
    value?: true
    _all?: true
  }

  export type InvalidAttributeErrorDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvalidAttributeErrorData to aggregate.
     */
    where?: InvalidAttributeErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvalidAttributeErrorData to fetch.
     */
    orderBy?: InvalidAttributeErrorDataOrderByWithRelationInput | InvalidAttributeErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvalidAttributeErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvalidAttributeErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvalidAttributeErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvalidAttributeErrorData
    **/
    _count?: true | InvalidAttributeErrorDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvalidAttributeErrorDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvalidAttributeErrorDataMaxAggregateInputType
  }

  export type GetInvalidAttributeErrorDataAggregateType<T extends InvalidAttributeErrorDataAggregateArgs> = {
        [P in keyof T & keyof AggregateInvalidAttributeErrorData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvalidAttributeErrorData[P]>
      : GetScalarType<T[P], AggregateInvalidAttributeErrorData[P]>
  }




  export type InvalidAttributeErrorDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvalidAttributeErrorDataWhereInput
    orderBy?: InvalidAttributeErrorDataOrderByWithAggregationInput | InvalidAttributeErrorDataOrderByWithAggregationInput[]
    by: InvalidAttributeErrorDataScalarFieldEnum[] | InvalidAttributeErrorDataScalarFieldEnum
    having?: InvalidAttributeErrorDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvalidAttributeErrorDataCountAggregateInputType | true
    _min?: InvalidAttributeErrorDataMinAggregateInputType
    _max?: InvalidAttributeErrorDataMaxAggregateInputType
  }

  export type InvalidAttributeErrorDataGroupByOutputType = {
    id: string
    attribute: $Enums.ElementAttribute
    parentHtml: string | null
    value: string
    _count: InvalidAttributeErrorDataCountAggregateOutputType | null
    _min: InvalidAttributeErrorDataMinAggregateOutputType | null
    _max: InvalidAttributeErrorDataMaxAggregateOutputType | null
  }

  type GetInvalidAttributeErrorDataGroupByPayload<T extends InvalidAttributeErrorDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvalidAttributeErrorDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvalidAttributeErrorDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvalidAttributeErrorDataGroupByOutputType[P]>
            : GetScalarType<T[P], InvalidAttributeErrorDataGroupByOutputType[P]>
        }
      >
    >


  export type InvalidAttributeErrorDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    attribute?: boolean
    parentHtml?: boolean
    value?: boolean
  }, ExtArgs["result"]["invalidAttributeErrorData"]>

  export type InvalidAttributeErrorDataSelectScalar = {
    id?: boolean
    attribute?: boolean
    parentHtml?: boolean
    value?: boolean
  }


  export type $InvalidAttributeErrorDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InvalidAttributeErrorData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      attribute: $Enums.ElementAttribute
      parentHtml: string | null
      value: string
    }, ExtArgs["result"]["invalidAttributeErrorData"]>
    composites: {}
  }


  type InvalidAttributeErrorDataGetPayload<S extends boolean | null | undefined | InvalidAttributeErrorDataDefaultArgs> = $Result.GetResult<Prisma.$InvalidAttributeErrorDataPayload, S>

  type InvalidAttributeErrorDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InvalidAttributeErrorDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InvalidAttributeErrorDataCountAggregateInputType | true
    }

  export interface InvalidAttributeErrorDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InvalidAttributeErrorData'], meta: { name: 'InvalidAttributeErrorData' } }
    /**
     * Find zero or one InvalidAttributeErrorData that matches the filter.
     * @param {InvalidAttributeErrorDataFindUniqueArgs} args - Arguments to find a InvalidAttributeErrorData
     * @example
     * // Get one InvalidAttributeErrorData
     * const invalidAttributeErrorData = await prisma.invalidAttributeErrorData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvalidAttributeErrorDataFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidAttributeErrorDataFindUniqueArgs<ExtArgs>>
    ): Prisma__InvalidAttributeErrorDataClient<$Result.GetResult<Prisma.$InvalidAttributeErrorDataPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one InvalidAttributeErrorData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InvalidAttributeErrorDataFindUniqueOrThrowArgs} args - Arguments to find a InvalidAttributeErrorData
     * @example
     * // Get one InvalidAttributeErrorData
     * const invalidAttributeErrorData = await prisma.invalidAttributeErrorData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InvalidAttributeErrorDataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidAttributeErrorDataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InvalidAttributeErrorDataClient<$Result.GetResult<Prisma.$InvalidAttributeErrorDataPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first InvalidAttributeErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidAttributeErrorDataFindFirstArgs} args - Arguments to find a InvalidAttributeErrorData
     * @example
     * // Get one InvalidAttributeErrorData
     * const invalidAttributeErrorData = await prisma.invalidAttributeErrorData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvalidAttributeErrorDataFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidAttributeErrorDataFindFirstArgs<ExtArgs>>
    ): Prisma__InvalidAttributeErrorDataClient<$Result.GetResult<Prisma.$InvalidAttributeErrorDataPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first InvalidAttributeErrorData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidAttributeErrorDataFindFirstOrThrowArgs} args - Arguments to find a InvalidAttributeErrorData
     * @example
     * // Get one InvalidAttributeErrorData
     * const invalidAttributeErrorData = await prisma.invalidAttributeErrorData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InvalidAttributeErrorDataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidAttributeErrorDataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InvalidAttributeErrorDataClient<$Result.GetResult<Prisma.$InvalidAttributeErrorDataPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more InvalidAttributeErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidAttributeErrorDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvalidAttributeErrorData
     * const invalidAttributeErrorData = await prisma.invalidAttributeErrorData.findMany()
     * 
     * // Get first 10 InvalidAttributeErrorData
     * const invalidAttributeErrorData = await prisma.invalidAttributeErrorData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invalidAttributeErrorDataWithIdOnly = await prisma.invalidAttributeErrorData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvalidAttributeErrorDataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidAttributeErrorDataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvalidAttributeErrorDataPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a InvalidAttributeErrorData.
     * @param {InvalidAttributeErrorDataCreateArgs} args - Arguments to create a InvalidAttributeErrorData.
     * @example
     * // Create one InvalidAttributeErrorData
     * const InvalidAttributeErrorData = await prisma.invalidAttributeErrorData.create({
     *   data: {
     *     // ... data to create a InvalidAttributeErrorData
     *   }
     * })
     * 
    **/
    create<T extends InvalidAttributeErrorDataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidAttributeErrorDataCreateArgs<ExtArgs>>
    ): Prisma__InvalidAttributeErrorDataClient<$Result.GetResult<Prisma.$InvalidAttributeErrorDataPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many InvalidAttributeErrorData.
     *     @param {InvalidAttributeErrorDataCreateManyArgs} args - Arguments to create many InvalidAttributeErrorData.
     *     @example
     *     // Create many InvalidAttributeErrorData
     *     const invalidAttributeErrorData = await prisma.invalidAttributeErrorData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvalidAttributeErrorDataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidAttributeErrorDataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InvalidAttributeErrorData.
     * @param {InvalidAttributeErrorDataDeleteArgs} args - Arguments to delete one InvalidAttributeErrorData.
     * @example
     * // Delete one InvalidAttributeErrorData
     * const InvalidAttributeErrorData = await prisma.invalidAttributeErrorData.delete({
     *   where: {
     *     // ... filter to delete one InvalidAttributeErrorData
     *   }
     * })
     * 
    **/
    delete<T extends InvalidAttributeErrorDataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidAttributeErrorDataDeleteArgs<ExtArgs>>
    ): Prisma__InvalidAttributeErrorDataClient<$Result.GetResult<Prisma.$InvalidAttributeErrorDataPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one InvalidAttributeErrorData.
     * @param {InvalidAttributeErrorDataUpdateArgs} args - Arguments to update one InvalidAttributeErrorData.
     * @example
     * // Update one InvalidAttributeErrorData
     * const invalidAttributeErrorData = await prisma.invalidAttributeErrorData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvalidAttributeErrorDataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidAttributeErrorDataUpdateArgs<ExtArgs>>
    ): Prisma__InvalidAttributeErrorDataClient<$Result.GetResult<Prisma.$InvalidAttributeErrorDataPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more InvalidAttributeErrorData.
     * @param {InvalidAttributeErrorDataDeleteManyArgs} args - Arguments to filter InvalidAttributeErrorData to delete.
     * @example
     * // Delete a few InvalidAttributeErrorData
     * const { count } = await prisma.invalidAttributeErrorData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvalidAttributeErrorDataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidAttributeErrorDataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvalidAttributeErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidAttributeErrorDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvalidAttributeErrorData
     * const invalidAttributeErrorData = await prisma.invalidAttributeErrorData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvalidAttributeErrorDataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidAttributeErrorDataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InvalidAttributeErrorData.
     * @param {InvalidAttributeErrorDataUpsertArgs} args - Arguments to update or create a InvalidAttributeErrorData.
     * @example
     * // Update or create a InvalidAttributeErrorData
     * const invalidAttributeErrorData = await prisma.invalidAttributeErrorData.upsert({
     *   create: {
     *     // ... data to create a InvalidAttributeErrorData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvalidAttributeErrorData we want to update
     *   }
     * })
    **/
    upsert<T extends InvalidAttributeErrorDataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidAttributeErrorDataUpsertArgs<ExtArgs>>
    ): Prisma__InvalidAttributeErrorDataClient<$Result.GetResult<Prisma.$InvalidAttributeErrorDataPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of InvalidAttributeErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidAttributeErrorDataCountArgs} args - Arguments to filter InvalidAttributeErrorData to count.
     * @example
     * // Count the number of InvalidAttributeErrorData
     * const count = await prisma.invalidAttributeErrorData.count({
     *   where: {
     *     // ... the filter for the InvalidAttributeErrorData we want to count
     *   }
     * })
    **/
    count<T extends InvalidAttributeErrorDataCountArgs>(
      args?: Subset<T, InvalidAttributeErrorDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvalidAttributeErrorDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvalidAttributeErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidAttributeErrorDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvalidAttributeErrorDataAggregateArgs>(args: Subset<T, InvalidAttributeErrorDataAggregateArgs>): Prisma.PrismaPromise<GetInvalidAttributeErrorDataAggregateType<T>>

    /**
     * Group by InvalidAttributeErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidAttributeErrorDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvalidAttributeErrorDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvalidAttributeErrorDataGroupByArgs['orderBy'] }
        : { orderBy?: InvalidAttributeErrorDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvalidAttributeErrorDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvalidAttributeErrorDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InvalidAttributeErrorData model
   */
  readonly fields: InvalidAttributeErrorDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvalidAttributeErrorData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvalidAttributeErrorDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the InvalidAttributeErrorData model
   */ 
  interface InvalidAttributeErrorDataFieldRefs {
    readonly id: FieldRef<"InvalidAttributeErrorData", 'String'>
    readonly attribute: FieldRef<"InvalidAttributeErrorData", 'ElementAttribute'>
    readonly parentHtml: FieldRef<"InvalidAttributeErrorData", 'String'>
    readonly value: FieldRef<"InvalidAttributeErrorData", 'String'>
  }
    

  // Custom InputTypes

  /**
   * InvalidAttributeErrorData findUnique
   */
  export type InvalidAttributeErrorDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidAttributeErrorData
     */
    select?: InvalidAttributeErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which InvalidAttributeErrorData to fetch.
     */
    where: InvalidAttributeErrorDataWhereUniqueInput
  }


  /**
   * InvalidAttributeErrorData findUniqueOrThrow
   */
  export type InvalidAttributeErrorDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidAttributeErrorData
     */
    select?: InvalidAttributeErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which InvalidAttributeErrorData to fetch.
     */
    where: InvalidAttributeErrorDataWhereUniqueInput
  }


  /**
   * InvalidAttributeErrorData findFirst
   */
  export type InvalidAttributeErrorDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidAttributeErrorData
     */
    select?: InvalidAttributeErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which InvalidAttributeErrorData to fetch.
     */
    where?: InvalidAttributeErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvalidAttributeErrorData to fetch.
     */
    orderBy?: InvalidAttributeErrorDataOrderByWithRelationInput | InvalidAttributeErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvalidAttributeErrorData.
     */
    cursor?: InvalidAttributeErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvalidAttributeErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvalidAttributeErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvalidAttributeErrorData.
     */
    distinct?: InvalidAttributeErrorDataScalarFieldEnum | InvalidAttributeErrorDataScalarFieldEnum[]
  }


  /**
   * InvalidAttributeErrorData findFirstOrThrow
   */
  export type InvalidAttributeErrorDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidAttributeErrorData
     */
    select?: InvalidAttributeErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which InvalidAttributeErrorData to fetch.
     */
    where?: InvalidAttributeErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvalidAttributeErrorData to fetch.
     */
    orderBy?: InvalidAttributeErrorDataOrderByWithRelationInput | InvalidAttributeErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvalidAttributeErrorData.
     */
    cursor?: InvalidAttributeErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvalidAttributeErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvalidAttributeErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvalidAttributeErrorData.
     */
    distinct?: InvalidAttributeErrorDataScalarFieldEnum | InvalidAttributeErrorDataScalarFieldEnum[]
  }


  /**
   * InvalidAttributeErrorData findMany
   */
  export type InvalidAttributeErrorDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidAttributeErrorData
     */
    select?: InvalidAttributeErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which InvalidAttributeErrorData to fetch.
     */
    where?: InvalidAttributeErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvalidAttributeErrorData to fetch.
     */
    orderBy?: InvalidAttributeErrorDataOrderByWithRelationInput | InvalidAttributeErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvalidAttributeErrorData.
     */
    cursor?: InvalidAttributeErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvalidAttributeErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvalidAttributeErrorData.
     */
    skip?: number
    distinct?: InvalidAttributeErrorDataScalarFieldEnum | InvalidAttributeErrorDataScalarFieldEnum[]
  }


  /**
   * InvalidAttributeErrorData create
   */
  export type InvalidAttributeErrorDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidAttributeErrorData
     */
    select?: InvalidAttributeErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to create a InvalidAttributeErrorData.
     */
    data: XOR<InvalidAttributeErrorDataCreateInput, InvalidAttributeErrorDataUncheckedCreateInput>
  }


  /**
   * InvalidAttributeErrorData createMany
   */
  export type InvalidAttributeErrorDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InvalidAttributeErrorData.
     */
    data: InvalidAttributeErrorDataCreateManyInput | InvalidAttributeErrorDataCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * InvalidAttributeErrorData update
   */
  export type InvalidAttributeErrorDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidAttributeErrorData
     */
    select?: InvalidAttributeErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to update a InvalidAttributeErrorData.
     */
    data: XOR<InvalidAttributeErrorDataUpdateInput, InvalidAttributeErrorDataUncheckedUpdateInput>
    /**
     * Choose, which InvalidAttributeErrorData to update.
     */
    where: InvalidAttributeErrorDataWhereUniqueInput
  }


  /**
   * InvalidAttributeErrorData updateMany
   */
  export type InvalidAttributeErrorDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InvalidAttributeErrorData.
     */
    data: XOR<InvalidAttributeErrorDataUpdateManyMutationInput, InvalidAttributeErrorDataUncheckedUpdateManyInput>
    /**
     * Filter which InvalidAttributeErrorData to update
     */
    where?: InvalidAttributeErrorDataWhereInput
  }


  /**
   * InvalidAttributeErrorData upsert
   */
  export type InvalidAttributeErrorDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidAttributeErrorData
     */
    select?: InvalidAttributeErrorDataSelect<ExtArgs> | null
    /**
     * The filter to search for the InvalidAttributeErrorData to update in case it exists.
     */
    where: InvalidAttributeErrorDataWhereUniqueInput
    /**
     * In case the InvalidAttributeErrorData found by the `where` argument doesn't exist, create a new InvalidAttributeErrorData with this data.
     */
    create: XOR<InvalidAttributeErrorDataCreateInput, InvalidAttributeErrorDataUncheckedCreateInput>
    /**
     * In case the InvalidAttributeErrorData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvalidAttributeErrorDataUpdateInput, InvalidAttributeErrorDataUncheckedUpdateInput>
  }


  /**
   * InvalidAttributeErrorData delete
   */
  export type InvalidAttributeErrorDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidAttributeErrorData
     */
    select?: InvalidAttributeErrorDataSelect<ExtArgs> | null
    /**
     * Filter which InvalidAttributeErrorData to delete.
     */
    where: InvalidAttributeErrorDataWhereUniqueInput
  }


  /**
   * InvalidAttributeErrorData deleteMany
   */
  export type InvalidAttributeErrorDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvalidAttributeErrorData to delete
     */
    where?: InvalidAttributeErrorDataWhereInput
  }


  /**
   * InvalidAttributeErrorData without action
   */
  export type InvalidAttributeErrorDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidAttributeErrorData
     */
    select?: InvalidAttributeErrorDataSelect<ExtArgs> | null
  }



  /**
   * Model InvalidTextErrorData
   */

  export type AggregateInvalidTextErrorData = {
    _count: InvalidTextErrorDataCountAggregateOutputType | null
    _min: InvalidTextErrorDataMinAggregateOutputType | null
    _max: InvalidTextErrorDataMaxAggregateOutputType | null
  }

  export type InvalidTextErrorDataMinAggregateOutputType = {
    id: string | null
    parentHtml: string | null
    value: string | null
  }

  export type InvalidTextErrorDataMaxAggregateOutputType = {
    id: string | null
    parentHtml: string | null
    value: string | null
  }

  export type InvalidTextErrorDataCountAggregateOutputType = {
    id: number
    parentHtml: number
    value: number
    _all: number
  }


  export type InvalidTextErrorDataMinAggregateInputType = {
    id?: true
    parentHtml?: true
    value?: true
  }

  export type InvalidTextErrorDataMaxAggregateInputType = {
    id?: true
    parentHtml?: true
    value?: true
  }

  export type InvalidTextErrorDataCountAggregateInputType = {
    id?: true
    parentHtml?: true
    value?: true
    _all?: true
  }

  export type InvalidTextErrorDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvalidTextErrorData to aggregate.
     */
    where?: InvalidTextErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvalidTextErrorData to fetch.
     */
    orderBy?: InvalidTextErrorDataOrderByWithRelationInput | InvalidTextErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvalidTextErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvalidTextErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvalidTextErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvalidTextErrorData
    **/
    _count?: true | InvalidTextErrorDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvalidTextErrorDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvalidTextErrorDataMaxAggregateInputType
  }

  export type GetInvalidTextErrorDataAggregateType<T extends InvalidTextErrorDataAggregateArgs> = {
        [P in keyof T & keyof AggregateInvalidTextErrorData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvalidTextErrorData[P]>
      : GetScalarType<T[P], AggregateInvalidTextErrorData[P]>
  }




  export type InvalidTextErrorDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvalidTextErrorDataWhereInput
    orderBy?: InvalidTextErrorDataOrderByWithAggregationInput | InvalidTextErrorDataOrderByWithAggregationInput[]
    by: InvalidTextErrorDataScalarFieldEnum[] | InvalidTextErrorDataScalarFieldEnum
    having?: InvalidTextErrorDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvalidTextErrorDataCountAggregateInputType | true
    _min?: InvalidTextErrorDataMinAggregateInputType
    _max?: InvalidTextErrorDataMaxAggregateInputType
  }

  export type InvalidTextErrorDataGroupByOutputType = {
    id: string
    parentHtml: string | null
    value: string
    _count: InvalidTextErrorDataCountAggregateOutputType | null
    _min: InvalidTextErrorDataMinAggregateOutputType | null
    _max: InvalidTextErrorDataMaxAggregateOutputType | null
  }

  type GetInvalidTextErrorDataGroupByPayload<T extends InvalidTextErrorDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvalidTextErrorDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvalidTextErrorDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvalidTextErrorDataGroupByOutputType[P]>
            : GetScalarType<T[P], InvalidTextErrorDataGroupByOutputType[P]>
        }
      >
    >


  export type InvalidTextErrorDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parentHtml?: boolean
    value?: boolean
  }, ExtArgs["result"]["invalidTextErrorData"]>

  export type InvalidTextErrorDataSelectScalar = {
    id?: boolean
    parentHtml?: boolean
    value?: boolean
  }


  export type $InvalidTextErrorDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InvalidTextErrorData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      parentHtml: string | null
      value: string
    }, ExtArgs["result"]["invalidTextErrorData"]>
    composites: {}
  }


  type InvalidTextErrorDataGetPayload<S extends boolean | null | undefined | InvalidTextErrorDataDefaultArgs> = $Result.GetResult<Prisma.$InvalidTextErrorDataPayload, S>

  type InvalidTextErrorDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InvalidTextErrorDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InvalidTextErrorDataCountAggregateInputType | true
    }

  export interface InvalidTextErrorDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InvalidTextErrorData'], meta: { name: 'InvalidTextErrorData' } }
    /**
     * Find zero or one InvalidTextErrorData that matches the filter.
     * @param {InvalidTextErrorDataFindUniqueArgs} args - Arguments to find a InvalidTextErrorData
     * @example
     * // Get one InvalidTextErrorData
     * const invalidTextErrorData = await prisma.invalidTextErrorData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvalidTextErrorDataFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidTextErrorDataFindUniqueArgs<ExtArgs>>
    ): Prisma__InvalidTextErrorDataClient<$Result.GetResult<Prisma.$InvalidTextErrorDataPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one InvalidTextErrorData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InvalidTextErrorDataFindUniqueOrThrowArgs} args - Arguments to find a InvalidTextErrorData
     * @example
     * // Get one InvalidTextErrorData
     * const invalidTextErrorData = await prisma.invalidTextErrorData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InvalidTextErrorDataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidTextErrorDataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InvalidTextErrorDataClient<$Result.GetResult<Prisma.$InvalidTextErrorDataPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first InvalidTextErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidTextErrorDataFindFirstArgs} args - Arguments to find a InvalidTextErrorData
     * @example
     * // Get one InvalidTextErrorData
     * const invalidTextErrorData = await prisma.invalidTextErrorData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvalidTextErrorDataFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidTextErrorDataFindFirstArgs<ExtArgs>>
    ): Prisma__InvalidTextErrorDataClient<$Result.GetResult<Prisma.$InvalidTextErrorDataPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first InvalidTextErrorData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidTextErrorDataFindFirstOrThrowArgs} args - Arguments to find a InvalidTextErrorData
     * @example
     * // Get one InvalidTextErrorData
     * const invalidTextErrorData = await prisma.invalidTextErrorData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InvalidTextErrorDataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidTextErrorDataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InvalidTextErrorDataClient<$Result.GetResult<Prisma.$InvalidTextErrorDataPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more InvalidTextErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidTextErrorDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvalidTextErrorData
     * const invalidTextErrorData = await prisma.invalidTextErrorData.findMany()
     * 
     * // Get first 10 InvalidTextErrorData
     * const invalidTextErrorData = await prisma.invalidTextErrorData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invalidTextErrorDataWithIdOnly = await prisma.invalidTextErrorData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvalidTextErrorDataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidTextErrorDataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvalidTextErrorDataPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a InvalidTextErrorData.
     * @param {InvalidTextErrorDataCreateArgs} args - Arguments to create a InvalidTextErrorData.
     * @example
     * // Create one InvalidTextErrorData
     * const InvalidTextErrorData = await prisma.invalidTextErrorData.create({
     *   data: {
     *     // ... data to create a InvalidTextErrorData
     *   }
     * })
     * 
    **/
    create<T extends InvalidTextErrorDataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidTextErrorDataCreateArgs<ExtArgs>>
    ): Prisma__InvalidTextErrorDataClient<$Result.GetResult<Prisma.$InvalidTextErrorDataPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many InvalidTextErrorData.
     *     @param {InvalidTextErrorDataCreateManyArgs} args - Arguments to create many InvalidTextErrorData.
     *     @example
     *     // Create many InvalidTextErrorData
     *     const invalidTextErrorData = await prisma.invalidTextErrorData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvalidTextErrorDataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidTextErrorDataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InvalidTextErrorData.
     * @param {InvalidTextErrorDataDeleteArgs} args - Arguments to delete one InvalidTextErrorData.
     * @example
     * // Delete one InvalidTextErrorData
     * const InvalidTextErrorData = await prisma.invalidTextErrorData.delete({
     *   where: {
     *     // ... filter to delete one InvalidTextErrorData
     *   }
     * })
     * 
    **/
    delete<T extends InvalidTextErrorDataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidTextErrorDataDeleteArgs<ExtArgs>>
    ): Prisma__InvalidTextErrorDataClient<$Result.GetResult<Prisma.$InvalidTextErrorDataPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one InvalidTextErrorData.
     * @param {InvalidTextErrorDataUpdateArgs} args - Arguments to update one InvalidTextErrorData.
     * @example
     * // Update one InvalidTextErrorData
     * const invalidTextErrorData = await prisma.invalidTextErrorData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvalidTextErrorDataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidTextErrorDataUpdateArgs<ExtArgs>>
    ): Prisma__InvalidTextErrorDataClient<$Result.GetResult<Prisma.$InvalidTextErrorDataPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more InvalidTextErrorData.
     * @param {InvalidTextErrorDataDeleteManyArgs} args - Arguments to filter InvalidTextErrorData to delete.
     * @example
     * // Delete a few InvalidTextErrorData
     * const { count } = await prisma.invalidTextErrorData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvalidTextErrorDataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvalidTextErrorDataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvalidTextErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidTextErrorDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvalidTextErrorData
     * const invalidTextErrorData = await prisma.invalidTextErrorData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvalidTextErrorDataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidTextErrorDataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InvalidTextErrorData.
     * @param {InvalidTextErrorDataUpsertArgs} args - Arguments to update or create a InvalidTextErrorData.
     * @example
     * // Update or create a InvalidTextErrorData
     * const invalidTextErrorData = await prisma.invalidTextErrorData.upsert({
     *   create: {
     *     // ... data to create a InvalidTextErrorData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvalidTextErrorData we want to update
     *   }
     * })
    **/
    upsert<T extends InvalidTextErrorDataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InvalidTextErrorDataUpsertArgs<ExtArgs>>
    ): Prisma__InvalidTextErrorDataClient<$Result.GetResult<Prisma.$InvalidTextErrorDataPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of InvalidTextErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidTextErrorDataCountArgs} args - Arguments to filter InvalidTextErrorData to count.
     * @example
     * // Count the number of InvalidTextErrorData
     * const count = await prisma.invalidTextErrorData.count({
     *   where: {
     *     // ... the filter for the InvalidTextErrorData we want to count
     *   }
     * })
    **/
    count<T extends InvalidTextErrorDataCountArgs>(
      args?: Subset<T, InvalidTextErrorDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvalidTextErrorDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvalidTextErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidTextErrorDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvalidTextErrorDataAggregateArgs>(args: Subset<T, InvalidTextErrorDataAggregateArgs>): Prisma.PrismaPromise<GetInvalidTextErrorDataAggregateType<T>>

    /**
     * Group by InvalidTextErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvalidTextErrorDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvalidTextErrorDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvalidTextErrorDataGroupByArgs['orderBy'] }
        : { orderBy?: InvalidTextErrorDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvalidTextErrorDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvalidTextErrorDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InvalidTextErrorData model
   */
  readonly fields: InvalidTextErrorDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvalidTextErrorData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvalidTextErrorDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the InvalidTextErrorData model
   */ 
  interface InvalidTextErrorDataFieldRefs {
    readonly id: FieldRef<"InvalidTextErrorData", 'String'>
    readonly parentHtml: FieldRef<"InvalidTextErrorData", 'String'>
    readonly value: FieldRef<"InvalidTextErrorData", 'String'>
  }
    

  // Custom InputTypes

  /**
   * InvalidTextErrorData findUnique
   */
  export type InvalidTextErrorDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTextErrorData
     */
    select?: InvalidTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which InvalidTextErrorData to fetch.
     */
    where: InvalidTextErrorDataWhereUniqueInput
  }


  /**
   * InvalidTextErrorData findUniqueOrThrow
   */
  export type InvalidTextErrorDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTextErrorData
     */
    select?: InvalidTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which InvalidTextErrorData to fetch.
     */
    where: InvalidTextErrorDataWhereUniqueInput
  }


  /**
   * InvalidTextErrorData findFirst
   */
  export type InvalidTextErrorDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTextErrorData
     */
    select?: InvalidTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which InvalidTextErrorData to fetch.
     */
    where?: InvalidTextErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvalidTextErrorData to fetch.
     */
    orderBy?: InvalidTextErrorDataOrderByWithRelationInput | InvalidTextErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvalidTextErrorData.
     */
    cursor?: InvalidTextErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvalidTextErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvalidTextErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvalidTextErrorData.
     */
    distinct?: InvalidTextErrorDataScalarFieldEnum | InvalidTextErrorDataScalarFieldEnum[]
  }


  /**
   * InvalidTextErrorData findFirstOrThrow
   */
  export type InvalidTextErrorDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTextErrorData
     */
    select?: InvalidTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which InvalidTextErrorData to fetch.
     */
    where?: InvalidTextErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvalidTextErrorData to fetch.
     */
    orderBy?: InvalidTextErrorDataOrderByWithRelationInput | InvalidTextErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvalidTextErrorData.
     */
    cursor?: InvalidTextErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvalidTextErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvalidTextErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvalidTextErrorData.
     */
    distinct?: InvalidTextErrorDataScalarFieldEnum | InvalidTextErrorDataScalarFieldEnum[]
  }


  /**
   * InvalidTextErrorData findMany
   */
  export type InvalidTextErrorDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTextErrorData
     */
    select?: InvalidTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which InvalidTextErrorData to fetch.
     */
    where?: InvalidTextErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvalidTextErrorData to fetch.
     */
    orderBy?: InvalidTextErrorDataOrderByWithRelationInput | InvalidTextErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvalidTextErrorData.
     */
    cursor?: InvalidTextErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvalidTextErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvalidTextErrorData.
     */
    skip?: number
    distinct?: InvalidTextErrorDataScalarFieldEnum | InvalidTextErrorDataScalarFieldEnum[]
  }


  /**
   * InvalidTextErrorData create
   */
  export type InvalidTextErrorDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTextErrorData
     */
    select?: InvalidTextErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to create a InvalidTextErrorData.
     */
    data: XOR<InvalidTextErrorDataCreateInput, InvalidTextErrorDataUncheckedCreateInput>
  }


  /**
   * InvalidTextErrorData createMany
   */
  export type InvalidTextErrorDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InvalidTextErrorData.
     */
    data: InvalidTextErrorDataCreateManyInput | InvalidTextErrorDataCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * InvalidTextErrorData update
   */
  export type InvalidTextErrorDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTextErrorData
     */
    select?: InvalidTextErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to update a InvalidTextErrorData.
     */
    data: XOR<InvalidTextErrorDataUpdateInput, InvalidTextErrorDataUncheckedUpdateInput>
    /**
     * Choose, which InvalidTextErrorData to update.
     */
    where: InvalidTextErrorDataWhereUniqueInput
  }


  /**
   * InvalidTextErrorData updateMany
   */
  export type InvalidTextErrorDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InvalidTextErrorData.
     */
    data: XOR<InvalidTextErrorDataUpdateManyMutationInput, InvalidTextErrorDataUncheckedUpdateManyInput>
    /**
     * Filter which InvalidTextErrorData to update
     */
    where?: InvalidTextErrorDataWhereInput
  }


  /**
   * InvalidTextErrorData upsert
   */
  export type InvalidTextErrorDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTextErrorData
     */
    select?: InvalidTextErrorDataSelect<ExtArgs> | null
    /**
     * The filter to search for the InvalidTextErrorData to update in case it exists.
     */
    where: InvalidTextErrorDataWhereUniqueInput
    /**
     * In case the InvalidTextErrorData found by the `where` argument doesn't exist, create a new InvalidTextErrorData with this data.
     */
    create: XOR<InvalidTextErrorDataCreateInput, InvalidTextErrorDataUncheckedCreateInput>
    /**
     * In case the InvalidTextErrorData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvalidTextErrorDataUpdateInput, InvalidTextErrorDataUncheckedUpdateInput>
  }


  /**
   * InvalidTextErrorData delete
   */
  export type InvalidTextErrorDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTextErrorData
     */
    select?: InvalidTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter which InvalidTextErrorData to delete.
     */
    where: InvalidTextErrorDataWhereUniqueInput
  }


  /**
   * InvalidTextErrorData deleteMany
   */
  export type InvalidTextErrorDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvalidTextErrorData to delete
     */
    where?: InvalidTextErrorDataWhereInput
  }


  /**
   * InvalidTextErrorData without action
   */
  export type InvalidTextErrorDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvalidTextErrorData
     */
    select?: InvalidTextErrorDataSelect<ExtArgs> | null
  }



  /**
   * Model MissingTextErrorData
   */

  export type AggregateMissingTextErrorData = {
    _count: MissingTextErrorDataCountAggregateOutputType | null
    _min: MissingTextErrorDataMinAggregateOutputType | null
    _max: MissingTextErrorDataMaxAggregateOutputType | null
  }

  export type MissingTextErrorDataMinAggregateOutputType = {
    id: string | null
    parentHtml: string | null
  }

  export type MissingTextErrorDataMaxAggregateOutputType = {
    id: string | null
    parentHtml: string | null
  }

  export type MissingTextErrorDataCountAggregateOutputType = {
    id: number
    parentHtml: number
    _all: number
  }


  export type MissingTextErrorDataMinAggregateInputType = {
    id?: true
    parentHtml?: true
  }

  export type MissingTextErrorDataMaxAggregateInputType = {
    id?: true
    parentHtml?: true
  }

  export type MissingTextErrorDataCountAggregateInputType = {
    id?: true
    parentHtml?: true
    _all?: true
  }

  export type MissingTextErrorDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MissingTextErrorData to aggregate.
     */
    where?: MissingTextErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MissingTextErrorData to fetch.
     */
    orderBy?: MissingTextErrorDataOrderByWithRelationInput | MissingTextErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MissingTextErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MissingTextErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MissingTextErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MissingTextErrorData
    **/
    _count?: true | MissingTextErrorDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MissingTextErrorDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MissingTextErrorDataMaxAggregateInputType
  }

  export type GetMissingTextErrorDataAggregateType<T extends MissingTextErrorDataAggregateArgs> = {
        [P in keyof T & keyof AggregateMissingTextErrorData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMissingTextErrorData[P]>
      : GetScalarType<T[P], AggregateMissingTextErrorData[P]>
  }




  export type MissingTextErrorDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MissingTextErrorDataWhereInput
    orderBy?: MissingTextErrorDataOrderByWithAggregationInput | MissingTextErrorDataOrderByWithAggregationInput[]
    by: MissingTextErrorDataScalarFieldEnum[] | MissingTextErrorDataScalarFieldEnum
    having?: MissingTextErrorDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MissingTextErrorDataCountAggregateInputType | true
    _min?: MissingTextErrorDataMinAggregateInputType
    _max?: MissingTextErrorDataMaxAggregateInputType
  }

  export type MissingTextErrorDataGroupByOutputType = {
    id: string
    parentHtml: string | null
    _count: MissingTextErrorDataCountAggregateOutputType | null
    _min: MissingTextErrorDataMinAggregateOutputType | null
    _max: MissingTextErrorDataMaxAggregateOutputType | null
  }

  type GetMissingTextErrorDataGroupByPayload<T extends MissingTextErrorDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MissingTextErrorDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MissingTextErrorDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MissingTextErrorDataGroupByOutputType[P]>
            : GetScalarType<T[P], MissingTextErrorDataGroupByOutputType[P]>
        }
      >
    >


  export type MissingTextErrorDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parentHtml?: boolean
  }, ExtArgs["result"]["missingTextErrorData"]>

  export type MissingTextErrorDataSelectScalar = {
    id?: boolean
    parentHtml?: boolean
  }


  export type $MissingTextErrorDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MissingTextErrorData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      parentHtml: string | null
    }, ExtArgs["result"]["missingTextErrorData"]>
    composites: {}
  }


  type MissingTextErrorDataGetPayload<S extends boolean | null | undefined | MissingTextErrorDataDefaultArgs> = $Result.GetResult<Prisma.$MissingTextErrorDataPayload, S>

  type MissingTextErrorDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MissingTextErrorDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MissingTextErrorDataCountAggregateInputType | true
    }

  export interface MissingTextErrorDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MissingTextErrorData'], meta: { name: 'MissingTextErrorData' } }
    /**
     * Find zero or one MissingTextErrorData that matches the filter.
     * @param {MissingTextErrorDataFindUniqueArgs} args - Arguments to find a MissingTextErrorData
     * @example
     * // Get one MissingTextErrorData
     * const missingTextErrorData = await prisma.missingTextErrorData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MissingTextErrorDataFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MissingTextErrorDataFindUniqueArgs<ExtArgs>>
    ): Prisma__MissingTextErrorDataClient<$Result.GetResult<Prisma.$MissingTextErrorDataPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MissingTextErrorData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MissingTextErrorDataFindUniqueOrThrowArgs} args - Arguments to find a MissingTextErrorData
     * @example
     * // Get one MissingTextErrorData
     * const missingTextErrorData = await prisma.missingTextErrorData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MissingTextErrorDataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingTextErrorDataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MissingTextErrorDataClient<$Result.GetResult<Prisma.$MissingTextErrorDataPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MissingTextErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingTextErrorDataFindFirstArgs} args - Arguments to find a MissingTextErrorData
     * @example
     * // Get one MissingTextErrorData
     * const missingTextErrorData = await prisma.missingTextErrorData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MissingTextErrorDataFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingTextErrorDataFindFirstArgs<ExtArgs>>
    ): Prisma__MissingTextErrorDataClient<$Result.GetResult<Prisma.$MissingTextErrorDataPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MissingTextErrorData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingTextErrorDataFindFirstOrThrowArgs} args - Arguments to find a MissingTextErrorData
     * @example
     * // Get one MissingTextErrorData
     * const missingTextErrorData = await prisma.missingTextErrorData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MissingTextErrorDataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingTextErrorDataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MissingTextErrorDataClient<$Result.GetResult<Prisma.$MissingTextErrorDataPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MissingTextErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingTextErrorDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MissingTextErrorData
     * const missingTextErrorData = await prisma.missingTextErrorData.findMany()
     * 
     * // Get first 10 MissingTextErrorData
     * const missingTextErrorData = await prisma.missingTextErrorData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const missingTextErrorDataWithIdOnly = await prisma.missingTextErrorData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MissingTextErrorDataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingTextErrorDataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MissingTextErrorDataPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MissingTextErrorData.
     * @param {MissingTextErrorDataCreateArgs} args - Arguments to create a MissingTextErrorData.
     * @example
     * // Create one MissingTextErrorData
     * const MissingTextErrorData = await prisma.missingTextErrorData.create({
     *   data: {
     *     // ... data to create a MissingTextErrorData
     *   }
     * })
     * 
    **/
    create<T extends MissingTextErrorDataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MissingTextErrorDataCreateArgs<ExtArgs>>
    ): Prisma__MissingTextErrorDataClient<$Result.GetResult<Prisma.$MissingTextErrorDataPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MissingTextErrorData.
     *     @param {MissingTextErrorDataCreateManyArgs} args - Arguments to create many MissingTextErrorData.
     *     @example
     *     // Create many MissingTextErrorData
     *     const missingTextErrorData = await prisma.missingTextErrorData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MissingTextErrorDataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingTextErrorDataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MissingTextErrorData.
     * @param {MissingTextErrorDataDeleteArgs} args - Arguments to delete one MissingTextErrorData.
     * @example
     * // Delete one MissingTextErrorData
     * const MissingTextErrorData = await prisma.missingTextErrorData.delete({
     *   where: {
     *     // ... filter to delete one MissingTextErrorData
     *   }
     * })
     * 
    **/
    delete<T extends MissingTextErrorDataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MissingTextErrorDataDeleteArgs<ExtArgs>>
    ): Prisma__MissingTextErrorDataClient<$Result.GetResult<Prisma.$MissingTextErrorDataPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MissingTextErrorData.
     * @param {MissingTextErrorDataUpdateArgs} args - Arguments to update one MissingTextErrorData.
     * @example
     * // Update one MissingTextErrorData
     * const missingTextErrorData = await prisma.missingTextErrorData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MissingTextErrorDataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MissingTextErrorDataUpdateArgs<ExtArgs>>
    ): Prisma__MissingTextErrorDataClient<$Result.GetResult<Prisma.$MissingTextErrorDataPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MissingTextErrorData.
     * @param {MissingTextErrorDataDeleteManyArgs} args - Arguments to filter MissingTextErrorData to delete.
     * @example
     * // Delete a few MissingTextErrorData
     * const { count } = await prisma.missingTextErrorData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MissingTextErrorDataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingTextErrorDataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MissingTextErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingTextErrorDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MissingTextErrorData
     * const missingTextErrorData = await prisma.missingTextErrorData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MissingTextErrorDataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MissingTextErrorDataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MissingTextErrorData.
     * @param {MissingTextErrorDataUpsertArgs} args - Arguments to update or create a MissingTextErrorData.
     * @example
     * // Update or create a MissingTextErrorData
     * const missingTextErrorData = await prisma.missingTextErrorData.upsert({
     *   create: {
     *     // ... data to create a MissingTextErrorData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MissingTextErrorData we want to update
     *   }
     * })
    **/
    upsert<T extends MissingTextErrorDataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MissingTextErrorDataUpsertArgs<ExtArgs>>
    ): Prisma__MissingTextErrorDataClient<$Result.GetResult<Prisma.$MissingTextErrorDataPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MissingTextErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingTextErrorDataCountArgs} args - Arguments to filter MissingTextErrorData to count.
     * @example
     * // Count the number of MissingTextErrorData
     * const count = await prisma.missingTextErrorData.count({
     *   where: {
     *     // ... the filter for the MissingTextErrorData we want to count
     *   }
     * })
    **/
    count<T extends MissingTextErrorDataCountArgs>(
      args?: Subset<T, MissingTextErrorDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MissingTextErrorDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MissingTextErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingTextErrorDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MissingTextErrorDataAggregateArgs>(args: Subset<T, MissingTextErrorDataAggregateArgs>): Prisma.PrismaPromise<GetMissingTextErrorDataAggregateType<T>>

    /**
     * Group by MissingTextErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingTextErrorDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MissingTextErrorDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MissingTextErrorDataGroupByArgs['orderBy'] }
        : { orderBy?: MissingTextErrorDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MissingTextErrorDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMissingTextErrorDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MissingTextErrorData model
   */
  readonly fields: MissingTextErrorDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MissingTextErrorData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MissingTextErrorDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MissingTextErrorData model
   */ 
  interface MissingTextErrorDataFieldRefs {
    readonly id: FieldRef<"MissingTextErrorData", 'String'>
    readonly parentHtml: FieldRef<"MissingTextErrorData", 'String'>
  }
    

  // Custom InputTypes

  /**
   * MissingTextErrorData findUnique
   */
  export type MissingTextErrorDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingTextErrorData
     */
    select?: MissingTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which MissingTextErrorData to fetch.
     */
    where: MissingTextErrorDataWhereUniqueInput
  }


  /**
   * MissingTextErrorData findUniqueOrThrow
   */
  export type MissingTextErrorDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingTextErrorData
     */
    select?: MissingTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which MissingTextErrorData to fetch.
     */
    where: MissingTextErrorDataWhereUniqueInput
  }


  /**
   * MissingTextErrorData findFirst
   */
  export type MissingTextErrorDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingTextErrorData
     */
    select?: MissingTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which MissingTextErrorData to fetch.
     */
    where?: MissingTextErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MissingTextErrorData to fetch.
     */
    orderBy?: MissingTextErrorDataOrderByWithRelationInput | MissingTextErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MissingTextErrorData.
     */
    cursor?: MissingTextErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MissingTextErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MissingTextErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MissingTextErrorData.
     */
    distinct?: MissingTextErrorDataScalarFieldEnum | MissingTextErrorDataScalarFieldEnum[]
  }


  /**
   * MissingTextErrorData findFirstOrThrow
   */
  export type MissingTextErrorDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingTextErrorData
     */
    select?: MissingTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which MissingTextErrorData to fetch.
     */
    where?: MissingTextErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MissingTextErrorData to fetch.
     */
    orderBy?: MissingTextErrorDataOrderByWithRelationInput | MissingTextErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MissingTextErrorData.
     */
    cursor?: MissingTextErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MissingTextErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MissingTextErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MissingTextErrorData.
     */
    distinct?: MissingTextErrorDataScalarFieldEnum | MissingTextErrorDataScalarFieldEnum[]
  }


  /**
   * MissingTextErrorData findMany
   */
  export type MissingTextErrorDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingTextErrorData
     */
    select?: MissingTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which MissingTextErrorData to fetch.
     */
    where?: MissingTextErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MissingTextErrorData to fetch.
     */
    orderBy?: MissingTextErrorDataOrderByWithRelationInput | MissingTextErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MissingTextErrorData.
     */
    cursor?: MissingTextErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MissingTextErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MissingTextErrorData.
     */
    skip?: number
    distinct?: MissingTextErrorDataScalarFieldEnum | MissingTextErrorDataScalarFieldEnum[]
  }


  /**
   * MissingTextErrorData create
   */
  export type MissingTextErrorDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingTextErrorData
     */
    select?: MissingTextErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to create a MissingTextErrorData.
     */
    data?: XOR<MissingTextErrorDataCreateInput, MissingTextErrorDataUncheckedCreateInput>
  }


  /**
   * MissingTextErrorData createMany
   */
  export type MissingTextErrorDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MissingTextErrorData.
     */
    data: MissingTextErrorDataCreateManyInput | MissingTextErrorDataCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * MissingTextErrorData update
   */
  export type MissingTextErrorDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingTextErrorData
     */
    select?: MissingTextErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to update a MissingTextErrorData.
     */
    data: XOR<MissingTextErrorDataUpdateInput, MissingTextErrorDataUncheckedUpdateInput>
    /**
     * Choose, which MissingTextErrorData to update.
     */
    where: MissingTextErrorDataWhereUniqueInput
  }


  /**
   * MissingTextErrorData updateMany
   */
  export type MissingTextErrorDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MissingTextErrorData.
     */
    data: XOR<MissingTextErrorDataUpdateManyMutationInput, MissingTextErrorDataUncheckedUpdateManyInput>
    /**
     * Filter which MissingTextErrorData to update
     */
    where?: MissingTextErrorDataWhereInput
  }


  /**
   * MissingTextErrorData upsert
   */
  export type MissingTextErrorDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingTextErrorData
     */
    select?: MissingTextErrorDataSelect<ExtArgs> | null
    /**
     * The filter to search for the MissingTextErrorData to update in case it exists.
     */
    where: MissingTextErrorDataWhereUniqueInput
    /**
     * In case the MissingTextErrorData found by the `where` argument doesn't exist, create a new MissingTextErrorData with this data.
     */
    create: XOR<MissingTextErrorDataCreateInput, MissingTextErrorDataUncheckedCreateInput>
    /**
     * In case the MissingTextErrorData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MissingTextErrorDataUpdateInput, MissingTextErrorDataUncheckedUpdateInput>
  }


  /**
   * MissingTextErrorData delete
   */
  export type MissingTextErrorDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingTextErrorData
     */
    select?: MissingTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter which MissingTextErrorData to delete.
     */
    where: MissingTextErrorDataWhereUniqueInput
  }


  /**
   * MissingTextErrorData deleteMany
   */
  export type MissingTextErrorDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MissingTextErrorData to delete
     */
    where?: MissingTextErrorDataWhereInput
  }


  /**
   * MissingTextErrorData without action
   */
  export type MissingTextErrorDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingTextErrorData
     */
    select?: MissingTextErrorDataSelect<ExtArgs> | null
  }



  /**
   * Model NonUniqueTextErrorData
   */

  export type AggregateNonUniqueTextErrorData = {
    _count: NonUniqueTextErrorDataCountAggregateOutputType | null
    _min: NonUniqueTextErrorDataMinAggregateOutputType | null
    _max: NonUniqueTextErrorDataMaxAggregateOutputType | null
  }

  export type NonUniqueTextErrorDataMinAggregateOutputType = {
    id: string | null
    parentHtml: string | null
  }

  export type NonUniqueTextErrorDataMaxAggregateOutputType = {
    id: string | null
    parentHtml: string | null
  }

  export type NonUniqueTextErrorDataCountAggregateOutputType = {
    id: number
    parentHtml: number
    _all: number
  }


  export type NonUniqueTextErrorDataMinAggregateInputType = {
    id?: true
    parentHtml?: true
  }

  export type NonUniqueTextErrorDataMaxAggregateInputType = {
    id?: true
    parentHtml?: true
  }

  export type NonUniqueTextErrorDataCountAggregateInputType = {
    id?: true
    parentHtml?: true
    _all?: true
  }

  export type NonUniqueTextErrorDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NonUniqueTextErrorData to aggregate.
     */
    where?: NonUniqueTextErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NonUniqueTextErrorData to fetch.
     */
    orderBy?: NonUniqueTextErrorDataOrderByWithRelationInput | NonUniqueTextErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NonUniqueTextErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NonUniqueTextErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NonUniqueTextErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NonUniqueTextErrorData
    **/
    _count?: true | NonUniqueTextErrorDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NonUniqueTextErrorDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NonUniqueTextErrorDataMaxAggregateInputType
  }

  export type GetNonUniqueTextErrorDataAggregateType<T extends NonUniqueTextErrorDataAggregateArgs> = {
        [P in keyof T & keyof AggregateNonUniqueTextErrorData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNonUniqueTextErrorData[P]>
      : GetScalarType<T[P], AggregateNonUniqueTextErrorData[P]>
  }




  export type NonUniqueTextErrorDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NonUniqueTextErrorDataWhereInput
    orderBy?: NonUniqueTextErrorDataOrderByWithAggregationInput | NonUniqueTextErrorDataOrderByWithAggregationInput[]
    by: NonUniqueTextErrorDataScalarFieldEnum[] | NonUniqueTextErrorDataScalarFieldEnum
    having?: NonUniqueTextErrorDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NonUniqueTextErrorDataCountAggregateInputType | true
    _min?: NonUniqueTextErrorDataMinAggregateInputType
    _max?: NonUniqueTextErrorDataMaxAggregateInputType
  }

  export type NonUniqueTextErrorDataGroupByOutputType = {
    id: string
    parentHtml: string | null
    _count: NonUniqueTextErrorDataCountAggregateOutputType | null
    _min: NonUniqueTextErrorDataMinAggregateOutputType | null
    _max: NonUniqueTextErrorDataMaxAggregateOutputType | null
  }

  type GetNonUniqueTextErrorDataGroupByPayload<T extends NonUniqueTextErrorDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NonUniqueTextErrorDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NonUniqueTextErrorDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NonUniqueTextErrorDataGroupByOutputType[P]>
            : GetScalarType<T[P], NonUniqueTextErrorDataGroupByOutputType[P]>
        }
      >
    >


  export type NonUniqueTextErrorDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parentHtml?: boolean
  }, ExtArgs["result"]["nonUniqueTextErrorData"]>

  export type NonUniqueTextErrorDataSelectScalar = {
    id?: boolean
    parentHtml?: boolean
  }


  export type $NonUniqueTextErrorDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NonUniqueTextErrorData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      parentHtml: string | null
    }, ExtArgs["result"]["nonUniqueTextErrorData"]>
    composites: {}
  }


  type NonUniqueTextErrorDataGetPayload<S extends boolean | null | undefined | NonUniqueTextErrorDataDefaultArgs> = $Result.GetResult<Prisma.$NonUniqueTextErrorDataPayload, S>

  type NonUniqueTextErrorDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NonUniqueTextErrorDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NonUniqueTextErrorDataCountAggregateInputType | true
    }

  export interface NonUniqueTextErrorDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NonUniqueTextErrorData'], meta: { name: 'NonUniqueTextErrorData' } }
    /**
     * Find zero or one NonUniqueTextErrorData that matches the filter.
     * @param {NonUniqueTextErrorDataFindUniqueArgs} args - Arguments to find a NonUniqueTextErrorData
     * @example
     * // Get one NonUniqueTextErrorData
     * const nonUniqueTextErrorData = await prisma.nonUniqueTextErrorData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NonUniqueTextErrorDataFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NonUniqueTextErrorDataFindUniqueArgs<ExtArgs>>
    ): Prisma__NonUniqueTextErrorDataClient<$Result.GetResult<Prisma.$NonUniqueTextErrorDataPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one NonUniqueTextErrorData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NonUniqueTextErrorDataFindUniqueOrThrowArgs} args - Arguments to find a NonUniqueTextErrorData
     * @example
     * // Get one NonUniqueTextErrorData
     * const nonUniqueTextErrorData = await prisma.nonUniqueTextErrorData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NonUniqueTextErrorDataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NonUniqueTextErrorDataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NonUniqueTextErrorDataClient<$Result.GetResult<Prisma.$NonUniqueTextErrorDataPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first NonUniqueTextErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NonUniqueTextErrorDataFindFirstArgs} args - Arguments to find a NonUniqueTextErrorData
     * @example
     * // Get one NonUniqueTextErrorData
     * const nonUniqueTextErrorData = await prisma.nonUniqueTextErrorData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NonUniqueTextErrorDataFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NonUniqueTextErrorDataFindFirstArgs<ExtArgs>>
    ): Prisma__NonUniqueTextErrorDataClient<$Result.GetResult<Prisma.$NonUniqueTextErrorDataPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first NonUniqueTextErrorData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NonUniqueTextErrorDataFindFirstOrThrowArgs} args - Arguments to find a NonUniqueTextErrorData
     * @example
     * // Get one NonUniqueTextErrorData
     * const nonUniqueTextErrorData = await prisma.nonUniqueTextErrorData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NonUniqueTextErrorDataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NonUniqueTextErrorDataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NonUniqueTextErrorDataClient<$Result.GetResult<Prisma.$NonUniqueTextErrorDataPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more NonUniqueTextErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NonUniqueTextErrorDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NonUniqueTextErrorData
     * const nonUniqueTextErrorData = await prisma.nonUniqueTextErrorData.findMany()
     * 
     * // Get first 10 NonUniqueTextErrorData
     * const nonUniqueTextErrorData = await prisma.nonUniqueTextErrorData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nonUniqueTextErrorDataWithIdOnly = await prisma.nonUniqueTextErrorData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NonUniqueTextErrorDataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NonUniqueTextErrorDataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NonUniqueTextErrorDataPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a NonUniqueTextErrorData.
     * @param {NonUniqueTextErrorDataCreateArgs} args - Arguments to create a NonUniqueTextErrorData.
     * @example
     * // Create one NonUniqueTextErrorData
     * const NonUniqueTextErrorData = await prisma.nonUniqueTextErrorData.create({
     *   data: {
     *     // ... data to create a NonUniqueTextErrorData
     *   }
     * })
     * 
    **/
    create<T extends NonUniqueTextErrorDataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NonUniqueTextErrorDataCreateArgs<ExtArgs>>
    ): Prisma__NonUniqueTextErrorDataClient<$Result.GetResult<Prisma.$NonUniqueTextErrorDataPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many NonUniqueTextErrorData.
     *     @param {NonUniqueTextErrorDataCreateManyArgs} args - Arguments to create many NonUniqueTextErrorData.
     *     @example
     *     // Create many NonUniqueTextErrorData
     *     const nonUniqueTextErrorData = await prisma.nonUniqueTextErrorData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NonUniqueTextErrorDataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NonUniqueTextErrorDataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NonUniqueTextErrorData.
     * @param {NonUniqueTextErrorDataDeleteArgs} args - Arguments to delete one NonUniqueTextErrorData.
     * @example
     * // Delete one NonUniqueTextErrorData
     * const NonUniqueTextErrorData = await prisma.nonUniqueTextErrorData.delete({
     *   where: {
     *     // ... filter to delete one NonUniqueTextErrorData
     *   }
     * })
     * 
    **/
    delete<T extends NonUniqueTextErrorDataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NonUniqueTextErrorDataDeleteArgs<ExtArgs>>
    ): Prisma__NonUniqueTextErrorDataClient<$Result.GetResult<Prisma.$NonUniqueTextErrorDataPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one NonUniqueTextErrorData.
     * @param {NonUniqueTextErrorDataUpdateArgs} args - Arguments to update one NonUniqueTextErrorData.
     * @example
     * // Update one NonUniqueTextErrorData
     * const nonUniqueTextErrorData = await prisma.nonUniqueTextErrorData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NonUniqueTextErrorDataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NonUniqueTextErrorDataUpdateArgs<ExtArgs>>
    ): Prisma__NonUniqueTextErrorDataClient<$Result.GetResult<Prisma.$NonUniqueTextErrorDataPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more NonUniqueTextErrorData.
     * @param {NonUniqueTextErrorDataDeleteManyArgs} args - Arguments to filter NonUniqueTextErrorData to delete.
     * @example
     * // Delete a few NonUniqueTextErrorData
     * const { count } = await prisma.nonUniqueTextErrorData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NonUniqueTextErrorDataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NonUniqueTextErrorDataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NonUniqueTextErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NonUniqueTextErrorDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NonUniqueTextErrorData
     * const nonUniqueTextErrorData = await prisma.nonUniqueTextErrorData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NonUniqueTextErrorDataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NonUniqueTextErrorDataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NonUniqueTextErrorData.
     * @param {NonUniqueTextErrorDataUpsertArgs} args - Arguments to update or create a NonUniqueTextErrorData.
     * @example
     * // Update or create a NonUniqueTextErrorData
     * const nonUniqueTextErrorData = await prisma.nonUniqueTextErrorData.upsert({
     *   create: {
     *     // ... data to create a NonUniqueTextErrorData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NonUniqueTextErrorData we want to update
     *   }
     * })
    **/
    upsert<T extends NonUniqueTextErrorDataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NonUniqueTextErrorDataUpsertArgs<ExtArgs>>
    ): Prisma__NonUniqueTextErrorDataClient<$Result.GetResult<Prisma.$NonUniqueTextErrorDataPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of NonUniqueTextErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NonUniqueTextErrorDataCountArgs} args - Arguments to filter NonUniqueTextErrorData to count.
     * @example
     * // Count the number of NonUniqueTextErrorData
     * const count = await prisma.nonUniqueTextErrorData.count({
     *   where: {
     *     // ... the filter for the NonUniqueTextErrorData we want to count
     *   }
     * })
    **/
    count<T extends NonUniqueTextErrorDataCountArgs>(
      args?: Subset<T, NonUniqueTextErrorDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NonUniqueTextErrorDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NonUniqueTextErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NonUniqueTextErrorDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NonUniqueTextErrorDataAggregateArgs>(args: Subset<T, NonUniqueTextErrorDataAggregateArgs>): Prisma.PrismaPromise<GetNonUniqueTextErrorDataAggregateType<T>>

    /**
     * Group by NonUniqueTextErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NonUniqueTextErrorDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NonUniqueTextErrorDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NonUniqueTextErrorDataGroupByArgs['orderBy'] }
        : { orderBy?: NonUniqueTextErrorDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NonUniqueTextErrorDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNonUniqueTextErrorDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NonUniqueTextErrorData model
   */
  readonly fields: NonUniqueTextErrorDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NonUniqueTextErrorData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NonUniqueTextErrorDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the NonUniqueTextErrorData model
   */ 
  interface NonUniqueTextErrorDataFieldRefs {
    readonly id: FieldRef<"NonUniqueTextErrorData", 'String'>
    readonly parentHtml: FieldRef<"NonUniqueTextErrorData", 'String'>
  }
    

  // Custom InputTypes

  /**
   * NonUniqueTextErrorData findUnique
   */
  export type NonUniqueTextErrorDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueTextErrorData
     */
    select?: NonUniqueTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which NonUniqueTextErrorData to fetch.
     */
    where: NonUniqueTextErrorDataWhereUniqueInput
  }


  /**
   * NonUniqueTextErrorData findUniqueOrThrow
   */
  export type NonUniqueTextErrorDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueTextErrorData
     */
    select?: NonUniqueTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which NonUniqueTextErrorData to fetch.
     */
    where: NonUniqueTextErrorDataWhereUniqueInput
  }


  /**
   * NonUniqueTextErrorData findFirst
   */
  export type NonUniqueTextErrorDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueTextErrorData
     */
    select?: NonUniqueTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which NonUniqueTextErrorData to fetch.
     */
    where?: NonUniqueTextErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NonUniqueTextErrorData to fetch.
     */
    orderBy?: NonUniqueTextErrorDataOrderByWithRelationInput | NonUniqueTextErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NonUniqueTextErrorData.
     */
    cursor?: NonUniqueTextErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NonUniqueTextErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NonUniqueTextErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NonUniqueTextErrorData.
     */
    distinct?: NonUniqueTextErrorDataScalarFieldEnum | NonUniqueTextErrorDataScalarFieldEnum[]
  }


  /**
   * NonUniqueTextErrorData findFirstOrThrow
   */
  export type NonUniqueTextErrorDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueTextErrorData
     */
    select?: NonUniqueTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which NonUniqueTextErrorData to fetch.
     */
    where?: NonUniqueTextErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NonUniqueTextErrorData to fetch.
     */
    orderBy?: NonUniqueTextErrorDataOrderByWithRelationInput | NonUniqueTextErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NonUniqueTextErrorData.
     */
    cursor?: NonUniqueTextErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NonUniqueTextErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NonUniqueTextErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NonUniqueTextErrorData.
     */
    distinct?: NonUniqueTextErrorDataScalarFieldEnum | NonUniqueTextErrorDataScalarFieldEnum[]
  }


  /**
   * NonUniqueTextErrorData findMany
   */
  export type NonUniqueTextErrorDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueTextErrorData
     */
    select?: NonUniqueTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which NonUniqueTextErrorData to fetch.
     */
    where?: NonUniqueTextErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NonUniqueTextErrorData to fetch.
     */
    orderBy?: NonUniqueTextErrorDataOrderByWithRelationInput | NonUniqueTextErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NonUniqueTextErrorData.
     */
    cursor?: NonUniqueTextErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NonUniqueTextErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NonUniqueTextErrorData.
     */
    skip?: number
    distinct?: NonUniqueTextErrorDataScalarFieldEnum | NonUniqueTextErrorDataScalarFieldEnum[]
  }


  /**
   * NonUniqueTextErrorData create
   */
  export type NonUniqueTextErrorDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueTextErrorData
     */
    select?: NonUniqueTextErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to create a NonUniqueTextErrorData.
     */
    data?: XOR<NonUniqueTextErrorDataCreateInput, NonUniqueTextErrorDataUncheckedCreateInput>
  }


  /**
   * NonUniqueTextErrorData createMany
   */
  export type NonUniqueTextErrorDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NonUniqueTextErrorData.
     */
    data: NonUniqueTextErrorDataCreateManyInput | NonUniqueTextErrorDataCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * NonUniqueTextErrorData update
   */
  export type NonUniqueTextErrorDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueTextErrorData
     */
    select?: NonUniqueTextErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to update a NonUniqueTextErrorData.
     */
    data: XOR<NonUniqueTextErrorDataUpdateInput, NonUniqueTextErrorDataUncheckedUpdateInput>
    /**
     * Choose, which NonUniqueTextErrorData to update.
     */
    where: NonUniqueTextErrorDataWhereUniqueInput
  }


  /**
   * NonUniqueTextErrorData updateMany
   */
  export type NonUniqueTextErrorDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NonUniqueTextErrorData.
     */
    data: XOR<NonUniqueTextErrorDataUpdateManyMutationInput, NonUniqueTextErrorDataUncheckedUpdateManyInput>
    /**
     * Filter which NonUniqueTextErrorData to update
     */
    where?: NonUniqueTextErrorDataWhereInput
  }


  /**
   * NonUniqueTextErrorData upsert
   */
  export type NonUniqueTextErrorDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueTextErrorData
     */
    select?: NonUniqueTextErrorDataSelect<ExtArgs> | null
    /**
     * The filter to search for the NonUniqueTextErrorData to update in case it exists.
     */
    where: NonUniqueTextErrorDataWhereUniqueInput
    /**
     * In case the NonUniqueTextErrorData found by the `where` argument doesn't exist, create a new NonUniqueTextErrorData with this data.
     */
    create: XOR<NonUniqueTextErrorDataCreateInput, NonUniqueTextErrorDataUncheckedCreateInput>
    /**
     * In case the NonUniqueTextErrorData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NonUniqueTextErrorDataUpdateInput, NonUniqueTextErrorDataUncheckedUpdateInput>
  }


  /**
   * NonUniqueTextErrorData delete
   */
  export type NonUniqueTextErrorDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueTextErrorData
     */
    select?: NonUniqueTextErrorDataSelect<ExtArgs> | null
    /**
     * Filter which NonUniqueTextErrorData to delete.
     */
    where: NonUniqueTextErrorDataWhereUniqueInput
  }


  /**
   * NonUniqueTextErrorData deleteMany
   */
  export type NonUniqueTextErrorDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NonUniqueTextErrorData to delete
     */
    where?: NonUniqueTextErrorDataWhereInput
  }


  /**
   * NonUniqueTextErrorData without action
   */
  export type NonUniqueTextErrorDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueTextErrorData
     */
    select?: NonUniqueTextErrorDataSelect<ExtArgs> | null
  }



  /**
   * Model MissingElementErrorData
   */

  export type AggregateMissingElementErrorData = {
    _count: MissingElementErrorDataCountAggregateOutputType | null
    _min: MissingElementErrorDataMinAggregateOutputType | null
    _max: MissingElementErrorDataMaxAggregateOutputType | null
  }

  export type MissingElementErrorDataMinAggregateOutputType = {
    id: string | null
    parentHtml: string | null
    selector: string | null
  }

  export type MissingElementErrorDataMaxAggregateOutputType = {
    id: string | null
    parentHtml: string | null
    selector: string | null
  }

  export type MissingElementErrorDataCountAggregateOutputType = {
    id: number
    parentHtml: number
    selector: number
    _all: number
  }


  export type MissingElementErrorDataMinAggregateInputType = {
    id?: true
    parentHtml?: true
    selector?: true
  }

  export type MissingElementErrorDataMaxAggregateInputType = {
    id?: true
    parentHtml?: true
    selector?: true
  }

  export type MissingElementErrorDataCountAggregateInputType = {
    id?: true
    parentHtml?: true
    selector?: true
    _all?: true
  }

  export type MissingElementErrorDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MissingElementErrorData to aggregate.
     */
    where?: MissingElementErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MissingElementErrorData to fetch.
     */
    orderBy?: MissingElementErrorDataOrderByWithRelationInput | MissingElementErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MissingElementErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MissingElementErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MissingElementErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MissingElementErrorData
    **/
    _count?: true | MissingElementErrorDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MissingElementErrorDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MissingElementErrorDataMaxAggregateInputType
  }

  export type GetMissingElementErrorDataAggregateType<T extends MissingElementErrorDataAggregateArgs> = {
        [P in keyof T & keyof AggregateMissingElementErrorData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMissingElementErrorData[P]>
      : GetScalarType<T[P], AggregateMissingElementErrorData[P]>
  }




  export type MissingElementErrorDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MissingElementErrorDataWhereInput
    orderBy?: MissingElementErrorDataOrderByWithAggregationInput | MissingElementErrorDataOrderByWithAggregationInput[]
    by: MissingElementErrorDataScalarFieldEnum[] | MissingElementErrorDataScalarFieldEnum
    having?: MissingElementErrorDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MissingElementErrorDataCountAggregateInputType | true
    _min?: MissingElementErrorDataMinAggregateInputType
    _max?: MissingElementErrorDataMaxAggregateInputType
  }

  export type MissingElementErrorDataGroupByOutputType = {
    id: string
    parentHtml: string | null
    selector: string
    _count: MissingElementErrorDataCountAggregateOutputType | null
    _min: MissingElementErrorDataMinAggregateOutputType | null
    _max: MissingElementErrorDataMaxAggregateOutputType | null
  }

  type GetMissingElementErrorDataGroupByPayload<T extends MissingElementErrorDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MissingElementErrorDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MissingElementErrorDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MissingElementErrorDataGroupByOutputType[P]>
            : GetScalarType<T[P], MissingElementErrorDataGroupByOutputType[P]>
        }
      >
    >


  export type MissingElementErrorDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parentHtml?: boolean
    selector?: boolean
  }, ExtArgs["result"]["missingElementErrorData"]>

  export type MissingElementErrorDataSelectScalar = {
    id?: boolean
    parentHtml?: boolean
    selector?: boolean
  }


  export type $MissingElementErrorDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MissingElementErrorData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      parentHtml: string | null
      selector: string
    }, ExtArgs["result"]["missingElementErrorData"]>
    composites: {}
  }


  type MissingElementErrorDataGetPayload<S extends boolean | null | undefined | MissingElementErrorDataDefaultArgs> = $Result.GetResult<Prisma.$MissingElementErrorDataPayload, S>

  type MissingElementErrorDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MissingElementErrorDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MissingElementErrorDataCountAggregateInputType | true
    }

  export interface MissingElementErrorDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MissingElementErrorData'], meta: { name: 'MissingElementErrorData' } }
    /**
     * Find zero or one MissingElementErrorData that matches the filter.
     * @param {MissingElementErrorDataFindUniqueArgs} args - Arguments to find a MissingElementErrorData
     * @example
     * // Get one MissingElementErrorData
     * const missingElementErrorData = await prisma.missingElementErrorData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MissingElementErrorDataFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MissingElementErrorDataFindUniqueArgs<ExtArgs>>
    ): Prisma__MissingElementErrorDataClient<$Result.GetResult<Prisma.$MissingElementErrorDataPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MissingElementErrorData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MissingElementErrorDataFindUniqueOrThrowArgs} args - Arguments to find a MissingElementErrorData
     * @example
     * // Get one MissingElementErrorData
     * const missingElementErrorData = await prisma.missingElementErrorData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MissingElementErrorDataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingElementErrorDataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MissingElementErrorDataClient<$Result.GetResult<Prisma.$MissingElementErrorDataPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MissingElementErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingElementErrorDataFindFirstArgs} args - Arguments to find a MissingElementErrorData
     * @example
     * // Get one MissingElementErrorData
     * const missingElementErrorData = await prisma.missingElementErrorData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MissingElementErrorDataFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingElementErrorDataFindFirstArgs<ExtArgs>>
    ): Prisma__MissingElementErrorDataClient<$Result.GetResult<Prisma.$MissingElementErrorDataPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MissingElementErrorData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingElementErrorDataFindFirstOrThrowArgs} args - Arguments to find a MissingElementErrorData
     * @example
     * // Get one MissingElementErrorData
     * const missingElementErrorData = await prisma.missingElementErrorData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MissingElementErrorDataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingElementErrorDataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MissingElementErrorDataClient<$Result.GetResult<Prisma.$MissingElementErrorDataPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MissingElementErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingElementErrorDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MissingElementErrorData
     * const missingElementErrorData = await prisma.missingElementErrorData.findMany()
     * 
     * // Get first 10 MissingElementErrorData
     * const missingElementErrorData = await prisma.missingElementErrorData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const missingElementErrorDataWithIdOnly = await prisma.missingElementErrorData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MissingElementErrorDataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingElementErrorDataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MissingElementErrorDataPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MissingElementErrorData.
     * @param {MissingElementErrorDataCreateArgs} args - Arguments to create a MissingElementErrorData.
     * @example
     * // Create one MissingElementErrorData
     * const MissingElementErrorData = await prisma.missingElementErrorData.create({
     *   data: {
     *     // ... data to create a MissingElementErrorData
     *   }
     * })
     * 
    **/
    create<T extends MissingElementErrorDataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MissingElementErrorDataCreateArgs<ExtArgs>>
    ): Prisma__MissingElementErrorDataClient<$Result.GetResult<Prisma.$MissingElementErrorDataPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MissingElementErrorData.
     *     @param {MissingElementErrorDataCreateManyArgs} args - Arguments to create many MissingElementErrorData.
     *     @example
     *     // Create many MissingElementErrorData
     *     const missingElementErrorData = await prisma.missingElementErrorData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MissingElementErrorDataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingElementErrorDataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MissingElementErrorData.
     * @param {MissingElementErrorDataDeleteArgs} args - Arguments to delete one MissingElementErrorData.
     * @example
     * // Delete one MissingElementErrorData
     * const MissingElementErrorData = await prisma.missingElementErrorData.delete({
     *   where: {
     *     // ... filter to delete one MissingElementErrorData
     *   }
     * })
     * 
    **/
    delete<T extends MissingElementErrorDataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MissingElementErrorDataDeleteArgs<ExtArgs>>
    ): Prisma__MissingElementErrorDataClient<$Result.GetResult<Prisma.$MissingElementErrorDataPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MissingElementErrorData.
     * @param {MissingElementErrorDataUpdateArgs} args - Arguments to update one MissingElementErrorData.
     * @example
     * // Update one MissingElementErrorData
     * const missingElementErrorData = await prisma.missingElementErrorData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MissingElementErrorDataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MissingElementErrorDataUpdateArgs<ExtArgs>>
    ): Prisma__MissingElementErrorDataClient<$Result.GetResult<Prisma.$MissingElementErrorDataPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MissingElementErrorData.
     * @param {MissingElementErrorDataDeleteManyArgs} args - Arguments to filter MissingElementErrorData to delete.
     * @example
     * // Delete a few MissingElementErrorData
     * const { count } = await prisma.missingElementErrorData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MissingElementErrorDataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MissingElementErrorDataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MissingElementErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingElementErrorDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MissingElementErrorData
     * const missingElementErrorData = await prisma.missingElementErrorData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MissingElementErrorDataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MissingElementErrorDataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MissingElementErrorData.
     * @param {MissingElementErrorDataUpsertArgs} args - Arguments to update or create a MissingElementErrorData.
     * @example
     * // Update or create a MissingElementErrorData
     * const missingElementErrorData = await prisma.missingElementErrorData.upsert({
     *   create: {
     *     // ... data to create a MissingElementErrorData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MissingElementErrorData we want to update
     *   }
     * })
    **/
    upsert<T extends MissingElementErrorDataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MissingElementErrorDataUpsertArgs<ExtArgs>>
    ): Prisma__MissingElementErrorDataClient<$Result.GetResult<Prisma.$MissingElementErrorDataPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MissingElementErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingElementErrorDataCountArgs} args - Arguments to filter MissingElementErrorData to count.
     * @example
     * // Count the number of MissingElementErrorData
     * const count = await prisma.missingElementErrorData.count({
     *   where: {
     *     // ... the filter for the MissingElementErrorData we want to count
     *   }
     * })
    **/
    count<T extends MissingElementErrorDataCountArgs>(
      args?: Subset<T, MissingElementErrorDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MissingElementErrorDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MissingElementErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingElementErrorDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MissingElementErrorDataAggregateArgs>(args: Subset<T, MissingElementErrorDataAggregateArgs>): Prisma.PrismaPromise<GetMissingElementErrorDataAggregateType<T>>

    /**
     * Group by MissingElementErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissingElementErrorDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MissingElementErrorDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MissingElementErrorDataGroupByArgs['orderBy'] }
        : { orderBy?: MissingElementErrorDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MissingElementErrorDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMissingElementErrorDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MissingElementErrorData model
   */
  readonly fields: MissingElementErrorDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MissingElementErrorData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MissingElementErrorDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MissingElementErrorData model
   */ 
  interface MissingElementErrorDataFieldRefs {
    readonly id: FieldRef<"MissingElementErrorData", 'String'>
    readonly parentHtml: FieldRef<"MissingElementErrorData", 'String'>
    readonly selector: FieldRef<"MissingElementErrorData", 'String'>
  }
    

  // Custom InputTypes

  /**
   * MissingElementErrorData findUnique
   */
  export type MissingElementErrorDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingElementErrorData
     */
    select?: MissingElementErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which MissingElementErrorData to fetch.
     */
    where: MissingElementErrorDataWhereUniqueInput
  }


  /**
   * MissingElementErrorData findUniqueOrThrow
   */
  export type MissingElementErrorDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingElementErrorData
     */
    select?: MissingElementErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which MissingElementErrorData to fetch.
     */
    where: MissingElementErrorDataWhereUniqueInput
  }


  /**
   * MissingElementErrorData findFirst
   */
  export type MissingElementErrorDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingElementErrorData
     */
    select?: MissingElementErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which MissingElementErrorData to fetch.
     */
    where?: MissingElementErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MissingElementErrorData to fetch.
     */
    orderBy?: MissingElementErrorDataOrderByWithRelationInput | MissingElementErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MissingElementErrorData.
     */
    cursor?: MissingElementErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MissingElementErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MissingElementErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MissingElementErrorData.
     */
    distinct?: MissingElementErrorDataScalarFieldEnum | MissingElementErrorDataScalarFieldEnum[]
  }


  /**
   * MissingElementErrorData findFirstOrThrow
   */
  export type MissingElementErrorDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingElementErrorData
     */
    select?: MissingElementErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which MissingElementErrorData to fetch.
     */
    where?: MissingElementErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MissingElementErrorData to fetch.
     */
    orderBy?: MissingElementErrorDataOrderByWithRelationInput | MissingElementErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MissingElementErrorData.
     */
    cursor?: MissingElementErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MissingElementErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MissingElementErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MissingElementErrorData.
     */
    distinct?: MissingElementErrorDataScalarFieldEnum | MissingElementErrorDataScalarFieldEnum[]
  }


  /**
   * MissingElementErrorData findMany
   */
  export type MissingElementErrorDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingElementErrorData
     */
    select?: MissingElementErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which MissingElementErrorData to fetch.
     */
    where?: MissingElementErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MissingElementErrorData to fetch.
     */
    orderBy?: MissingElementErrorDataOrderByWithRelationInput | MissingElementErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MissingElementErrorData.
     */
    cursor?: MissingElementErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MissingElementErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MissingElementErrorData.
     */
    skip?: number
    distinct?: MissingElementErrorDataScalarFieldEnum | MissingElementErrorDataScalarFieldEnum[]
  }


  /**
   * MissingElementErrorData create
   */
  export type MissingElementErrorDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingElementErrorData
     */
    select?: MissingElementErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to create a MissingElementErrorData.
     */
    data: XOR<MissingElementErrorDataCreateInput, MissingElementErrorDataUncheckedCreateInput>
  }


  /**
   * MissingElementErrorData createMany
   */
  export type MissingElementErrorDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MissingElementErrorData.
     */
    data: MissingElementErrorDataCreateManyInput | MissingElementErrorDataCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * MissingElementErrorData update
   */
  export type MissingElementErrorDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingElementErrorData
     */
    select?: MissingElementErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to update a MissingElementErrorData.
     */
    data: XOR<MissingElementErrorDataUpdateInput, MissingElementErrorDataUncheckedUpdateInput>
    /**
     * Choose, which MissingElementErrorData to update.
     */
    where: MissingElementErrorDataWhereUniqueInput
  }


  /**
   * MissingElementErrorData updateMany
   */
  export type MissingElementErrorDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MissingElementErrorData.
     */
    data: XOR<MissingElementErrorDataUpdateManyMutationInput, MissingElementErrorDataUncheckedUpdateManyInput>
    /**
     * Filter which MissingElementErrorData to update
     */
    where?: MissingElementErrorDataWhereInput
  }


  /**
   * MissingElementErrorData upsert
   */
  export type MissingElementErrorDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingElementErrorData
     */
    select?: MissingElementErrorDataSelect<ExtArgs> | null
    /**
     * The filter to search for the MissingElementErrorData to update in case it exists.
     */
    where: MissingElementErrorDataWhereUniqueInput
    /**
     * In case the MissingElementErrorData found by the `where` argument doesn't exist, create a new MissingElementErrorData with this data.
     */
    create: XOR<MissingElementErrorDataCreateInput, MissingElementErrorDataUncheckedCreateInput>
    /**
     * In case the MissingElementErrorData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MissingElementErrorDataUpdateInput, MissingElementErrorDataUncheckedUpdateInput>
  }


  /**
   * MissingElementErrorData delete
   */
  export type MissingElementErrorDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingElementErrorData
     */
    select?: MissingElementErrorDataSelect<ExtArgs> | null
    /**
     * Filter which MissingElementErrorData to delete.
     */
    where: MissingElementErrorDataWhereUniqueInput
  }


  /**
   * MissingElementErrorData deleteMany
   */
  export type MissingElementErrorDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MissingElementErrorData to delete
     */
    where?: MissingElementErrorDataWhereInput
  }


  /**
   * MissingElementErrorData without action
   */
  export type MissingElementErrorDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissingElementErrorData
     */
    select?: MissingElementErrorDataSelect<ExtArgs> | null
  }



  /**
   * Model NonUniqueElementErrorData
   */

  export type AggregateNonUniqueElementErrorData = {
    _count: NonUniqueElementErrorDataCountAggregateOutputType | null
    _min: NonUniqueElementErrorDataMinAggregateOutputType | null
    _max: NonUniqueElementErrorDataMaxAggregateOutputType | null
  }

  export type NonUniqueElementErrorDataMinAggregateOutputType = {
    id: string | null
    parentHtml: string | null
    selector: string | null
  }

  export type NonUniqueElementErrorDataMaxAggregateOutputType = {
    id: string | null
    parentHtml: string | null
    selector: string | null
  }

  export type NonUniqueElementErrorDataCountAggregateOutputType = {
    id: number
    parentHtml: number
    selector: number
    _all: number
  }


  export type NonUniqueElementErrorDataMinAggregateInputType = {
    id?: true
    parentHtml?: true
    selector?: true
  }

  export type NonUniqueElementErrorDataMaxAggregateInputType = {
    id?: true
    parentHtml?: true
    selector?: true
  }

  export type NonUniqueElementErrorDataCountAggregateInputType = {
    id?: true
    parentHtml?: true
    selector?: true
    _all?: true
  }

  export type NonUniqueElementErrorDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NonUniqueElementErrorData to aggregate.
     */
    where?: NonUniqueElementErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NonUniqueElementErrorData to fetch.
     */
    orderBy?: NonUniqueElementErrorDataOrderByWithRelationInput | NonUniqueElementErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NonUniqueElementErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NonUniqueElementErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NonUniqueElementErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NonUniqueElementErrorData
    **/
    _count?: true | NonUniqueElementErrorDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NonUniqueElementErrorDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NonUniqueElementErrorDataMaxAggregateInputType
  }

  export type GetNonUniqueElementErrorDataAggregateType<T extends NonUniqueElementErrorDataAggregateArgs> = {
        [P in keyof T & keyof AggregateNonUniqueElementErrorData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNonUniqueElementErrorData[P]>
      : GetScalarType<T[P], AggregateNonUniqueElementErrorData[P]>
  }




  export type NonUniqueElementErrorDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NonUniqueElementErrorDataWhereInput
    orderBy?: NonUniqueElementErrorDataOrderByWithAggregationInput | NonUniqueElementErrorDataOrderByWithAggregationInput[]
    by: NonUniqueElementErrorDataScalarFieldEnum[] | NonUniqueElementErrorDataScalarFieldEnum
    having?: NonUniqueElementErrorDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NonUniqueElementErrorDataCountAggregateInputType | true
    _min?: NonUniqueElementErrorDataMinAggregateInputType
    _max?: NonUniqueElementErrorDataMaxAggregateInputType
  }

  export type NonUniqueElementErrorDataGroupByOutputType = {
    id: string
    parentHtml: string | null
    selector: string
    _count: NonUniqueElementErrorDataCountAggregateOutputType | null
    _min: NonUniqueElementErrorDataMinAggregateOutputType | null
    _max: NonUniqueElementErrorDataMaxAggregateOutputType | null
  }

  type GetNonUniqueElementErrorDataGroupByPayload<T extends NonUniqueElementErrorDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NonUniqueElementErrorDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NonUniqueElementErrorDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NonUniqueElementErrorDataGroupByOutputType[P]>
            : GetScalarType<T[P], NonUniqueElementErrorDataGroupByOutputType[P]>
        }
      >
    >


  export type NonUniqueElementErrorDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parentHtml?: boolean
    selector?: boolean
  }, ExtArgs["result"]["nonUniqueElementErrorData"]>

  export type NonUniqueElementErrorDataSelectScalar = {
    id?: boolean
    parentHtml?: boolean
    selector?: boolean
  }


  export type $NonUniqueElementErrorDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NonUniqueElementErrorData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      parentHtml: string | null
      selector: string
    }, ExtArgs["result"]["nonUniqueElementErrorData"]>
    composites: {}
  }


  type NonUniqueElementErrorDataGetPayload<S extends boolean | null | undefined | NonUniqueElementErrorDataDefaultArgs> = $Result.GetResult<Prisma.$NonUniqueElementErrorDataPayload, S>

  type NonUniqueElementErrorDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NonUniqueElementErrorDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NonUniqueElementErrorDataCountAggregateInputType | true
    }

  export interface NonUniqueElementErrorDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NonUniqueElementErrorData'], meta: { name: 'NonUniqueElementErrorData' } }
    /**
     * Find zero or one NonUniqueElementErrorData that matches the filter.
     * @param {NonUniqueElementErrorDataFindUniqueArgs} args - Arguments to find a NonUniqueElementErrorData
     * @example
     * // Get one NonUniqueElementErrorData
     * const nonUniqueElementErrorData = await prisma.nonUniqueElementErrorData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NonUniqueElementErrorDataFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NonUniqueElementErrorDataFindUniqueArgs<ExtArgs>>
    ): Prisma__NonUniqueElementErrorDataClient<$Result.GetResult<Prisma.$NonUniqueElementErrorDataPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one NonUniqueElementErrorData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NonUniqueElementErrorDataFindUniqueOrThrowArgs} args - Arguments to find a NonUniqueElementErrorData
     * @example
     * // Get one NonUniqueElementErrorData
     * const nonUniqueElementErrorData = await prisma.nonUniqueElementErrorData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NonUniqueElementErrorDataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NonUniqueElementErrorDataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NonUniqueElementErrorDataClient<$Result.GetResult<Prisma.$NonUniqueElementErrorDataPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first NonUniqueElementErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NonUniqueElementErrorDataFindFirstArgs} args - Arguments to find a NonUniqueElementErrorData
     * @example
     * // Get one NonUniqueElementErrorData
     * const nonUniqueElementErrorData = await prisma.nonUniqueElementErrorData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NonUniqueElementErrorDataFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NonUniqueElementErrorDataFindFirstArgs<ExtArgs>>
    ): Prisma__NonUniqueElementErrorDataClient<$Result.GetResult<Prisma.$NonUniqueElementErrorDataPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first NonUniqueElementErrorData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NonUniqueElementErrorDataFindFirstOrThrowArgs} args - Arguments to find a NonUniqueElementErrorData
     * @example
     * // Get one NonUniqueElementErrorData
     * const nonUniqueElementErrorData = await prisma.nonUniqueElementErrorData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NonUniqueElementErrorDataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NonUniqueElementErrorDataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NonUniqueElementErrorDataClient<$Result.GetResult<Prisma.$NonUniqueElementErrorDataPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more NonUniqueElementErrorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NonUniqueElementErrorDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NonUniqueElementErrorData
     * const nonUniqueElementErrorData = await prisma.nonUniqueElementErrorData.findMany()
     * 
     * // Get first 10 NonUniqueElementErrorData
     * const nonUniqueElementErrorData = await prisma.nonUniqueElementErrorData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nonUniqueElementErrorDataWithIdOnly = await prisma.nonUniqueElementErrorData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NonUniqueElementErrorDataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NonUniqueElementErrorDataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NonUniqueElementErrorDataPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a NonUniqueElementErrorData.
     * @param {NonUniqueElementErrorDataCreateArgs} args - Arguments to create a NonUniqueElementErrorData.
     * @example
     * // Create one NonUniqueElementErrorData
     * const NonUniqueElementErrorData = await prisma.nonUniqueElementErrorData.create({
     *   data: {
     *     // ... data to create a NonUniqueElementErrorData
     *   }
     * })
     * 
    **/
    create<T extends NonUniqueElementErrorDataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NonUniqueElementErrorDataCreateArgs<ExtArgs>>
    ): Prisma__NonUniqueElementErrorDataClient<$Result.GetResult<Prisma.$NonUniqueElementErrorDataPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many NonUniqueElementErrorData.
     *     @param {NonUniqueElementErrorDataCreateManyArgs} args - Arguments to create many NonUniqueElementErrorData.
     *     @example
     *     // Create many NonUniqueElementErrorData
     *     const nonUniqueElementErrorData = await prisma.nonUniqueElementErrorData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NonUniqueElementErrorDataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NonUniqueElementErrorDataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NonUniqueElementErrorData.
     * @param {NonUniqueElementErrorDataDeleteArgs} args - Arguments to delete one NonUniqueElementErrorData.
     * @example
     * // Delete one NonUniqueElementErrorData
     * const NonUniqueElementErrorData = await prisma.nonUniqueElementErrorData.delete({
     *   where: {
     *     // ... filter to delete one NonUniqueElementErrorData
     *   }
     * })
     * 
    **/
    delete<T extends NonUniqueElementErrorDataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NonUniqueElementErrorDataDeleteArgs<ExtArgs>>
    ): Prisma__NonUniqueElementErrorDataClient<$Result.GetResult<Prisma.$NonUniqueElementErrorDataPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one NonUniqueElementErrorData.
     * @param {NonUniqueElementErrorDataUpdateArgs} args - Arguments to update one NonUniqueElementErrorData.
     * @example
     * // Update one NonUniqueElementErrorData
     * const nonUniqueElementErrorData = await prisma.nonUniqueElementErrorData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NonUniqueElementErrorDataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NonUniqueElementErrorDataUpdateArgs<ExtArgs>>
    ): Prisma__NonUniqueElementErrorDataClient<$Result.GetResult<Prisma.$NonUniqueElementErrorDataPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more NonUniqueElementErrorData.
     * @param {NonUniqueElementErrorDataDeleteManyArgs} args - Arguments to filter NonUniqueElementErrorData to delete.
     * @example
     * // Delete a few NonUniqueElementErrorData
     * const { count } = await prisma.nonUniqueElementErrorData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NonUniqueElementErrorDataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NonUniqueElementErrorDataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NonUniqueElementErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NonUniqueElementErrorDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NonUniqueElementErrorData
     * const nonUniqueElementErrorData = await prisma.nonUniqueElementErrorData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NonUniqueElementErrorDataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NonUniqueElementErrorDataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NonUniqueElementErrorData.
     * @param {NonUniqueElementErrorDataUpsertArgs} args - Arguments to update or create a NonUniqueElementErrorData.
     * @example
     * // Update or create a NonUniqueElementErrorData
     * const nonUniqueElementErrorData = await prisma.nonUniqueElementErrorData.upsert({
     *   create: {
     *     // ... data to create a NonUniqueElementErrorData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NonUniqueElementErrorData we want to update
     *   }
     * })
    **/
    upsert<T extends NonUniqueElementErrorDataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NonUniqueElementErrorDataUpsertArgs<ExtArgs>>
    ): Prisma__NonUniqueElementErrorDataClient<$Result.GetResult<Prisma.$NonUniqueElementErrorDataPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of NonUniqueElementErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NonUniqueElementErrorDataCountArgs} args - Arguments to filter NonUniqueElementErrorData to count.
     * @example
     * // Count the number of NonUniqueElementErrorData
     * const count = await prisma.nonUniqueElementErrorData.count({
     *   where: {
     *     // ... the filter for the NonUniqueElementErrorData we want to count
     *   }
     * })
    **/
    count<T extends NonUniqueElementErrorDataCountArgs>(
      args?: Subset<T, NonUniqueElementErrorDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NonUniqueElementErrorDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NonUniqueElementErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NonUniqueElementErrorDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NonUniqueElementErrorDataAggregateArgs>(args: Subset<T, NonUniqueElementErrorDataAggregateArgs>): Prisma.PrismaPromise<GetNonUniqueElementErrorDataAggregateType<T>>

    /**
     * Group by NonUniqueElementErrorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NonUniqueElementErrorDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NonUniqueElementErrorDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NonUniqueElementErrorDataGroupByArgs['orderBy'] }
        : { orderBy?: NonUniqueElementErrorDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NonUniqueElementErrorDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNonUniqueElementErrorDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NonUniqueElementErrorData model
   */
  readonly fields: NonUniqueElementErrorDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NonUniqueElementErrorData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NonUniqueElementErrorDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the NonUniqueElementErrorData model
   */ 
  interface NonUniqueElementErrorDataFieldRefs {
    readonly id: FieldRef<"NonUniqueElementErrorData", 'String'>
    readonly parentHtml: FieldRef<"NonUniqueElementErrorData", 'String'>
    readonly selector: FieldRef<"NonUniqueElementErrorData", 'String'>
  }
    

  // Custom InputTypes

  /**
   * NonUniqueElementErrorData findUnique
   */
  export type NonUniqueElementErrorDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueElementErrorData
     */
    select?: NonUniqueElementErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which NonUniqueElementErrorData to fetch.
     */
    where: NonUniqueElementErrorDataWhereUniqueInput
  }


  /**
   * NonUniqueElementErrorData findUniqueOrThrow
   */
  export type NonUniqueElementErrorDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueElementErrorData
     */
    select?: NonUniqueElementErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which NonUniqueElementErrorData to fetch.
     */
    where: NonUniqueElementErrorDataWhereUniqueInput
  }


  /**
   * NonUniqueElementErrorData findFirst
   */
  export type NonUniqueElementErrorDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueElementErrorData
     */
    select?: NonUniqueElementErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which NonUniqueElementErrorData to fetch.
     */
    where?: NonUniqueElementErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NonUniqueElementErrorData to fetch.
     */
    orderBy?: NonUniqueElementErrorDataOrderByWithRelationInput | NonUniqueElementErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NonUniqueElementErrorData.
     */
    cursor?: NonUniqueElementErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NonUniqueElementErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NonUniqueElementErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NonUniqueElementErrorData.
     */
    distinct?: NonUniqueElementErrorDataScalarFieldEnum | NonUniqueElementErrorDataScalarFieldEnum[]
  }


  /**
   * NonUniqueElementErrorData findFirstOrThrow
   */
  export type NonUniqueElementErrorDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueElementErrorData
     */
    select?: NonUniqueElementErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which NonUniqueElementErrorData to fetch.
     */
    where?: NonUniqueElementErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NonUniqueElementErrorData to fetch.
     */
    orderBy?: NonUniqueElementErrorDataOrderByWithRelationInput | NonUniqueElementErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NonUniqueElementErrorData.
     */
    cursor?: NonUniqueElementErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NonUniqueElementErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NonUniqueElementErrorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NonUniqueElementErrorData.
     */
    distinct?: NonUniqueElementErrorDataScalarFieldEnum | NonUniqueElementErrorDataScalarFieldEnum[]
  }


  /**
   * NonUniqueElementErrorData findMany
   */
  export type NonUniqueElementErrorDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueElementErrorData
     */
    select?: NonUniqueElementErrorDataSelect<ExtArgs> | null
    /**
     * Filter, which NonUniqueElementErrorData to fetch.
     */
    where?: NonUniqueElementErrorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NonUniqueElementErrorData to fetch.
     */
    orderBy?: NonUniqueElementErrorDataOrderByWithRelationInput | NonUniqueElementErrorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NonUniqueElementErrorData.
     */
    cursor?: NonUniqueElementErrorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NonUniqueElementErrorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NonUniqueElementErrorData.
     */
    skip?: number
    distinct?: NonUniqueElementErrorDataScalarFieldEnum | NonUniqueElementErrorDataScalarFieldEnum[]
  }


  /**
   * NonUniqueElementErrorData create
   */
  export type NonUniqueElementErrorDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueElementErrorData
     */
    select?: NonUniqueElementErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to create a NonUniqueElementErrorData.
     */
    data: XOR<NonUniqueElementErrorDataCreateInput, NonUniqueElementErrorDataUncheckedCreateInput>
  }


  /**
   * NonUniqueElementErrorData createMany
   */
  export type NonUniqueElementErrorDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NonUniqueElementErrorData.
     */
    data: NonUniqueElementErrorDataCreateManyInput | NonUniqueElementErrorDataCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * NonUniqueElementErrorData update
   */
  export type NonUniqueElementErrorDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueElementErrorData
     */
    select?: NonUniqueElementErrorDataSelect<ExtArgs> | null
    /**
     * The data needed to update a NonUniqueElementErrorData.
     */
    data: XOR<NonUniqueElementErrorDataUpdateInput, NonUniqueElementErrorDataUncheckedUpdateInput>
    /**
     * Choose, which NonUniqueElementErrorData to update.
     */
    where: NonUniqueElementErrorDataWhereUniqueInput
  }


  /**
   * NonUniqueElementErrorData updateMany
   */
  export type NonUniqueElementErrorDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NonUniqueElementErrorData.
     */
    data: XOR<NonUniqueElementErrorDataUpdateManyMutationInput, NonUniqueElementErrorDataUncheckedUpdateManyInput>
    /**
     * Filter which NonUniqueElementErrorData to update
     */
    where?: NonUniqueElementErrorDataWhereInput
  }


  /**
   * NonUniqueElementErrorData upsert
   */
  export type NonUniqueElementErrorDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueElementErrorData
     */
    select?: NonUniqueElementErrorDataSelect<ExtArgs> | null
    /**
     * The filter to search for the NonUniqueElementErrorData to update in case it exists.
     */
    where: NonUniqueElementErrorDataWhereUniqueInput
    /**
     * In case the NonUniqueElementErrorData found by the `where` argument doesn't exist, create a new NonUniqueElementErrorData with this data.
     */
    create: XOR<NonUniqueElementErrorDataCreateInput, NonUniqueElementErrorDataUncheckedCreateInput>
    /**
     * In case the NonUniqueElementErrorData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NonUniqueElementErrorDataUpdateInput, NonUniqueElementErrorDataUncheckedUpdateInput>
  }


  /**
   * NonUniqueElementErrorData delete
   */
  export type NonUniqueElementErrorDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueElementErrorData
     */
    select?: NonUniqueElementErrorDataSelect<ExtArgs> | null
    /**
     * Filter which NonUniqueElementErrorData to delete.
     */
    where: NonUniqueElementErrorDataWhereUniqueInput
  }


  /**
   * NonUniqueElementErrorData deleteMany
   */
  export type NonUniqueElementErrorDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NonUniqueElementErrorData to delete
     */
    where?: NonUniqueElementErrorDataWhereInput
  }


  /**
   * NonUniqueElementErrorData without action
   */
  export type NonUniqueElementErrorDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NonUniqueElementErrorData
     */
    select?: NonUniqueElementErrorDataSelect<ExtArgs> | null
  }



  /**
   * Model ProductRecordError
   */

  export type AggregateProductRecordError = {
    _count: ProductRecordErrorCountAggregateOutputType | null
    _min: ProductRecordErrorMinAggregateOutputType | null
    _max: ProductRecordErrorMaxAggregateOutputType | null
  }

  export type ProductRecordErrorMinAggregateOutputType = {
    id: string | null
    errorId: string | null
    errorCode: $Enums.ScrapingErrorCode | null
    recordId: string | null
    field: $Enums.ProductRecordDataField | null
    message: string | null
  }

  export type ProductRecordErrorMaxAggregateOutputType = {
    id: string | null
    errorId: string | null
    errorCode: $Enums.ScrapingErrorCode | null
    recordId: string | null
    field: $Enums.ProductRecordDataField | null
    message: string | null
  }

  export type ProductRecordErrorCountAggregateOutputType = {
    id: number
    errorId: number
    errorCode: number
    recordId: number
    field: number
    message: number
    _all: number
  }


  export type ProductRecordErrorMinAggregateInputType = {
    id?: true
    errorId?: true
    errorCode?: true
    recordId?: true
    field?: true
    message?: true
  }

  export type ProductRecordErrorMaxAggregateInputType = {
    id?: true
    errorId?: true
    errorCode?: true
    recordId?: true
    field?: true
    message?: true
  }

  export type ProductRecordErrorCountAggregateInputType = {
    id?: true
    errorId?: true
    errorCode?: true
    recordId?: true
    field?: true
    message?: true
    _all?: true
  }

  export type ProductRecordErrorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductRecordError to aggregate.
     */
    where?: ProductRecordErrorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductRecordErrors to fetch.
     */
    orderBy?: ProductRecordErrorOrderByWithRelationInput | ProductRecordErrorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductRecordErrorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductRecordErrors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductRecordErrors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductRecordErrors
    **/
    _count?: true | ProductRecordErrorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductRecordErrorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductRecordErrorMaxAggregateInputType
  }

  export type GetProductRecordErrorAggregateType<T extends ProductRecordErrorAggregateArgs> = {
        [P in keyof T & keyof AggregateProductRecordError]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductRecordError[P]>
      : GetScalarType<T[P], AggregateProductRecordError[P]>
  }




  export type ProductRecordErrorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductRecordErrorWhereInput
    orderBy?: ProductRecordErrorOrderByWithAggregationInput | ProductRecordErrorOrderByWithAggregationInput[]
    by: ProductRecordErrorScalarFieldEnum[] | ProductRecordErrorScalarFieldEnum
    having?: ProductRecordErrorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductRecordErrorCountAggregateInputType | true
    _min?: ProductRecordErrorMinAggregateInputType
    _max?: ProductRecordErrorMaxAggregateInputType
  }

  export type ProductRecordErrorGroupByOutputType = {
    id: string
    errorId: string
    errorCode: $Enums.ScrapingErrorCode
    recordId: string
    field: $Enums.ProductRecordDataField
    message: string
    _count: ProductRecordErrorCountAggregateOutputType | null
    _min: ProductRecordErrorMinAggregateOutputType | null
    _max: ProductRecordErrorMaxAggregateOutputType | null
  }

  type GetProductRecordErrorGroupByPayload<T extends ProductRecordErrorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductRecordErrorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductRecordErrorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductRecordErrorGroupByOutputType[P]>
            : GetScalarType<T[P], ProductRecordErrorGroupByOutputType[P]>
        }
      >
    >


  export type ProductRecordErrorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    errorId?: boolean
    errorCode?: boolean
    recordId?: boolean
    field?: boolean
    message?: boolean
    record?: boolean | ProductRecordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productRecordError"]>

  export type ProductRecordErrorSelectScalar = {
    id?: boolean
    errorId?: boolean
    errorCode?: boolean
    recordId?: boolean
    field?: boolean
    message?: boolean
  }

  export type ProductRecordErrorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    record?: boolean | ProductRecordDefaultArgs<ExtArgs>
  }


  export type $ProductRecordErrorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductRecordError"
    objects: {
      record: Prisma.$ProductRecordPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      errorId: string
      errorCode: $Enums.ScrapingErrorCode
      recordId: string
      field: $Enums.ProductRecordDataField
      message: string
    }, ExtArgs["result"]["productRecordError"]>
    composites: {}
  }


  type ProductRecordErrorGetPayload<S extends boolean | null | undefined | ProductRecordErrorDefaultArgs> = $Result.GetResult<Prisma.$ProductRecordErrorPayload, S>

  type ProductRecordErrorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductRecordErrorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductRecordErrorCountAggregateInputType | true
    }

  export interface ProductRecordErrorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductRecordError'], meta: { name: 'ProductRecordError' } }
    /**
     * Find zero or one ProductRecordError that matches the filter.
     * @param {ProductRecordErrorFindUniqueArgs} args - Arguments to find a ProductRecordError
     * @example
     * // Get one ProductRecordError
     * const productRecordError = await prisma.productRecordError.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductRecordErrorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductRecordErrorFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductRecordErrorClient<$Result.GetResult<Prisma.$ProductRecordErrorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProductRecordError that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductRecordErrorFindUniqueOrThrowArgs} args - Arguments to find a ProductRecordError
     * @example
     * // Get one ProductRecordError
     * const productRecordError = await prisma.productRecordError.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductRecordErrorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductRecordErrorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductRecordErrorClient<$Result.GetResult<Prisma.$ProductRecordErrorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProductRecordError that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecordErrorFindFirstArgs} args - Arguments to find a ProductRecordError
     * @example
     * // Get one ProductRecordError
     * const productRecordError = await prisma.productRecordError.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductRecordErrorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductRecordErrorFindFirstArgs<ExtArgs>>
    ): Prisma__ProductRecordErrorClient<$Result.GetResult<Prisma.$ProductRecordErrorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProductRecordError that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecordErrorFindFirstOrThrowArgs} args - Arguments to find a ProductRecordError
     * @example
     * // Get one ProductRecordError
     * const productRecordError = await prisma.productRecordError.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductRecordErrorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductRecordErrorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductRecordErrorClient<$Result.GetResult<Prisma.$ProductRecordErrorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProductRecordErrors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecordErrorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductRecordErrors
     * const productRecordErrors = await prisma.productRecordError.findMany()
     * 
     * // Get first 10 ProductRecordErrors
     * const productRecordErrors = await prisma.productRecordError.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productRecordErrorWithIdOnly = await prisma.productRecordError.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductRecordErrorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductRecordErrorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductRecordErrorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProductRecordError.
     * @param {ProductRecordErrorCreateArgs} args - Arguments to create a ProductRecordError.
     * @example
     * // Create one ProductRecordError
     * const ProductRecordError = await prisma.productRecordError.create({
     *   data: {
     *     // ... data to create a ProductRecordError
     *   }
     * })
     * 
    **/
    create<T extends ProductRecordErrorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductRecordErrorCreateArgs<ExtArgs>>
    ): Prisma__ProductRecordErrorClient<$Result.GetResult<Prisma.$ProductRecordErrorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProductRecordErrors.
     *     @param {ProductRecordErrorCreateManyArgs} args - Arguments to create many ProductRecordErrors.
     *     @example
     *     // Create many ProductRecordErrors
     *     const productRecordError = await prisma.productRecordError.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductRecordErrorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductRecordErrorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductRecordError.
     * @param {ProductRecordErrorDeleteArgs} args - Arguments to delete one ProductRecordError.
     * @example
     * // Delete one ProductRecordError
     * const ProductRecordError = await prisma.productRecordError.delete({
     *   where: {
     *     // ... filter to delete one ProductRecordError
     *   }
     * })
     * 
    **/
    delete<T extends ProductRecordErrorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductRecordErrorDeleteArgs<ExtArgs>>
    ): Prisma__ProductRecordErrorClient<$Result.GetResult<Prisma.$ProductRecordErrorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProductRecordError.
     * @param {ProductRecordErrorUpdateArgs} args - Arguments to update one ProductRecordError.
     * @example
     * // Update one ProductRecordError
     * const productRecordError = await prisma.productRecordError.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductRecordErrorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductRecordErrorUpdateArgs<ExtArgs>>
    ): Prisma__ProductRecordErrorClient<$Result.GetResult<Prisma.$ProductRecordErrorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProductRecordErrors.
     * @param {ProductRecordErrorDeleteManyArgs} args - Arguments to filter ProductRecordErrors to delete.
     * @example
     * // Delete a few ProductRecordErrors
     * const { count } = await prisma.productRecordError.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductRecordErrorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductRecordErrorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductRecordErrors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecordErrorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductRecordErrors
     * const productRecordError = await prisma.productRecordError.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductRecordErrorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductRecordErrorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductRecordError.
     * @param {ProductRecordErrorUpsertArgs} args - Arguments to update or create a ProductRecordError.
     * @example
     * // Update or create a ProductRecordError
     * const productRecordError = await prisma.productRecordError.upsert({
     *   create: {
     *     // ... data to create a ProductRecordError
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductRecordError we want to update
     *   }
     * })
    **/
    upsert<T extends ProductRecordErrorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductRecordErrorUpsertArgs<ExtArgs>>
    ): Prisma__ProductRecordErrorClient<$Result.GetResult<Prisma.$ProductRecordErrorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProductRecordErrors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecordErrorCountArgs} args - Arguments to filter ProductRecordErrors to count.
     * @example
     * // Count the number of ProductRecordErrors
     * const count = await prisma.productRecordError.count({
     *   where: {
     *     // ... the filter for the ProductRecordErrors we want to count
     *   }
     * })
    **/
    count<T extends ProductRecordErrorCountArgs>(
      args?: Subset<T, ProductRecordErrorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductRecordErrorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductRecordError.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecordErrorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductRecordErrorAggregateArgs>(args: Subset<T, ProductRecordErrorAggregateArgs>): Prisma.PrismaPromise<GetProductRecordErrorAggregateType<T>>

    /**
     * Group by ProductRecordError.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecordErrorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductRecordErrorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductRecordErrorGroupByArgs['orderBy'] }
        : { orderBy?: ProductRecordErrorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductRecordErrorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductRecordErrorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductRecordError model
   */
  readonly fields: ProductRecordErrorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductRecordError.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductRecordErrorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    record<T extends ProductRecordDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductRecordDefaultArgs<ExtArgs>>): Prisma__ProductRecordClient<$Result.GetResult<Prisma.$ProductRecordPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ProductRecordError model
   */ 
  interface ProductRecordErrorFieldRefs {
    readonly id: FieldRef<"ProductRecordError", 'String'>
    readonly errorId: FieldRef<"ProductRecordError", 'String'>
    readonly errorCode: FieldRef<"ProductRecordError", 'ScrapingErrorCode'>
    readonly recordId: FieldRef<"ProductRecordError", 'String'>
    readonly field: FieldRef<"ProductRecordError", 'ProductRecordDataField'>
    readonly message: FieldRef<"ProductRecordError", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ProductRecordError findUnique
   */
  export type ProductRecordErrorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecordError
     */
    select?: ProductRecordErrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordErrorInclude<ExtArgs> | null
    /**
     * Filter, which ProductRecordError to fetch.
     */
    where: ProductRecordErrorWhereUniqueInput
  }


  /**
   * ProductRecordError findUniqueOrThrow
   */
  export type ProductRecordErrorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecordError
     */
    select?: ProductRecordErrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordErrorInclude<ExtArgs> | null
    /**
     * Filter, which ProductRecordError to fetch.
     */
    where: ProductRecordErrorWhereUniqueInput
  }


  /**
   * ProductRecordError findFirst
   */
  export type ProductRecordErrorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecordError
     */
    select?: ProductRecordErrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordErrorInclude<ExtArgs> | null
    /**
     * Filter, which ProductRecordError to fetch.
     */
    where?: ProductRecordErrorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductRecordErrors to fetch.
     */
    orderBy?: ProductRecordErrorOrderByWithRelationInput | ProductRecordErrorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductRecordErrors.
     */
    cursor?: ProductRecordErrorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductRecordErrors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductRecordErrors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductRecordErrors.
     */
    distinct?: ProductRecordErrorScalarFieldEnum | ProductRecordErrorScalarFieldEnum[]
  }


  /**
   * ProductRecordError findFirstOrThrow
   */
  export type ProductRecordErrorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecordError
     */
    select?: ProductRecordErrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordErrorInclude<ExtArgs> | null
    /**
     * Filter, which ProductRecordError to fetch.
     */
    where?: ProductRecordErrorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductRecordErrors to fetch.
     */
    orderBy?: ProductRecordErrorOrderByWithRelationInput | ProductRecordErrorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductRecordErrors.
     */
    cursor?: ProductRecordErrorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductRecordErrors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductRecordErrors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductRecordErrors.
     */
    distinct?: ProductRecordErrorScalarFieldEnum | ProductRecordErrorScalarFieldEnum[]
  }


  /**
   * ProductRecordError findMany
   */
  export type ProductRecordErrorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecordError
     */
    select?: ProductRecordErrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordErrorInclude<ExtArgs> | null
    /**
     * Filter, which ProductRecordErrors to fetch.
     */
    where?: ProductRecordErrorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductRecordErrors to fetch.
     */
    orderBy?: ProductRecordErrorOrderByWithRelationInput | ProductRecordErrorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductRecordErrors.
     */
    cursor?: ProductRecordErrorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductRecordErrors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductRecordErrors.
     */
    skip?: number
    distinct?: ProductRecordErrorScalarFieldEnum | ProductRecordErrorScalarFieldEnum[]
  }


  /**
   * ProductRecordError create
   */
  export type ProductRecordErrorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecordError
     */
    select?: ProductRecordErrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordErrorInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductRecordError.
     */
    data: XOR<ProductRecordErrorCreateInput, ProductRecordErrorUncheckedCreateInput>
  }


  /**
   * ProductRecordError createMany
   */
  export type ProductRecordErrorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductRecordErrors.
     */
    data: ProductRecordErrorCreateManyInput | ProductRecordErrorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ProductRecordError update
   */
  export type ProductRecordErrorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecordError
     */
    select?: ProductRecordErrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordErrorInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductRecordError.
     */
    data: XOR<ProductRecordErrorUpdateInput, ProductRecordErrorUncheckedUpdateInput>
    /**
     * Choose, which ProductRecordError to update.
     */
    where: ProductRecordErrorWhereUniqueInput
  }


  /**
   * ProductRecordError updateMany
   */
  export type ProductRecordErrorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductRecordErrors.
     */
    data: XOR<ProductRecordErrorUpdateManyMutationInput, ProductRecordErrorUncheckedUpdateManyInput>
    /**
     * Filter which ProductRecordErrors to update
     */
    where?: ProductRecordErrorWhereInput
  }


  /**
   * ProductRecordError upsert
   */
  export type ProductRecordErrorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecordError
     */
    select?: ProductRecordErrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordErrorInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductRecordError to update in case it exists.
     */
    where: ProductRecordErrorWhereUniqueInput
    /**
     * In case the ProductRecordError found by the `where` argument doesn't exist, create a new ProductRecordError with this data.
     */
    create: XOR<ProductRecordErrorCreateInput, ProductRecordErrorUncheckedCreateInput>
    /**
     * In case the ProductRecordError was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductRecordErrorUpdateInput, ProductRecordErrorUncheckedUpdateInput>
  }


  /**
   * ProductRecordError delete
   */
  export type ProductRecordErrorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecordError
     */
    select?: ProductRecordErrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordErrorInclude<ExtArgs> | null
    /**
     * Filter which ProductRecordError to delete.
     */
    where: ProductRecordErrorWhereUniqueInput
  }


  /**
   * ProductRecordError deleteMany
   */
  export type ProductRecordErrorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductRecordErrors to delete
     */
    where?: ProductRecordErrorWhereInput
  }


  /**
   * ProductRecordError without action
   */
  export type ProductRecordErrorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecordError
     */
    select?: ProductRecordErrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordErrorInclude<ExtArgs> | null
  }



  /**
   * Model ProductRecord
   */

  export type AggregateProductRecord = {
    _count: ProductRecordCountAggregateOutputType | null
    _avg: ProductRecordAvgAggregateOutputType | null
    _sum: ProductRecordSumAggregateOutputType | null
    _min: ProductRecordMinAggregateOutputType | null
    _max: ProductRecordMaxAggregateOutputType | null
  }

  export type ProductRecordAvgAggregateOutputType = {
    price: number | null
  }

  export type ProductRecordSumAggregateOutputType = {
    price: number | null
  }

  export type ProductRecordMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    timestamp: Date | null
    productId: string | null
    price: number | null
    rawPrice: string | null
    status: $Enums.ProductStatus | null
    wasManuallyCreated: boolean | null
  }

  export type ProductRecordMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    timestamp: Date | null
    productId: string | null
    price: number | null
    rawPrice: string | null
    status: $Enums.ProductStatus | null
    wasManuallyCreated: boolean | null
  }

  export type ProductRecordCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    timestamp: number
    productId: number
    price: number
    rawPrice: number
    status: number
    wasManuallyCreated: number
    manuallyChangedFields: number
    _all: number
  }


  export type ProductRecordAvgAggregateInputType = {
    price?: true
  }

  export type ProductRecordSumAggregateInputType = {
    price?: true
  }

  export type ProductRecordMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    timestamp?: true
    productId?: true
    price?: true
    rawPrice?: true
    status?: true
    wasManuallyCreated?: true
  }

  export type ProductRecordMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    timestamp?: true
    productId?: true
    price?: true
    rawPrice?: true
    status?: true
    wasManuallyCreated?: true
  }

  export type ProductRecordCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    timestamp?: true
    productId?: true
    price?: true
    rawPrice?: true
    status?: true
    wasManuallyCreated?: true
    manuallyChangedFields?: true
    _all?: true
  }

  export type ProductRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductRecord to aggregate.
     */
    where?: ProductRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductRecords to fetch.
     */
    orderBy?: ProductRecordOrderByWithRelationInput | ProductRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductRecords
    **/
    _count?: true | ProductRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductRecordMaxAggregateInputType
  }

  export type GetProductRecordAggregateType<T extends ProductRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateProductRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductRecord[P]>
      : GetScalarType<T[P], AggregateProductRecord[P]>
  }




  export type ProductRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductRecordWhereInput
    orderBy?: ProductRecordOrderByWithAggregationInput | ProductRecordOrderByWithAggregationInput[]
    by: ProductRecordScalarFieldEnum[] | ProductRecordScalarFieldEnum
    having?: ProductRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductRecordCountAggregateInputType | true
    _avg?: ProductRecordAvgAggregateInputType
    _sum?: ProductRecordSumAggregateInputType
    _min?: ProductRecordMinAggregateInputType
    _max?: ProductRecordMaxAggregateInputType
  }

  export type ProductRecordGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    createdById: string
    updatedById: string
    timestamp: Date
    productId: string
    price: number | null
    rawPrice: string | null
    status: $Enums.ProductStatus | null
    wasManuallyCreated: boolean
    manuallyChangedFields: $Enums.ProductRecordDataField[]
    _count: ProductRecordCountAggregateOutputType | null
    _avg: ProductRecordAvgAggregateOutputType | null
    _sum: ProductRecordSumAggregateOutputType | null
    _min: ProductRecordMinAggregateOutputType | null
    _max: ProductRecordMaxAggregateOutputType | null
  }

  type GetProductRecordGroupByPayload<T extends ProductRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductRecordGroupByOutputType[P]>
            : GetScalarType<T[P], ProductRecordGroupByOutputType[P]>
        }
      >
    >


  export type ProductRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    timestamp?: boolean
    productId?: boolean
    price?: boolean
    rawPrice?: boolean
    status?: boolean
    wasManuallyCreated?: boolean
    manuallyChangedFields?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    errors?: boolean | ProductRecord$errorsArgs<ExtArgs>
    statusChangeNotifications?: boolean | ProductRecord$statusChangeNotificationsArgs<ExtArgs>
    priceChangeNotifications?: boolean | ProductRecord$priceChangeNotificationsArgs<ExtArgs>
    processedRecords?: boolean | ProductRecord$processedRecordsArgs<ExtArgs>
    _count?: boolean | ProductRecordCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productRecord"]>

  export type ProductRecordSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    timestamp?: boolean
    productId?: boolean
    price?: boolean
    rawPrice?: boolean
    status?: boolean
    wasManuallyCreated?: boolean
    manuallyChangedFields?: boolean
  }

  export type ProductRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    errors?: boolean | ProductRecord$errorsArgs<ExtArgs>
    statusChangeNotifications?: boolean | ProductRecord$statusChangeNotificationsArgs<ExtArgs>
    priceChangeNotifications?: boolean | ProductRecord$priceChangeNotificationsArgs<ExtArgs>
    processedRecords?: boolean | ProductRecord$processedRecordsArgs<ExtArgs>
    _count?: boolean | ProductRecordCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProductRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductRecord"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
      errors: Prisma.$ProductRecordErrorPayload<ExtArgs>[]
      statusChangeNotifications: Prisma.$StatusChangeNotificationPayload<ExtArgs>[]
      priceChangeNotifications: Prisma.$PriceChangeNotificationPayload<ExtArgs>[]
      processedRecords: Prisma.$ProcessedProductRecordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      createdById: string
      updatedById: string
      timestamp: Date
      productId: string
      price: number | null
      rawPrice: string | null
      status: $Enums.ProductStatus | null
      wasManuallyCreated: boolean
      manuallyChangedFields: $Enums.ProductRecordDataField[]
    }, ExtArgs["result"]["productRecord"]>
    composites: {}
  }


  type ProductRecordGetPayload<S extends boolean | null | undefined | ProductRecordDefaultArgs> = $Result.GetResult<Prisma.$ProductRecordPayload, S>

  type ProductRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductRecordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductRecordCountAggregateInputType | true
    }

  export interface ProductRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductRecord'], meta: { name: 'ProductRecord' } }
    /**
     * Find zero or one ProductRecord that matches the filter.
     * @param {ProductRecordFindUniqueArgs} args - Arguments to find a ProductRecord
     * @example
     * // Get one ProductRecord
     * const productRecord = await prisma.productRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductRecordFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductRecordFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductRecordClient<$Result.GetResult<Prisma.$ProductRecordPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProductRecord that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductRecordFindUniqueOrThrowArgs} args - Arguments to find a ProductRecord
     * @example
     * // Get one ProductRecord
     * const productRecord = await prisma.productRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductRecordFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductRecordFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductRecordClient<$Result.GetResult<Prisma.$ProductRecordPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProductRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecordFindFirstArgs} args - Arguments to find a ProductRecord
     * @example
     * // Get one ProductRecord
     * const productRecord = await prisma.productRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductRecordFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductRecordFindFirstArgs<ExtArgs>>
    ): Prisma__ProductRecordClient<$Result.GetResult<Prisma.$ProductRecordPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProductRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecordFindFirstOrThrowArgs} args - Arguments to find a ProductRecord
     * @example
     * // Get one ProductRecord
     * const productRecord = await prisma.productRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductRecordFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductRecordFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductRecordClient<$Result.GetResult<Prisma.$ProductRecordPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProductRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecordFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductRecords
     * const productRecords = await prisma.productRecord.findMany()
     * 
     * // Get first 10 ProductRecords
     * const productRecords = await prisma.productRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productRecordWithIdOnly = await prisma.productRecord.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductRecordFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductRecordFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductRecordPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProductRecord.
     * @param {ProductRecordCreateArgs} args - Arguments to create a ProductRecord.
     * @example
     * // Create one ProductRecord
     * const ProductRecord = await prisma.productRecord.create({
     *   data: {
     *     // ... data to create a ProductRecord
     *   }
     * })
     * 
    **/
    create<T extends ProductRecordCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductRecordCreateArgs<ExtArgs>>
    ): Prisma__ProductRecordClient<$Result.GetResult<Prisma.$ProductRecordPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProductRecords.
     *     @param {ProductRecordCreateManyArgs} args - Arguments to create many ProductRecords.
     *     @example
     *     // Create many ProductRecords
     *     const productRecord = await prisma.productRecord.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductRecordCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductRecordCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductRecord.
     * @param {ProductRecordDeleteArgs} args - Arguments to delete one ProductRecord.
     * @example
     * // Delete one ProductRecord
     * const ProductRecord = await prisma.productRecord.delete({
     *   where: {
     *     // ... filter to delete one ProductRecord
     *   }
     * })
     * 
    **/
    delete<T extends ProductRecordDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductRecordDeleteArgs<ExtArgs>>
    ): Prisma__ProductRecordClient<$Result.GetResult<Prisma.$ProductRecordPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProductRecord.
     * @param {ProductRecordUpdateArgs} args - Arguments to update one ProductRecord.
     * @example
     * // Update one ProductRecord
     * const productRecord = await prisma.productRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductRecordUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductRecordUpdateArgs<ExtArgs>>
    ): Prisma__ProductRecordClient<$Result.GetResult<Prisma.$ProductRecordPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProductRecords.
     * @param {ProductRecordDeleteManyArgs} args - Arguments to filter ProductRecords to delete.
     * @example
     * // Delete a few ProductRecords
     * const { count } = await prisma.productRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductRecordDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductRecordDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductRecords
     * const productRecord = await prisma.productRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductRecordUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductRecordUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductRecord.
     * @param {ProductRecordUpsertArgs} args - Arguments to update or create a ProductRecord.
     * @example
     * // Update or create a ProductRecord
     * const productRecord = await prisma.productRecord.upsert({
     *   create: {
     *     // ... data to create a ProductRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductRecord we want to update
     *   }
     * })
    **/
    upsert<T extends ProductRecordUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductRecordUpsertArgs<ExtArgs>>
    ): Prisma__ProductRecordClient<$Result.GetResult<Prisma.$ProductRecordPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProductRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecordCountArgs} args - Arguments to filter ProductRecords to count.
     * @example
     * // Count the number of ProductRecords
     * const count = await prisma.productRecord.count({
     *   where: {
     *     // ... the filter for the ProductRecords we want to count
     *   }
     * })
    **/
    count<T extends ProductRecordCountArgs>(
      args?: Subset<T, ProductRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductRecordAggregateArgs>(args: Subset<T, ProductRecordAggregateArgs>): Prisma.PrismaPromise<GetProductRecordAggregateType<T>>

    /**
     * Group by ProductRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductRecordGroupByArgs['orderBy'] }
        : { orderBy?: ProductRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductRecord model
   */
  readonly fields: ProductRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    errors<T extends ProductRecord$errorsArgs<ExtArgs> = {}>(args?: Subset<T, ProductRecord$errorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductRecordErrorPayload<ExtArgs>, T, 'findMany'> | Null>;

    statusChangeNotifications<T extends ProductRecord$statusChangeNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, ProductRecord$statusChangeNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusChangeNotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    priceChangeNotifications<T extends ProductRecord$priceChangeNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, ProductRecord$priceChangeNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceChangeNotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    processedRecords<T extends ProductRecord$processedRecordsArgs<ExtArgs> = {}>(args?: Subset<T, ProductRecord$processedRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessedProductRecordPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ProductRecord model
   */ 
  interface ProductRecordFieldRefs {
    readonly id: FieldRef<"ProductRecord", 'String'>
    readonly createdAt: FieldRef<"ProductRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"ProductRecord", 'DateTime'>
    readonly createdById: FieldRef<"ProductRecord", 'String'>
    readonly updatedById: FieldRef<"ProductRecord", 'String'>
    readonly timestamp: FieldRef<"ProductRecord", 'DateTime'>
    readonly productId: FieldRef<"ProductRecord", 'String'>
    readonly price: FieldRef<"ProductRecord", 'Float'>
    readonly rawPrice: FieldRef<"ProductRecord", 'String'>
    readonly status: FieldRef<"ProductRecord", 'ProductStatus'>
    readonly wasManuallyCreated: FieldRef<"ProductRecord", 'Boolean'>
    readonly manuallyChangedFields: FieldRef<"ProductRecord", 'ProductRecordDataField[]'>
  }
    

  // Custom InputTypes

  /**
   * ProductRecord findUnique
   */
  export type ProductRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecord
     */
    select?: ProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordInclude<ExtArgs> | null
    /**
     * Filter, which ProductRecord to fetch.
     */
    where: ProductRecordWhereUniqueInput
  }


  /**
   * ProductRecord findUniqueOrThrow
   */
  export type ProductRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecord
     */
    select?: ProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordInclude<ExtArgs> | null
    /**
     * Filter, which ProductRecord to fetch.
     */
    where: ProductRecordWhereUniqueInput
  }


  /**
   * ProductRecord findFirst
   */
  export type ProductRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecord
     */
    select?: ProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordInclude<ExtArgs> | null
    /**
     * Filter, which ProductRecord to fetch.
     */
    where?: ProductRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductRecords to fetch.
     */
    orderBy?: ProductRecordOrderByWithRelationInput | ProductRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductRecords.
     */
    cursor?: ProductRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductRecords.
     */
    distinct?: ProductRecordScalarFieldEnum | ProductRecordScalarFieldEnum[]
  }


  /**
   * ProductRecord findFirstOrThrow
   */
  export type ProductRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecord
     */
    select?: ProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordInclude<ExtArgs> | null
    /**
     * Filter, which ProductRecord to fetch.
     */
    where?: ProductRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductRecords to fetch.
     */
    orderBy?: ProductRecordOrderByWithRelationInput | ProductRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductRecords.
     */
    cursor?: ProductRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductRecords.
     */
    distinct?: ProductRecordScalarFieldEnum | ProductRecordScalarFieldEnum[]
  }


  /**
   * ProductRecord findMany
   */
  export type ProductRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecord
     */
    select?: ProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordInclude<ExtArgs> | null
    /**
     * Filter, which ProductRecords to fetch.
     */
    where?: ProductRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductRecords to fetch.
     */
    orderBy?: ProductRecordOrderByWithRelationInput | ProductRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductRecords.
     */
    cursor?: ProductRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductRecords.
     */
    skip?: number
    distinct?: ProductRecordScalarFieldEnum | ProductRecordScalarFieldEnum[]
  }


  /**
   * ProductRecord create
   */
  export type ProductRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecord
     */
    select?: ProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductRecord.
     */
    data: XOR<ProductRecordCreateInput, ProductRecordUncheckedCreateInput>
  }


  /**
   * ProductRecord createMany
   */
  export type ProductRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductRecords.
     */
    data: ProductRecordCreateManyInput | ProductRecordCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ProductRecord update
   */
  export type ProductRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecord
     */
    select?: ProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductRecord.
     */
    data: XOR<ProductRecordUpdateInput, ProductRecordUncheckedUpdateInput>
    /**
     * Choose, which ProductRecord to update.
     */
    where: ProductRecordWhereUniqueInput
  }


  /**
   * ProductRecord updateMany
   */
  export type ProductRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductRecords.
     */
    data: XOR<ProductRecordUpdateManyMutationInput, ProductRecordUncheckedUpdateManyInput>
    /**
     * Filter which ProductRecords to update
     */
    where?: ProductRecordWhereInput
  }


  /**
   * ProductRecord upsert
   */
  export type ProductRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecord
     */
    select?: ProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductRecord to update in case it exists.
     */
    where: ProductRecordWhereUniqueInput
    /**
     * In case the ProductRecord found by the `where` argument doesn't exist, create a new ProductRecord with this data.
     */
    create: XOR<ProductRecordCreateInput, ProductRecordUncheckedCreateInput>
    /**
     * In case the ProductRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductRecordUpdateInput, ProductRecordUncheckedUpdateInput>
  }


  /**
   * ProductRecord delete
   */
  export type ProductRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecord
     */
    select?: ProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordInclude<ExtArgs> | null
    /**
     * Filter which ProductRecord to delete.
     */
    where: ProductRecordWhereUniqueInput
  }


  /**
   * ProductRecord deleteMany
   */
  export type ProductRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductRecords to delete
     */
    where?: ProductRecordWhereInput
  }


  /**
   * ProductRecord.errors
   */
  export type ProductRecord$errorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecordError
     */
    select?: ProductRecordErrorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordErrorInclude<ExtArgs> | null
    where?: ProductRecordErrorWhereInput
    orderBy?: ProductRecordErrorOrderByWithRelationInput | ProductRecordErrorOrderByWithRelationInput[]
    cursor?: ProductRecordErrorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductRecordErrorScalarFieldEnum | ProductRecordErrorScalarFieldEnum[]
  }


  /**
   * ProductRecord.statusChangeNotifications
   */
  export type ProductRecord$statusChangeNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeNotification
     */
    select?: StatusChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeNotificationInclude<ExtArgs> | null
    where?: StatusChangeNotificationWhereInput
    orderBy?: StatusChangeNotificationOrderByWithRelationInput | StatusChangeNotificationOrderByWithRelationInput[]
    cursor?: StatusChangeNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StatusChangeNotificationScalarFieldEnum | StatusChangeNotificationScalarFieldEnum[]
  }


  /**
   * ProductRecord.priceChangeNotifications
   */
  export type ProductRecord$priceChangeNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeNotification
     */
    select?: PriceChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeNotificationInclude<ExtArgs> | null
    where?: PriceChangeNotificationWhereInput
    orderBy?: PriceChangeNotificationOrderByWithRelationInput | PriceChangeNotificationOrderByWithRelationInput[]
    cursor?: PriceChangeNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PriceChangeNotificationScalarFieldEnum | PriceChangeNotificationScalarFieldEnum[]
  }


  /**
   * ProductRecord.processedRecords
   */
  export type ProductRecord$processedRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessedProductRecord
     */
    select?: ProcessedProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcessedProductRecordInclude<ExtArgs> | null
    where?: ProcessedProductRecordWhereInput
    orderBy?: ProcessedProductRecordOrderByWithRelationInput | ProcessedProductRecordOrderByWithRelationInput[]
    cursor?: ProcessedProductRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessedProductRecordScalarFieldEnum | ProcessedProductRecordScalarFieldEnum[]
  }


  /**
   * ProductRecord without action
   */
  export type ProductRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecord
     */
    select?: ProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordInclude<ExtArgs> | null
  }



  /**
   * Model ProcessedProductRecord
   */

  export type AggregateProcessedProductRecord = {
    _count: ProcessedProductRecordCountAggregateOutputType | null
    _min: ProcessedProductRecordMinAggregateOutputType | null
    _max: ProcessedProductRecordMaxAggregateOutputType | null
  }

  export type ProcessedProductRecordMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    recordId: string | null
    userId: string | null
  }

  export type ProcessedProductRecordMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    recordId: string | null
    userId: string | null
  }

  export type ProcessedProductRecordCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    recordId: number
    userId: number
    _all: number
  }


  export type ProcessedProductRecordMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    recordId?: true
    userId?: true
  }

  export type ProcessedProductRecordMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    recordId?: true
    userId?: true
  }

  export type ProcessedProductRecordCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    recordId?: true
    userId?: true
    _all?: true
  }

  export type ProcessedProductRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProcessedProductRecord to aggregate.
     */
    where?: ProcessedProductRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessedProductRecords to fetch.
     */
    orderBy?: ProcessedProductRecordOrderByWithRelationInput | ProcessedProductRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProcessedProductRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessedProductRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessedProductRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProcessedProductRecords
    **/
    _count?: true | ProcessedProductRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProcessedProductRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProcessedProductRecordMaxAggregateInputType
  }

  export type GetProcessedProductRecordAggregateType<T extends ProcessedProductRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateProcessedProductRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProcessedProductRecord[P]>
      : GetScalarType<T[P], AggregateProcessedProductRecord[P]>
  }




  export type ProcessedProductRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessedProductRecordWhereInput
    orderBy?: ProcessedProductRecordOrderByWithAggregationInput | ProcessedProductRecordOrderByWithAggregationInput[]
    by: ProcessedProductRecordScalarFieldEnum[] | ProcessedProductRecordScalarFieldEnum
    having?: ProcessedProductRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProcessedProductRecordCountAggregateInputType | true
    _min?: ProcessedProductRecordMinAggregateInputType
    _max?: ProcessedProductRecordMaxAggregateInputType
  }

  export type ProcessedProductRecordGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    createdById: string
    updatedById: string
    recordId: string
    userId: string
    _count: ProcessedProductRecordCountAggregateOutputType | null
    _min: ProcessedProductRecordMinAggregateOutputType | null
    _max: ProcessedProductRecordMaxAggregateOutputType | null
  }

  type GetProcessedProductRecordGroupByPayload<T extends ProcessedProductRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProcessedProductRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProcessedProductRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProcessedProductRecordGroupByOutputType[P]>
            : GetScalarType<T[P], ProcessedProductRecordGroupByOutputType[P]>
        }
      >
    >


  export type ProcessedProductRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    recordId?: boolean
    userId?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    record?: boolean | ProductRecordDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["processedProductRecord"]>

  export type ProcessedProductRecordSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    recordId?: boolean
    userId?: boolean
  }

  export type ProcessedProductRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    record?: boolean | ProductRecordDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $ProcessedProductRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProcessedProductRecord"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      record: Prisma.$ProductRecordPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      createdById: string
      updatedById: string
      recordId: string
      userId: string
    }, ExtArgs["result"]["processedProductRecord"]>
    composites: {}
  }


  type ProcessedProductRecordGetPayload<S extends boolean | null | undefined | ProcessedProductRecordDefaultArgs> = $Result.GetResult<Prisma.$ProcessedProductRecordPayload, S>

  type ProcessedProductRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProcessedProductRecordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProcessedProductRecordCountAggregateInputType | true
    }

  export interface ProcessedProductRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProcessedProductRecord'], meta: { name: 'ProcessedProductRecord' } }
    /**
     * Find zero or one ProcessedProductRecord that matches the filter.
     * @param {ProcessedProductRecordFindUniqueArgs} args - Arguments to find a ProcessedProductRecord
     * @example
     * // Get one ProcessedProductRecord
     * const processedProductRecord = await prisma.processedProductRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProcessedProductRecordFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProcessedProductRecordFindUniqueArgs<ExtArgs>>
    ): Prisma__ProcessedProductRecordClient<$Result.GetResult<Prisma.$ProcessedProductRecordPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProcessedProductRecord that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProcessedProductRecordFindUniqueOrThrowArgs} args - Arguments to find a ProcessedProductRecord
     * @example
     * // Get one ProcessedProductRecord
     * const processedProductRecord = await prisma.processedProductRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProcessedProductRecordFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProcessedProductRecordFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProcessedProductRecordClient<$Result.GetResult<Prisma.$ProcessedProductRecordPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProcessedProductRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessedProductRecordFindFirstArgs} args - Arguments to find a ProcessedProductRecord
     * @example
     * // Get one ProcessedProductRecord
     * const processedProductRecord = await prisma.processedProductRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProcessedProductRecordFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProcessedProductRecordFindFirstArgs<ExtArgs>>
    ): Prisma__ProcessedProductRecordClient<$Result.GetResult<Prisma.$ProcessedProductRecordPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProcessedProductRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessedProductRecordFindFirstOrThrowArgs} args - Arguments to find a ProcessedProductRecord
     * @example
     * // Get one ProcessedProductRecord
     * const processedProductRecord = await prisma.processedProductRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProcessedProductRecordFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProcessedProductRecordFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProcessedProductRecordClient<$Result.GetResult<Prisma.$ProcessedProductRecordPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProcessedProductRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessedProductRecordFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProcessedProductRecords
     * const processedProductRecords = await prisma.processedProductRecord.findMany()
     * 
     * // Get first 10 ProcessedProductRecords
     * const processedProductRecords = await prisma.processedProductRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const processedProductRecordWithIdOnly = await prisma.processedProductRecord.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProcessedProductRecordFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProcessedProductRecordFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessedProductRecordPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProcessedProductRecord.
     * @param {ProcessedProductRecordCreateArgs} args - Arguments to create a ProcessedProductRecord.
     * @example
     * // Create one ProcessedProductRecord
     * const ProcessedProductRecord = await prisma.processedProductRecord.create({
     *   data: {
     *     // ... data to create a ProcessedProductRecord
     *   }
     * })
     * 
    **/
    create<T extends ProcessedProductRecordCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProcessedProductRecordCreateArgs<ExtArgs>>
    ): Prisma__ProcessedProductRecordClient<$Result.GetResult<Prisma.$ProcessedProductRecordPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProcessedProductRecords.
     *     @param {ProcessedProductRecordCreateManyArgs} args - Arguments to create many ProcessedProductRecords.
     *     @example
     *     // Create many ProcessedProductRecords
     *     const processedProductRecord = await prisma.processedProductRecord.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProcessedProductRecordCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProcessedProductRecordCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProcessedProductRecord.
     * @param {ProcessedProductRecordDeleteArgs} args - Arguments to delete one ProcessedProductRecord.
     * @example
     * // Delete one ProcessedProductRecord
     * const ProcessedProductRecord = await prisma.processedProductRecord.delete({
     *   where: {
     *     // ... filter to delete one ProcessedProductRecord
     *   }
     * })
     * 
    **/
    delete<T extends ProcessedProductRecordDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProcessedProductRecordDeleteArgs<ExtArgs>>
    ): Prisma__ProcessedProductRecordClient<$Result.GetResult<Prisma.$ProcessedProductRecordPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProcessedProductRecord.
     * @param {ProcessedProductRecordUpdateArgs} args - Arguments to update one ProcessedProductRecord.
     * @example
     * // Update one ProcessedProductRecord
     * const processedProductRecord = await prisma.processedProductRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProcessedProductRecordUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProcessedProductRecordUpdateArgs<ExtArgs>>
    ): Prisma__ProcessedProductRecordClient<$Result.GetResult<Prisma.$ProcessedProductRecordPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProcessedProductRecords.
     * @param {ProcessedProductRecordDeleteManyArgs} args - Arguments to filter ProcessedProductRecords to delete.
     * @example
     * // Delete a few ProcessedProductRecords
     * const { count } = await prisma.processedProductRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProcessedProductRecordDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProcessedProductRecordDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProcessedProductRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessedProductRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProcessedProductRecords
     * const processedProductRecord = await prisma.processedProductRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProcessedProductRecordUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProcessedProductRecordUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProcessedProductRecord.
     * @param {ProcessedProductRecordUpsertArgs} args - Arguments to update or create a ProcessedProductRecord.
     * @example
     * // Update or create a ProcessedProductRecord
     * const processedProductRecord = await prisma.processedProductRecord.upsert({
     *   create: {
     *     // ... data to create a ProcessedProductRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProcessedProductRecord we want to update
     *   }
     * })
    **/
    upsert<T extends ProcessedProductRecordUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProcessedProductRecordUpsertArgs<ExtArgs>>
    ): Prisma__ProcessedProductRecordClient<$Result.GetResult<Prisma.$ProcessedProductRecordPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProcessedProductRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessedProductRecordCountArgs} args - Arguments to filter ProcessedProductRecords to count.
     * @example
     * // Count the number of ProcessedProductRecords
     * const count = await prisma.processedProductRecord.count({
     *   where: {
     *     // ... the filter for the ProcessedProductRecords we want to count
     *   }
     * })
    **/
    count<T extends ProcessedProductRecordCountArgs>(
      args?: Subset<T, ProcessedProductRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProcessedProductRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProcessedProductRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessedProductRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProcessedProductRecordAggregateArgs>(args: Subset<T, ProcessedProductRecordAggregateArgs>): Prisma.PrismaPromise<GetProcessedProductRecordAggregateType<T>>

    /**
     * Group by ProcessedProductRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessedProductRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProcessedProductRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProcessedProductRecordGroupByArgs['orderBy'] }
        : { orderBy?: ProcessedProductRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProcessedProductRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcessedProductRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProcessedProductRecord model
   */
  readonly fields: ProcessedProductRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProcessedProductRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProcessedProductRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    record<T extends ProductRecordDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductRecordDefaultArgs<ExtArgs>>): Prisma__ProductRecordClient<$Result.GetResult<Prisma.$ProductRecordPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ProcessedProductRecord model
   */ 
  interface ProcessedProductRecordFieldRefs {
    readonly id: FieldRef<"ProcessedProductRecord", 'String'>
    readonly createdAt: FieldRef<"ProcessedProductRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"ProcessedProductRecord", 'DateTime'>
    readonly createdById: FieldRef<"ProcessedProductRecord", 'String'>
    readonly updatedById: FieldRef<"ProcessedProductRecord", 'String'>
    readonly recordId: FieldRef<"ProcessedProductRecord", 'String'>
    readonly userId: FieldRef<"ProcessedProductRecord", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ProcessedProductRecord findUnique
   */
  export type ProcessedProductRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessedProductRecord
     */
    select?: ProcessedProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcessedProductRecordInclude<ExtArgs> | null
    /**
     * Filter, which ProcessedProductRecord to fetch.
     */
    where: ProcessedProductRecordWhereUniqueInput
  }


  /**
   * ProcessedProductRecord findUniqueOrThrow
   */
  export type ProcessedProductRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessedProductRecord
     */
    select?: ProcessedProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcessedProductRecordInclude<ExtArgs> | null
    /**
     * Filter, which ProcessedProductRecord to fetch.
     */
    where: ProcessedProductRecordWhereUniqueInput
  }


  /**
   * ProcessedProductRecord findFirst
   */
  export type ProcessedProductRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessedProductRecord
     */
    select?: ProcessedProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcessedProductRecordInclude<ExtArgs> | null
    /**
     * Filter, which ProcessedProductRecord to fetch.
     */
    where?: ProcessedProductRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessedProductRecords to fetch.
     */
    orderBy?: ProcessedProductRecordOrderByWithRelationInput | ProcessedProductRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProcessedProductRecords.
     */
    cursor?: ProcessedProductRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessedProductRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessedProductRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProcessedProductRecords.
     */
    distinct?: ProcessedProductRecordScalarFieldEnum | ProcessedProductRecordScalarFieldEnum[]
  }


  /**
   * ProcessedProductRecord findFirstOrThrow
   */
  export type ProcessedProductRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessedProductRecord
     */
    select?: ProcessedProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcessedProductRecordInclude<ExtArgs> | null
    /**
     * Filter, which ProcessedProductRecord to fetch.
     */
    where?: ProcessedProductRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessedProductRecords to fetch.
     */
    orderBy?: ProcessedProductRecordOrderByWithRelationInput | ProcessedProductRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProcessedProductRecords.
     */
    cursor?: ProcessedProductRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessedProductRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessedProductRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProcessedProductRecords.
     */
    distinct?: ProcessedProductRecordScalarFieldEnum | ProcessedProductRecordScalarFieldEnum[]
  }


  /**
   * ProcessedProductRecord findMany
   */
  export type ProcessedProductRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessedProductRecord
     */
    select?: ProcessedProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcessedProductRecordInclude<ExtArgs> | null
    /**
     * Filter, which ProcessedProductRecords to fetch.
     */
    where?: ProcessedProductRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessedProductRecords to fetch.
     */
    orderBy?: ProcessedProductRecordOrderByWithRelationInput | ProcessedProductRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProcessedProductRecords.
     */
    cursor?: ProcessedProductRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessedProductRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessedProductRecords.
     */
    skip?: number
    distinct?: ProcessedProductRecordScalarFieldEnum | ProcessedProductRecordScalarFieldEnum[]
  }


  /**
   * ProcessedProductRecord create
   */
  export type ProcessedProductRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessedProductRecord
     */
    select?: ProcessedProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcessedProductRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a ProcessedProductRecord.
     */
    data: XOR<ProcessedProductRecordCreateInput, ProcessedProductRecordUncheckedCreateInput>
  }


  /**
   * ProcessedProductRecord createMany
   */
  export type ProcessedProductRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProcessedProductRecords.
     */
    data: ProcessedProductRecordCreateManyInput | ProcessedProductRecordCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ProcessedProductRecord update
   */
  export type ProcessedProductRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessedProductRecord
     */
    select?: ProcessedProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcessedProductRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a ProcessedProductRecord.
     */
    data: XOR<ProcessedProductRecordUpdateInput, ProcessedProductRecordUncheckedUpdateInput>
    /**
     * Choose, which ProcessedProductRecord to update.
     */
    where: ProcessedProductRecordWhereUniqueInput
  }


  /**
   * ProcessedProductRecord updateMany
   */
  export type ProcessedProductRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProcessedProductRecords.
     */
    data: XOR<ProcessedProductRecordUpdateManyMutationInput, ProcessedProductRecordUncheckedUpdateManyInput>
    /**
     * Filter which ProcessedProductRecords to update
     */
    where?: ProcessedProductRecordWhereInput
  }


  /**
   * ProcessedProductRecord upsert
   */
  export type ProcessedProductRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessedProductRecord
     */
    select?: ProcessedProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcessedProductRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the ProcessedProductRecord to update in case it exists.
     */
    where: ProcessedProductRecordWhereUniqueInput
    /**
     * In case the ProcessedProductRecord found by the `where` argument doesn't exist, create a new ProcessedProductRecord with this data.
     */
    create: XOR<ProcessedProductRecordCreateInput, ProcessedProductRecordUncheckedCreateInput>
    /**
     * In case the ProcessedProductRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProcessedProductRecordUpdateInput, ProcessedProductRecordUncheckedUpdateInput>
  }


  /**
   * ProcessedProductRecord delete
   */
  export type ProcessedProductRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessedProductRecord
     */
    select?: ProcessedProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcessedProductRecordInclude<ExtArgs> | null
    /**
     * Filter which ProcessedProductRecord to delete.
     */
    where: ProcessedProductRecordWhereUniqueInput
  }


  /**
   * ProcessedProductRecord deleteMany
   */
  export type ProcessedProductRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProcessedProductRecords to delete
     */
    where?: ProcessedProductRecordWhereInput
  }


  /**
   * ProcessedProductRecord without action
   */
  export type ProcessedProductRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessedProductRecord
     */
    select?: ProcessedProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcessedProductRecordInclude<ExtArgs> | null
  }



  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    price: number | null
  }

  export type ProductSumAggregateOutputType = {
    price: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    name: string | null
    slug: string | null
    code: string | null
    imageSrc: string | null
    status: $Enums.ProductStatus | null
    statusLastUpdatedAt: Date | null
    statusAsOf: Date | null
    price: number | null
    priceLastUpdatedAt: Date | null
    priceAsOf: Date | null
    category: $Enums.ProductCategory | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    name: string | null
    slug: string | null
    code: string | null
    imageSrc: string | null
    status: $Enums.ProductStatus | null
    statusLastUpdatedAt: Date | null
    statusAsOf: Date | null
    price: number | null
    priceLastUpdatedAt: Date | null
    priceAsOf: Date | null
    category: $Enums.ProductCategory | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    name: number
    slug: number
    code: number
    imageSrc: number
    status: number
    statusLastUpdatedAt: number
    statusAsOf: number
    price: number
    priceLastUpdatedAt: number
    priceAsOf: number
    category: number
    subCategories: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    price?: true
  }

  export type ProductSumAggregateInputType = {
    price?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    name?: true
    slug?: true
    code?: true
    imageSrc?: true
    status?: true
    statusLastUpdatedAt?: true
    statusAsOf?: true
    price?: true
    priceLastUpdatedAt?: true
    priceAsOf?: true
    category?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    name?: true
    slug?: true
    code?: true
    imageSrc?: true
    status?: true
    statusLastUpdatedAt?: true
    statusAsOf?: true
    price?: true
    priceLastUpdatedAt?: true
    priceAsOf?: true
    category?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    name?: true
    slug?: true
    code?: true
    imageSrc?: true
    status?: true
    statusLastUpdatedAt?: true
    statusAsOf?: true
    price?: true
    priceLastUpdatedAt?: true
    priceAsOf?: true
    category?: true
    subCategories?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    createdById: string
    updatedById: string
    name: string | null
    slug: string
    code: string | null
    imageSrc: string | null
    status: $Enums.ProductStatus | null
    statusLastUpdatedAt: Date | null
    statusAsOf: Date | null
    price: number | null
    priceLastUpdatedAt: Date | null
    priceAsOf: Date | null
    category: $Enums.ProductCategory
    subCategories: $Enums.ProductSubCategory[]
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    name?: boolean
    slug?: boolean
    code?: boolean
    imageSrc?: boolean
    status?: boolean
    statusLastUpdatedAt?: boolean
    statusAsOf?: boolean
    price?: boolean
    priceLastUpdatedAt?: boolean
    priceAsOf?: boolean
    category?: boolean
    subCategories?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    records?: boolean | Product$recordsArgs<ExtArgs>
    subscriptions?: boolean | Product$subscriptionsArgs<ExtArgs>
    newProductNotifications?: boolean | Product$newProductNotificationsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    name?: boolean
    slug?: boolean
    code?: boolean
    imageSrc?: boolean
    status?: boolean
    statusLastUpdatedAt?: boolean
    statusAsOf?: boolean
    price?: boolean
    priceLastUpdatedAt?: boolean
    priceAsOf?: boolean
    category?: boolean
    subCategories?: boolean
  }

  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    records?: boolean | Product$recordsArgs<ExtArgs>
    subscriptions?: boolean | Product$subscriptionsArgs<ExtArgs>
    newProductNotifications?: boolean | Product$newProductNotificationsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      records: Prisma.$ProductRecordPayload<ExtArgs>[]
      subscriptions: Prisma.$ProductSubscriptionPayload<ExtArgs>[]
      newProductNotifications: Prisma.$NewProductNotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      createdById: string
      updatedById: string
      name: string | null
      slug: string
      code: string | null
      imageSrc: string | null
      status: $Enums.ProductStatus | null
      statusLastUpdatedAt: Date | null
      statusAsOf: Date | null
      price: number | null
      priceLastUpdatedAt: Date | null
      priceAsOf: Date | null
      category: $Enums.ProductCategory
      subCategories: $Enums.ProductSubCategory[]
    }, ExtArgs["result"]["product"]>
    composites: {}
  }


  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductCreateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    records<T extends Product$recordsArgs<ExtArgs> = {}>(args?: Subset<T, Product$recordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductRecordPayload<ExtArgs>, T, 'findMany'> | Null>;

    subscriptions<T extends Product$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Product$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductSubscriptionPayload<ExtArgs>, T, 'findMany'> | Null>;

    newProductNotifications<T extends Product$newProductNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, Product$newProductNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewProductNotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
    readonly createdById: FieldRef<"Product", 'String'>
    readonly updatedById: FieldRef<"Product", 'String'>
    readonly name: FieldRef<"Product", 'String'>
    readonly slug: FieldRef<"Product", 'String'>
    readonly code: FieldRef<"Product", 'String'>
    readonly imageSrc: FieldRef<"Product", 'String'>
    readonly status: FieldRef<"Product", 'ProductStatus'>
    readonly statusLastUpdatedAt: FieldRef<"Product", 'DateTime'>
    readonly statusAsOf: FieldRef<"Product", 'DateTime'>
    readonly price: FieldRef<"Product", 'Float'>
    readonly priceLastUpdatedAt: FieldRef<"Product", 'DateTime'>
    readonly priceAsOf: FieldRef<"Product", 'DateTime'>
    readonly category: FieldRef<"Product", 'ProductCategory'>
    readonly subCategories: FieldRef<"Product", 'ProductSubCategory[]'>
  }
    

  // Custom InputTypes

  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }


  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }


  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }


  /**
   * Product.records
   */
  export type Product$recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductRecord
     */
    select?: ProductRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductRecordInclude<ExtArgs> | null
    where?: ProductRecordWhereInput
    orderBy?: ProductRecordOrderByWithRelationInput | ProductRecordOrderByWithRelationInput[]
    cursor?: ProductRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductRecordScalarFieldEnum | ProductRecordScalarFieldEnum[]
  }


  /**
   * Product.subscriptions
   */
  export type Product$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSubscription
     */
    select?: ProductSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSubscriptionInclude<ExtArgs> | null
    where?: ProductSubscriptionWhereInput
    orderBy?: ProductSubscriptionOrderByWithRelationInput | ProductSubscriptionOrderByWithRelationInput[]
    cursor?: ProductSubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductSubscriptionScalarFieldEnum | ProductSubscriptionScalarFieldEnum[]
  }


  /**
   * Product.newProductNotifications
   */
  export type Product$newProductNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewProductNotification
     */
    select?: NewProductNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewProductNotificationInclude<ExtArgs> | null
    where?: NewProductNotificationWhereInput
    orderBy?: NewProductNotificationOrderByWithRelationInput | NewProductNotificationOrderByWithRelationInput[]
    cursor?: NewProductNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NewProductNotificationScalarFieldEnum | NewProductNotificationScalarFieldEnum[]
  }


  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
  }



  /**
   * Model ProductSubscription
   */

  export type AggregateProductSubscription = {
    _count: ProductSubscriptionCountAggregateOutputType | null
    _min: ProductSubscriptionMinAggregateOutputType | null
    _max: ProductSubscriptionMaxAggregateOutputType | null
  }

  export type ProductSubscriptionMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    subscriptionType: $Enums.SubscriptionType | null
    userId: string | null
    productId: string | null
    enabled: boolean | null
  }

  export type ProductSubscriptionMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    subscriptionType: $Enums.SubscriptionType | null
    userId: string | null
    productId: string | null
    enabled: boolean | null
  }

  export type ProductSubscriptionCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    subscriptionType: number
    userId: number
    productId: number
    enabled: number
    _all: number
  }


  export type ProductSubscriptionMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    subscriptionType?: true
    userId?: true
    productId?: true
    enabled?: true
  }

  export type ProductSubscriptionMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    subscriptionType?: true
    userId?: true
    productId?: true
    enabled?: true
  }

  export type ProductSubscriptionCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    subscriptionType?: true
    userId?: true
    productId?: true
    enabled?: true
    _all?: true
  }

  export type ProductSubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductSubscription to aggregate.
     */
    where?: ProductSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSubscriptions to fetch.
     */
    orderBy?: ProductSubscriptionOrderByWithRelationInput | ProductSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductSubscriptions
    **/
    _count?: true | ProductSubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductSubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductSubscriptionMaxAggregateInputType
  }

  export type GetProductSubscriptionAggregateType<T extends ProductSubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateProductSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductSubscription[P]>
      : GetScalarType<T[P], AggregateProductSubscription[P]>
  }




  export type ProductSubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductSubscriptionWhereInput
    orderBy?: ProductSubscriptionOrderByWithAggregationInput | ProductSubscriptionOrderByWithAggregationInput[]
    by: ProductSubscriptionScalarFieldEnum[] | ProductSubscriptionScalarFieldEnum
    having?: ProductSubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductSubscriptionCountAggregateInputType | true
    _min?: ProductSubscriptionMinAggregateInputType
    _max?: ProductSubscriptionMaxAggregateInputType
  }

  export type ProductSubscriptionGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    createdById: string
    updatedById: string
    subscriptionType: $Enums.SubscriptionType
    userId: string
    productId: string
    enabled: boolean
    _count: ProductSubscriptionCountAggregateOutputType | null
    _min: ProductSubscriptionMinAggregateOutputType | null
    _max: ProductSubscriptionMaxAggregateOutputType | null
  }

  type GetProductSubscriptionGroupByPayload<T extends ProductSubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductSubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductSubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductSubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], ProductSubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type ProductSubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    subscriptionType?: boolean
    userId?: boolean
    productId?: boolean
    enabled?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    delegate_aux_statusChangeSubscription?: boolean | ProductSubscription$delegate_aux_statusChangeSubscriptionArgs<ExtArgs>
    delegate_aux_priceChangeSubscription?: boolean | ProductSubscription$delegate_aux_priceChangeSubscriptionArgs<ExtArgs>
  }, ExtArgs["result"]["productSubscription"]>

  export type ProductSubscriptionSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    subscriptionType?: boolean
    userId?: boolean
    productId?: boolean
    enabled?: boolean
  }

  export type ProductSubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    delegate_aux_statusChangeSubscription?: boolean | ProductSubscription$delegate_aux_statusChangeSubscriptionArgs<ExtArgs>
    delegate_aux_priceChangeSubscription?: boolean | ProductSubscription$delegate_aux_priceChangeSubscriptionArgs<ExtArgs>
  }


  export type $ProductSubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductSubscription"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
      delegate_aux_statusChangeSubscription: Prisma.$StatusChangeSubscriptionPayload<ExtArgs> | null
      delegate_aux_priceChangeSubscription: Prisma.$PriceChangeSubscriptionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      createdById: string
      updatedById: string
      subscriptionType: $Enums.SubscriptionType
      userId: string
      productId: string
      enabled: boolean
    }, ExtArgs["result"]["productSubscription"]>
    composites: {}
  }


  type ProductSubscriptionGetPayload<S extends boolean | null | undefined | ProductSubscriptionDefaultArgs> = $Result.GetResult<Prisma.$ProductSubscriptionPayload, S>

  type ProductSubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductSubscriptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductSubscriptionCountAggregateInputType | true
    }

  export interface ProductSubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductSubscription'], meta: { name: 'ProductSubscription' } }
    /**
     * Find zero or one ProductSubscription that matches the filter.
     * @param {ProductSubscriptionFindUniqueArgs} args - Arguments to find a ProductSubscription
     * @example
     * // Get one ProductSubscription
     * const productSubscription = await prisma.productSubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductSubscriptionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductSubscriptionFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductSubscriptionClient<$Result.GetResult<Prisma.$ProductSubscriptionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProductSubscription that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductSubscriptionFindUniqueOrThrowArgs} args - Arguments to find a ProductSubscription
     * @example
     * // Get one ProductSubscription
     * const productSubscription = await prisma.productSubscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductSubscriptionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductSubscriptionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductSubscriptionClient<$Result.GetResult<Prisma.$ProductSubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProductSubscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSubscriptionFindFirstArgs} args - Arguments to find a ProductSubscription
     * @example
     * // Get one ProductSubscription
     * const productSubscription = await prisma.productSubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductSubscriptionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductSubscriptionFindFirstArgs<ExtArgs>>
    ): Prisma__ProductSubscriptionClient<$Result.GetResult<Prisma.$ProductSubscriptionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProductSubscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSubscriptionFindFirstOrThrowArgs} args - Arguments to find a ProductSubscription
     * @example
     * // Get one ProductSubscription
     * const productSubscription = await prisma.productSubscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductSubscriptionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductSubscriptionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductSubscriptionClient<$Result.GetResult<Prisma.$ProductSubscriptionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProductSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSubscriptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductSubscriptions
     * const productSubscriptions = await prisma.productSubscription.findMany()
     * 
     * // Get first 10 ProductSubscriptions
     * const productSubscriptions = await prisma.productSubscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productSubscriptionWithIdOnly = await prisma.productSubscription.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductSubscriptionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductSubscriptionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductSubscriptionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProductSubscription.
     * @param {ProductSubscriptionCreateArgs} args - Arguments to create a ProductSubscription.
     * @example
     * // Create one ProductSubscription
     * const ProductSubscription = await prisma.productSubscription.create({
     *   data: {
     *     // ... data to create a ProductSubscription
     *   }
     * })
     * 
    **/
    create<T extends ProductSubscriptionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductSubscriptionCreateArgs<ExtArgs>>
    ): Prisma__ProductSubscriptionClient<$Result.GetResult<Prisma.$ProductSubscriptionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProductSubscriptions.
     *     @param {ProductSubscriptionCreateManyArgs} args - Arguments to create many ProductSubscriptions.
     *     @example
     *     // Create many ProductSubscriptions
     *     const productSubscription = await prisma.productSubscription.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductSubscriptionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductSubscriptionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductSubscription.
     * @param {ProductSubscriptionDeleteArgs} args - Arguments to delete one ProductSubscription.
     * @example
     * // Delete one ProductSubscription
     * const ProductSubscription = await prisma.productSubscription.delete({
     *   where: {
     *     // ... filter to delete one ProductSubscription
     *   }
     * })
     * 
    **/
    delete<T extends ProductSubscriptionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductSubscriptionDeleteArgs<ExtArgs>>
    ): Prisma__ProductSubscriptionClient<$Result.GetResult<Prisma.$ProductSubscriptionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProductSubscription.
     * @param {ProductSubscriptionUpdateArgs} args - Arguments to update one ProductSubscription.
     * @example
     * // Update one ProductSubscription
     * const productSubscription = await prisma.productSubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductSubscriptionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductSubscriptionUpdateArgs<ExtArgs>>
    ): Prisma__ProductSubscriptionClient<$Result.GetResult<Prisma.$ProductSubscriptionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProductSubscriptions.
     * @param {ProductSubscriptionDeleteManyArgs} args - Arguments to filter ProductSubscriptions to delete.
     * @example
     * // Delete a few ProductSubscriptions
     * const { count } = await prisma.productSubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductSubscriptionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductSubscriptionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductSubscriptions
     * const productSubscription = await prisma.productSubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductSubscriptionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductSubscriptionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductSubscription.
     * @param {ProductSubscriptionUpsertArgs} args - Arguments to update or create a ProductSubscription.
     * @example
     * // Update or create a ProductSubscription
     * const productSubscription = await prisma.productSubscription.upsert({
     *   create: {
     *     // ... data to create a ProductSubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductSubscription we want to update
     *   }
     * })
    **/
    upsert<T extends ProductSubscriptionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductSubscriptionUpsertArgs<ExtArgs>>
    ): Prisma__ProductSubscriptionClient<$Result.GetResult<Prisma.$ProductSubscriptionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProductSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSubscriptionCountArgs} args - Arguments to filter ProductSubscriptions to count.
     * @example
     * // Count the number of ProductSubscriptions
     * const count = await prisma.productSubscription.count({
     *   where: {
     *     // ... the filter for the ProductSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends ProductSubscriptionCountArgs>(
      args?: Subset<T, ProductSubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductSubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductSubscriptionAggregateArgs>(args: Subset<T, ProductSubscriptionAggregateArgs>): Prisma.PrismaPromise<GetProductSubscriptionAggregateType<T>>

    /**
     * Group by ProductSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductSubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductSubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: ProductSubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductSubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductSubscription model
   */
  readonly fields: ProductSubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductSubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductSubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    delegate_aux_statusChangeSubscription<T extends ProductSubscription$delegate_aux_statusChangeSubscriptionArgs<ExtArgs> = {}>(args?: Subset<T, ProductSubscription$delegate_aux_statusChangeSubscriptionArgs<ExtArgs>>): Prisma__StatusChangeSubscriptionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    delegate_aux_priceChangeSubscription<T extends ProductSubscription$delegate_aux_priceChangeSubscriptionArgs<ExtArgs> = {}>(args?: Subset<T, ProductSubscription$delegate_aux_priceChangeSubscriptionArgs<ExtArgs>>): Prisma__PriceChangeSubscriptionClient<$Result.GetResult<Prisma.$PriceChangeSubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ProductSubscription model
   */ 
  interface ProductSubscriptionFieldRefs {
    readonly id: FieldRef<"ProductSubscription", 'String'>
    readonly createdAt: FieldRef<"ProductSubscription", 'DateTime'>
    readonly updatedAt: FieldRef<"ProductSubscription", 'DateTime'>
    readonly createdById: FieldRef<"ProductSubscription", 'String'>
    readonly updatedById: FieldRef<"ProductSubscription", 'String'>
    readonly subscriptionType: FieldRef<"ProductSubscription", 'SubscriptionType'>
    readonly userId: FieldRef<"ProductSubscription", 'String'>
    readonly productId: FieldRef<"ProductSubscription", 'String'>
    readonly enabled: FieldRef<"ProductSubscription", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * ProductSubscription findUnique
   */
  export type ProductSubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSubscription
     */
    select?: ProductSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which ProductSubscription to fetch.
     */
    where: ProductSubscriptionWhereUniqueInput
  }


  /**
   * ProductSubscription findUniqueOrThrow
   */
  export type ProductSubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSubscription
     */
    select?: ProductSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which ProductSubscription to fetch.
     */
    where: ProductSubscriptionWhereUniqueInput
  }


  /**
   * ProductSubscription findFirst
   */
  export type ProductSubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSubscription
     */
    select?: ProductSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which ProductSubscription to fetch.
     */
    where?: ProductSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSubscriptions to fetch.
     */
    orderBy?: ProductSubscriptionOrderByWithRelationInput | ProductSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductSubscriptions.
     */
    cursor?: ProductSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductSubscriptions.
     */
    distinct?: ProductSubscriptionScalarFieldEnum | ProductSubscriptionScalarFieldEnum[]
  }


  /**
   * ProductSubscription findFirstOrThrow
   */
  export type ProductSubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSubscription
     */
    select?: ProductSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which ProductSubscription to fetch.
     */
    where?: ProductSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSubscriptions to fetch.
     */
    orderBy?: ProductSubscriptionOrderByWithRelationInput | ProductSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductSubscriptions.
     */
    cursor?: ProductSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductSubscriptions.
     */
    distinct?: ProductSubscriptionScalarFieldEnum | ProductSubscriptionScalarFieldEnum[]
  }


  /**
   * ProductSubscription findMany
   */
  export type ProductSubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSubscription
     */
    select?: ProductSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which ProductSubscriptions to fetch.
     */
    where?: ProductSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSubscriptions to fetch.
     */
    orderBy?: ProductSubscriptionOrderByWithRelationInput | ProductSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductSubscriptions.
     */
    cursor?: ProductSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSubscriptions.
     */
    skip?: number
    distinct?: ProductSubscriptionScalarFieldEnum | ProductSubscriptionScalarFieldEnum[]
  }


  /**
   * ProductSubscription create
   */
  export type ProductSubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSubscription
     */
    select?: ProductSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductSubscription.
     */
    data: XOR<ProductSubscriptionCreateInput, ProductSubscriptionUncheckedCreateInput>
  }


  /**
   * ProductSubscription createMany
   */
  export type ProductSubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductSubscriptions.
     */
    data: ProductSubscriptionCreateManyInput | ProductSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ProductSubscription update
   */
  export type ProductSubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSubscription
     */
    select?: ProductSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductSubscription.
     */
    data: XOR<ProductSubscriptionUpdateInput, ProductSubscriptionUncheckedUpdateInput>
    /**
     * Choose, which ProductSubscription to update.
     */
    where: ProductSubscriptionWhereUniqueInput
  }


  /**
   * ProductSubscription updateMany
   */
  export type ProductSubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductSubscriptions.
     */
    data: XOR<ProductSubscriptionUpdateManyMutationInput, ProductSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which ProductSubscriptions to update
     */
    where?: ProductSubscriptionWhereInput
  }


  /**
   * ProductSubscription upsert
   */
  export type ProductSubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSubscription
     */
    select?: ProductSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductSubscription to update in case it exists.
     */
    where: ProductSubscriptionWhereUniqueInput
    /**
     * In case the ProductSubscription found by the `where` argument doesn't exist, create a new ProductSubscription with this data.
     */
    create: XOR<ProductSubscriptionCreateInput, ProductSubscriptionUncheckedCreateInput>
    /**
     * In case the ProductSubscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductSubscriptionUpdateInput, ProductSubscriptionUncheckedUpdateInput>
  }


  /**
   * ProductSubscription delete
   */
  export type ProductSubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSubscription
     */
    select?: ProductSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSubscriptionInclude<ExtArgs> | null
    /**
     * Filter which ProductSubscription to delete.
     */
    where: ProductSubscriptionWhereUniqueInput
  }


  /**
   * ProductSubscription deleteMany
   */
  export type ProductSubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductSubscriptions to delete
     */
    where?: ProductSubscriptionWhereInput
  }


  /**
   * ProductSubscription.delegate_aux_statusChangeSubscription
   */
  export type ProductSubscription$delegate_aux_statusChangeSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscription
     */
    select?: StatusChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionInclude<ExtArgs> | null
    where?: StatusChangeSubscriptionWhereInput
  }


  /**
   * ProductSubscription.delegate_aux_priceChangeSubscription
   */
  export type ProductSubscription$delegate_aux_priceChangeSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeSubscription
     */
    select?: PriceChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeSubscriptionInclude<ExtArgs> | null
    where?: PriceChangeSubscriptionWhereInput
  }


  /**
   * ProductSubscription without action
   */
  export type ProductSubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSubscription
     */
    select?: ProductSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductSubscriptionInclude<ExtArgs> | null
  }



  /**
   * Model StatusChangeSubscriptionCondition
   */

  export type AggregateStatusChangeSubscriptionCondition = {
    _count: StatusChangeSubscriptionConditionCountAggregateOutputType | null
    _min: StatusChangeSubscriptionConditionMinAggregateOutputType | null
    _max: StatusChangeSubscriptionConditionMaxAggregateOutputType | null
  }

  export type StatusChangeSubscriptionConditionMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    subscriptionId: string | null
  }

  export type StatusChangeSubscriptionConditionMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    subscriptionId: string | null
  }

  export type StatusChangeSubscriptionConditionCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    fromStatus: number
    toStatus: number
    subscriptionId: number
    _all: number
  }


  export type StatusChangeSubscriptionConditionMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subscriptionId?: true
  }

  export type StatusChangeSubscriptionConditionMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subscriptionId?: true
  }

  export type StatusChangeSubscriptionConditionCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    fromStatus?: true
    toStatus?: true
    subscriptionId?: true
    _all?: true
  }

  export type StatusChangeSubscriptionConditionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusChangeSubscriptionCondition to aggregate.
     */
    where?: StatusChangeSubscriptionConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusChangeSubscriptionConditions to fetch.
     */
    orderBy?: StatusChangeSubscriptionConditionOrderByWithRelationInput | StatusChangeSubscriptionConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusChangeSubscriptionConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusChangeSubscriptionConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusChangeSubscriptionConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StatusChangeSubscriptionConditions
    **/
    _count?: true | StatusChangeSubscriptionConditionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusChangeSubscriptionConditionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusChangeSubscriptionConditionMaxAggregateInputType
  }

  export type GetStatusChangeSubscriptionConditionAggregateType<T extends StatusChangeSubscriptionConditionAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusChangeSubscriptionCondition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusChangeSubscriptionCondition[P]>
      : GetScalarType<T[P], AggregateStatusChangeSubscriptionCondition[P]>
  }




  export type StatusChangeSubscriptionConditionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusChangeSubscriptionConditionWhereInput
    orderBy?: StatusChangeSubscriptionConditionOrderByWithAggregationInput | StatusChangeSubscriptionConditionOrderByWithAggregationInput[]
    by: StatusChangeSubscriptionConditionScalarFieldEnum[] | StatusChangeSubscriptionConditionScalarFieldEnum
    having?: StatusChangeSubscriptionConditionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusChangeSubscriptionConditionCountAggregateInputType | true
    _min?: StatusChangeSubscriptionConditionMinAggregateInputType
    _max?: StatusChangeSubscriptionConditionMaxAggregateInputType
  }

  export type StatusChangeSubscriptionConditionGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    fromStatus: $Enums.ProductStatus[]
    toStatus: $Enums.ProductStatus[]
    subscriptionId: string
    _count: StatusChangeSubscriptionConditionCountAggregateOutputType | null
    _min: StatusChangeSubscriptionConditionMinAggregateOutputType | null
    _max: StatusChangeSubscriptionConditionMaxAggregateOutputType | null
  }

  type GetStatusChangeSubscriptionConditionGroupByPayload<T extends StatusChangeSubscriptionConditionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusChangeSubscriptionConditionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusChangeSubscriptionConditionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusChangeSubscriptionConditionGroupByOutputType[P]>
            : GetScalarType<T[P], StatusChangeSubscriptionConditionGroupByOutputType[P]>
        }
      >
    >


  export type StatusChangeSubscriptionConditionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fromStatus?: boolean
    toStatus?: boolean
    subscriptionId?: boolean
    subscription?: boolean | StatusChangeSubscriptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusChangeSubscriptionCondition"]>

  export type StatusChangeSubscriptionConditionSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fromStatus?: boolean
    toStatus?: boolean
    subscriptionId?: boolean
  }

  export type StatusChangeSubscriptionConditionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscription?: boolean | StatusChangeSubscriptionDefaultArgs<ExtArgs>
  }


  export type $StatusChangeSubscriptionConditionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StatusChangeSubscriptionCondition"
    objects: {
      subscription: Prisma.$StatusChangeSubscriptionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      fromStatus: $Enums.ProductStatus[]
      toStatus: $Enums.ProductStatus[]
      subscriptionId: string
    }, ExtArgs["result"]["statusChangeSubscriptionCondition"]>
    composites: {}
  }


  type StatusChangeSubscriptionConditionGetPayload<S extends boolean | null | undefined | StatusChangeSubscriptionConditionDefaultArgs> = $Result.GetResult<Prisma.$StatusChangeSubscriptionConditionPayload, S>

  type StatusChangeSubscriptionConditionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StatusChangeSubscriptionConditionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StatusChangeSubscriptionConditionCountAggregateInputType | true
    }

  export interface StatusChangeSubscriptionConditionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StatusChangeSubscriptionCondition'], meta: { name: 'StatusChangeSubscriptionCondition' } }
    /**
     * Find zero or one StatusChangeSubscriptionCondition that matches the filter.
     * @param {StatusChangeSubscriptionConditionFindUniqueArgs} args - Arguments to find a StatusChangeSubscriptionCondition
     * @example
     * // Get one StatusChangeSubscriptionCondition
     * const statusChangeSubscriptionCondition = await prisma.statusChangeSubscriptionCondition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatusChangeSubscriptionConditionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeSubscriptionConditionFindUniqueArgs<ExtArgs>>
    ): Prisma__StatusChangeSubscriptionConditionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionConditionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StatusChangeSubscriptionCondition that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StatusChangeSubscriptionConditionFindUniqueOrThrowArgs} args - Arguments to find a StatusChangeSubscriptionCondition
     * @example
     * // Get one StatusChangeSubscriptionCondition
     * const statusChangeSubscriptionCondition = await prisma.statusChangeSubscriptionCondition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StatusChangeSubscriptionConditionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeSubscriptionConditionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StatusChangeSubscriptionConditionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionConditionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StatusChangeSubscriptionCondition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeSubscriptionConditionFindFirstArgs} args - Arguments to find a StatusChangeSubscriptionCondition
     * @example
     * // Get one StatusChangeSubscriptionCondition
     * const statusChangeSubscriptionCondition = await prisma.statusChangeSubscriptionCondition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatusChangeSubscriptionConditionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeSubscriptionConditionFindFirstArgs<ExtArgs>>
    ): Prisma__StatusChangeSubscriptionConditionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionConditionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StatusChangeSubscriptionCondition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeSubscriptionConditionFindFirstOrThrowArgs} args - Arguments to find a StatusChangeSubscriptionCondition
     * @example
     * // Get one StatusChangeSubscriptionCondition
     * const statusChangeSubscriptionCondition = await prisma.statusChangeSubscriptionCondition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StatusChangeSubscriptionConditionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeSubscriptionConditionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StatusChangeSubscriptionConditionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionConditionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StatusChangeSubscriptionConditions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeSubscriptionConditionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusChangeSubscriptionConditions
     * const statusChangeSubscriptionConditions = await prisma.statusChangeSubscriptionCondition.findMany()
     * 
     * // Get first 10 StatusChangeSubscriptionConditions
     * const statusChangeSubscriptionConditions = await prisma.statusChangeSubscriptionCondition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusChangeSubscriptionConditionWithIdOnly = await prisma.statusChangeSubscriptionCondition.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatusChangeSubscriptionConditionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeSubscriptionConditionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusChangeSubscriptionConditionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StatusChangeSubscriptionCondition.
     * @param {StatusChangeSubscriptionConditionCreateArgs} args - Arguments to create a StatusChangeSubscriptionCondition.
     * @example
     * // Create one StatusChangeSubscriptionCondition
     * const StatusChangeSubscriptionCondition = await prisma.statusChangeSubscriptionCondition.create({
     *   data: {
     *     // ... data to create a StatusChangeSubscriptionCondition
     *   }
     * })
     * 
    **/
    create<T extends StatusChangeSubscriptionConditionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeSubscriptionConditionCreateArgs<ExtArgs>>
    ): Prisma__StatusChangeSubscriptionConditionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionConditionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StatusChangeSubscriptionConditions.
     *     @param {StatusChangeSubscriptionConditionCreateManyArgs} args - Arguments to create many StatusChangeSubscriptionConditions.
     *     @example
     *     // Create many StatusChangeSubscriptionConditions
     *     const statusChangeSubscriptionCondition = await prisma.statusChangeSubscriptionCondition.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatusChangeSubscriptionConditionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeSubscriptionConditionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StatusChangeSubscriptionCondition.
     * @param {StatusChangeSubscriptionConditionDeleteArgs} args - Arguments to delete one StatusChangeSubscriptionCondition.
     * @example
     * // Delete one StatusChangeSubscriptionCondition
     * const StatusChangeSubscriptionCondition = await prisma.statusChangeSubscriptionCondition.delete({
     *   where: {
     *     // ... filter to delete one StatusChangeSubscriptionCondition
     *   }
     * })
     * 
    **/
    delete<T extends StatusChangeSubscriptionConditionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeSubscriptionConditionDeleteArgs<ExtArgs>>
    ): Prisma__StatusChangeSubscriptionConditionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionConditionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StatusChangeSubscriptionCondition.
     * @param {StatusChangeSubscriptionConditionUpdateArgs} args - Arguments to update one StatusChangeSubscriptionCondition.
     * @example
     * // Update one StatusChangeSubscriptionCondition
     * const statusChangeSubscriptionCondition = await prisma.statusChangeSubscriptionCondition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatusChangeSubscriptionConditionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeSubscriptionConditionUpdateArgs<ExtArgs>>
    ): Prisma__StatusChangeSubscriptionConditionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionConditionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StatusChangeSubscriptionConditions.
     * @param {StatusChangeSubscriptionConditionDeleteManyArgs} args - Arguments to filter StatusChangeSubscriptionConditions to delete.
     * @example
     * // Delete a few StatusChangeSubscriptionConditions
     * const { count } = await prisma.statusChangeSubscriptionCondition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatusChangeSubscriptionConditionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeSubscriptionConditionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusChangeSubscriptionConditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeSubscriptionConditionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusChangeSubscriptionConditions
     * const statusChangeSubscriptionCondition = await prisma.statusChangeSubscriptionCondition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatusChangeSubscriptionConditionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeSubscriptionConditionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StatusChangeSubscriptionCondition.
     * @param {StatusChangeSubscriptionConditionUpsertArgs} args - Arguments to update or create a StatusChangeSubscriptionCondition.
     * @example
     * // Update or create a StatusChangeSubscriptionCondition
     * const statusChangeSubscriptionCondition = await prisma.statusChangeSubscriptionCondition.upsert({
     *   create: {
     *     // ... data to create a StatusChangeSubscriptionCondition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusChangeSubscriptionCondition we want to update
     *   }
     * })
    **/
    upsert<T extends StatusChangeSubscriptionConditionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeSubscriptionConditionUpsertArgs<ExtArgs>>
    ): Prisma__StatusChangeSubscriptionConditionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionConditionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StatusChangeSubscriptionConditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeSubscriptionConditionCountArgs} args - Arguments to filter StatusChangeSubscriptionConditions to count.
     * @example
     * // Count the number of StatusChangeSubscriptionConditions
     * const count = await prisma.statusChangeSubscriptionCondition.count({
     *   where: {
     *     // ... the filter for the StatusChangeSubscriptionConditions we want to count
     *   }
     * })
    **/
    count<T extends StatusChangeSubscriptionConditionCountArgs>(
      args?: Subset<T, StatusChangeSubscriptionConditionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusChangeSubscriptionConditionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusChangeSubscriptionCondition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeSubscriptionConditionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusChangeSubscriptionConditionAggregateArgs>(args: Subset<T, StatusChangeSubscriptionConditionAggregateArgs>): Prisma.PrismaPromise<GetStatusChangeSubscriptionConditionAggregateType<T>>

    /**
     * Group by StatusChangeSubscriptionCondition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeSubscriptionConditionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusChangeSubscriptionConditionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusChangeSubscriptionConditionGroupByArgs['orderBy'] }
        : { orderBy?: StatusChangeSubscriptionConditionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusChangeSubscriptionConditionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusChangeSubscriptionConditionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StatusChangeSubscriptionCondition model
   */
  readonly fields: StatusChangeSubscriptionConditionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StatusChangeSubscriptionCondition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusChangeSubscriptionConditionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    subscription<T extends StatusChangeSubscriptionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StatusChangeSubscriptionDefaultArgs<ExtArgs>>): Prisma__StatusChangeSubscriptionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the StatusChangeSubscriptionCondition model
   */ 
  interface StatusChangeSubscriptionConditionFieldRefs {
    readonly id: FieldRef<"StatusChangeSubscriptionCondition", 'String'>
    readonly createdAt: FieldRef<"StatusChangeSubscriptionCondition", 'DateTime'>
    readonly updatedAt: FieldRef<"StatusChangeSubscriptionCondition", 'DateTime'>
    readonly fromStatus: FieldRef<"StatusChangeSubscriptionCondition", 'ProductStatus[]'>
    readonly toStatus: FieldRef<"StatusChangeSubscriptionCondition", 'ProductStatus[]'>
    readonly subscriptionId: FieldRef<"StatusChangeSubscriptionCondition", 'String'>
  }
    

  // Custom InputTypes

  /**
   * StatusChangeSubscriptionCondition findUnique
   */
  export type StatusChangeSubscriptionConditionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscriptionCondition
     */
    select?: StatusChangeSubscriptionConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionConditionInclude<ExtArgs> | null
    /**
     * Filter, which StatusChangeSubscriptionCondition to fetch.
     */
    where: StatusChangeSubscriptionConditionWhereUniqueInput
  }


  /**
   * StatusChangeSubscriptionCondition findUniqueOrThrow
   */
  export type StatusChangeSubscriptionConditionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscriptionCondition
     */
    select?: StatusChangeSubscriptionConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionConditionInclude<ExtArgs> | null
    /**
     * Filter, which StatusChangeSubscriptionCondition to fetch.
     */
    where: StatusChangeSubscriptionConditionWhereUniqueInput
  }


  /**
   * StatusChangeSubscriptionCondition findFirst
   */
  export type StatusChangeSubscriptionConditionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscriptionCondition
     */
    select?: StatusChangeSubscriptionConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionConditionInclude<ExtArgs> | null
    /**
     * Filter, which StatusChangeSubscriptionCondition to fetch.
     */
    where?: StatusChangeSubscriptionConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusChangeSubscriptionConditions to fetch.
     */
    orderBy?: StatusChangeSubscriptionConditionOrderByWithRelationInput | StatusChangeSubscriptionConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusChangeSubscriptionConditions.
     */
    cursor?: StatusChangeSubscriptionConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusChangeSubscriptionConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusChangeSubscriptionConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusChangeSubscriptionConditions.
     */
    distinct?: StatusChangeSubscriptionConditionScalarFieldEnum | StatusChangeSubscriptionConditionScalarFieldEnum[]
  }


  /**
   * StatusChangeSubscriptionCondition findFirstOrThrow
   */
  export type StatusChangeSubscriptionConditionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscriptionCondition
     */
    select?: StatusChangeSubscriptionConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionConditionInclude<ExtArgs> | null
    /**
     * Filter, which StatusChangeSubscriptionCondition to fetch.
     */
    where?: StatusChangeSubscriptionConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusChangeSubscriptionConditions to fetch.
     */
    orderBy?: StatusChangeSubscriptionConditionOrderByWithRelationInput | StatusChangeSubscriptionConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusChangeSubscriptionConditions.
     */
    cursor?: StatusChangeSubscriptionConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusChangeSubscriptionConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusChangeSubscriptionConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusChangeSubscriptionConditions.
     */
    distinct?: StatusChangeSubscriptionConditionScalarFieldEnum | StatusChangeSubscriptionConditionScalarFieldEnum[]
  }


  /**
   * StatusChangeSubscriptionCondition findMany
   */
  export type StatusChangeSubscriptionConditionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscriptionCondition
     */
    select?: StatusChangeSubscriptionConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionConditionInclude<ExtArgs> | null
    /**
     * Filter, which StatusChangeSubscriptionConditions to fetch.
     */
    where?: StatusChangeSubscriptionConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusChangeSubscriptionConditions to fetch.
     */
    orderBy?: StatusChangeSubscriptionConditionOrderByWithRelationInput | StatusChangeSubscriptionConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StatusChangeSubscriptionConditions.
     */
    cursor?: StatusChangeSubscriptionConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusChangeSubscriptionConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusChangeSubscriptionConditions.
     */
    skip?: number
    distinct?: StatusChangeSubscriptionConditionScalarFieldEnum | StatusChangeSubscriptionConditionScalarFieldEnum[]
  }


  /**
   * StatusChangeSubscriptionCondition create
   */
  export type StatusChangeSubscriptionConditionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscriptionCondition
     */
    select?: StatusChangeSubscriptionConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionConditionInclude<ExtArgs> | null
    /**
     * The data needed to create a StatusChangeSubscriptionCondition.
     */
    data: XOR<StatusChangeSubscriptionConditionCreateInput, StatusChangeSubscriptionConditionUncheckedCreateInput>
  }


  /**
   * StatusChangeSubscriptionCondition createMany
   */
  export type StatusChangeSubscriptionConditionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StatusChangeSubscriptionConditions.
     */
    data: StatusChangeSubscriptionConditionCreateManyInput | StatusChangeSubscriptionConditionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * StatusChangeSubscriptionCondition update
   */
  export type StatusChangeSubscriptionConditionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscriptionCondition
     */
    select?: StatusChangeSubscriptionConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionConditionInclude<ExtArgs> | null
    /**
     * The data needed to update a StatusChangeSubscriptionCondition.
     */
    data: XOR<StatusChangeSubscriptionConditionUpdateInput, StatusChangeSubscriptionConditionUncheckedUpdateInput>
    /**
     * Choose, which StatusChangeSubscriptionCondition to update.
     */
    where: StatusChangeSubscriptionConditionWhereUniqueInput
  }


  /**
   * StatusChangeSubscriptionCondition updateMany
   */
  export type StatusChangeSubscriptionConditionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StatusChangeSubscriptionConditions.
     */
    data: XOR<StatusChangeSubscriptionConditionUpdateManyMutationInput, StatusChangeSubscriptionConditionUncheckedUpdateManyInput>
    /**
     * Filter which StatusChangeSubscriptionConditions to update
     */
    where?: StatusChangeSubscriptionConditionWhereInput
  }


  /**
   * StatusChangeSubscriptionCondition upsert
   */
  export type StatusChangeSubscriptionConditionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscriptionCondition
     */
    select?: StatusChangeSubscriptionConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionConditionInclude<ExtArgs> | null
    /**
     * The filter to search for the StatusChangeSubscriptionCondition to update in case it exists.
     */
    where: StatusChangeSubscriptionConditionWhereUniqueInput
    /**
     * In case the StatusChangeSubscriptionCondition found by the `where` argument doesn't exist, create a new StatusChangeSubscriptionCondition with this data.
     */
    create: XOR<StatusChangeSubscriptionConditionCreateInput, StatusChangeSubscriptionConditionUncheckedCreateInput>
    /**
     * In case the StatusChangeSubscriptionCondition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusChangeSubscriptionConditionUpdateInput, StatusChangeSubscriptionConditionUncheckedUpdateInput>
  }


  /**
   * StatusChangeSubscriptionCondition delete
   */
  export type StatusChangeSubscriptionConditionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscriptionCondition
     */
    select?: StatusChangeSubscriptionConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionConditionInclude<ExtArgs> | null
    /**
     * Filter which StatusChangeSubscriptionCondition to delete.
     */
    where: StatusChangeSubscriptionConditionWhereUniqueInput
  }


  /**
   * StatusChangeSubscriptionCondition deleteMany
   */
  export type StatusChangeSubscriptionConditionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusChangeSubscriptionConditions to delete
     */
    where?: StatusChangeSubscriptionConditionWhereInput
  }


  /**
   * StatusChangeSubscriptionCondition without action
   */
  export type StatusChangeSubscriptionConditionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscriptionCondition
     */
    select?: StatusChangeSubscriptionConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionConditionInclude<ExtArgs> | null
  }



  /**
   * Model StatusChangeSubscription
   */

  export type AggregateStatusChangeSubscription = {
    _count: StatusChangeSubscriptionCountAggregateOutputType | null
    _min: StatusChangeSubscriptionMinAggregateOutputType | null
    _max: StatusChangeSubscriptionMaxAggregateOutputType | null
  }

  export type StatusChangeSubscriptionMinAggregateOutputType = {
    id: string | null
  }

  export type StatusChangeSubscriptionMaxAggregateOutputType = {
    id: string | null
  }

  export type StatusChangeSubscriptionCountAggregateOutputType = {
    id: number
    _all: number
  }


  export type StatusChangeSubscriptionMinAggregateInputType = {
    id?: true
  }

  export type StatusChangeSubscriptionMaxAggregateInputType = {
    id?: true
  }

  export type StatusChangeSubscriptionCountAggregateInputType = {
    id?: true
    _all?: true
  }

  export type StatusChangeSubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusChangeSubscription to aggregate.
     */
    where?: StatusChangeSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusChangeSubscriptions to fetch.
     */
    orderBy?: StatusChangeSubscriptionOrderByWithRelationInput | StatusChangeSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusChangeSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusChangeSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusChangeSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StatusChangeSubscriptions
    **/
    _count?: true | StatusChangeSubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusChangeSubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusChangeSubscriptionMaxAggregateInputType
  }

  export type GetStatusChangeSubscriptionAggregateType<T extends StatusChangeSubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusChangeSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusChangeSubscription[P]>
      : GetScalarType<T[P], AggregateStatusChangeSubscription[P]>
  }




  export type StatusChangeSubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusChangeSubscriptionWhereInput
    orderBy?: StatusChangeSubscriptionOrderByWithAggregationInput | StatusChangeSubscriptionOrderByWithAggregationInput[]
    by: StatusChangeSubscriptionScalarFieldEnum[] | StatusChangeSubscriptionScalarFieldEnum
    having?: StatusChangeSubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusChangeSubscriptionCountAggregateInputType | true
    _min?: StatusChangeSubscriptionMinAggregateInputType
    _max?: StatusChangeSubscriptionMaxAggregateInputType
  }

  export type StatusChangeSubscriptionGroupByOutputType = {
    id: string
    _count: StatusChangeSubscriptionCountAggregateOutputType | null
    _min: StatusChangeSubscriptionMinAggregateOutputType | null
    _max: StatusChangeSubscriptionMaxAggregateOutputType | null
  }

  type GetStatusChangeSubscriptionGroupByPayload<T extends StatusChangeSubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusChangeSubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusChangeSubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusChangeSubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], StatusChangeSubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type StatusChangeSubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conditions?: boolean | StatusChangeSubscription$conditionsArgs<ExtArgs>
    notifications?: boolean | StatusChangeSubscription$notificationsArgs<ExtArgs>
    delegate_aux_productSubscription?: boolean | ProductSubscriptionDefaultArgs<ExtArgs>
    _count?: boolean | StatusChangeSubscriptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusChangeSubscription"]>

  export type StatusChangeSubscriptionSelectScalar = {
    id?: boolean
  }

  export type StatusChangeSubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conditions?: boolean | StatusChangeSubscription$conditionsArgs<ExtArgs>
    notifications?: boolean | StatusChangeSubscription$notificationsArgs<ExtArgs>
    delegate_aux_productSubscription?: boolean | ProductSubscriptionDefaultArgs<ExtArgs>
    _count?: boolean | StatusChangeSubscriptionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StatusChangeSubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StatusChangeSubscription"
    objects: {
      conditions: Prisma.$StatusChangeSubscriptionConditionPayload<ExtArgs>[]
      notifications: Prisma.$StatusChangeNotificationPayload<ExtArgs>[]
      delegate_aux_productSubscription: Prisma.$ProductSubscriptionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
    }, ExtArgs["result"]["statusChangeSubscription"]>
    composites: {}
  }


  type StatusChangeSubscriptionGetPayload<S extends boolean | null | undefined | StatusChangeSubscriptionDefaultArgs> = $Result.GetResult<Prisma.$StatusChangeSubscriptionPayload, S>

  type StatusChangeSubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StatusChangeSubscriptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StatusChangeSubscriptionCountAggregateInputType | true
    }

  export interface StatusChangeSubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StatusChangeSubscription'], meta: { name: 'StatusChangeSubscription' } }
    /**
     * Find zero or one StatusChangeSubscription that matches the filter.
     * @param {StatusChangeSubscriptionFindUniqueArgs} args - Arguments to find a StatusChangeSubscription
     * @example
     * // Get one StatusChangeSubscription
     * const statusChangeSubscription = await prisma.statusChangeSubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatusChangeSubscriptionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeSubscriptionFindUniqueArgs<ExtArgs>>
    ): Prisma__StatusChangeSubscriptionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StatusChangeSubscription that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StatusChangeSubscriptionFindUniqueOrThrowArgs} args - Arguments to find a StatusChangeSubscription
     * @example
     * // Get one StatusChangeSubscription
     * const statusChangeSubscription = await prisma.statusChangeSubscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StatusChangeSubscriptionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeSubscriptionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StatusChangeSubscriptionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StatusChangeSubscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeSubscriptionFindFirstArgs} args - Arguments to find a StatusChangeSubscription
     * @example
     * // Get one StatusChangeSubscription
     * const statusChangeSubscription = await prisma.statusChangeSubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatusChangeSubscriptionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeSubscriptionFindFirstArgs<ExtArgs>>
    ): Prisma__StatusChangeSubscriptionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StatusChangeSubscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeSubscriptionFindFirstOrThrowArgs} args - Arguments to find a StatusChangeSubscription
     * @example
     * // Get one StatusChangeSubscription
     * const statusChangeSubscription = await prisma.statusChangeSubscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StatusChangeSubscriptionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeSubscriptionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StatusChangeSubscriptionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StatusChangeSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeSubscriptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusChangeSubscriptions
     * const statusChangeSubscriptions = await prisma.statusChangeSubscription.findMany()
     * 
     * // Get first 10 StatusChangeSubscriptions
     * const statusChangeSubscriptions = await prisma.statusChangeSubscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusChangeSubscriptionWithIdOnly = await prisma.statusChangeSubscription.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatusChangeSubscriptionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeSubscriptionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusChangeSubscriptionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StatusChangeSubscription.
     * @param {StatusChangeSubscriptionCreateArgs} args - Arguments to create a StatusChangeSubscription.
     * @example
     * // Create one StatusChangeSubscription
     * const StatusChangeSubscription = await prisma.statusChangeSubscription.create({
     *   data: {
     *     // ... data to create a StatusChangeSubscription
     *   }
     * })
     * 
    **/
    create<T extends StatusChangeSubscriptionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeSubscriptionCreateArgs<ExtArgs>>
    ): Prisma__StatusChangeSubscriptionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StatusChangeSubscriptions.
     *     @param {StatusChangeSubscriptionCreateManyArgs} args - Arguments to create many StatusChangeSubscriptions.
     *     @example
     *     // Create many StatusChangeSubscriptions
     *     const statusChangeSubscription = await prisma.statusChangeSubscription.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatusChangeSubscriptionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeSubscriptionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StatusChangeSubscription.
     * @param {StatusChangeSubscriptionDeleteArgs} args - Arguments to delete one StatusChangeSubscription.
     * @example
     * // Delete one StatusChangeSubscription
     * const StatusChangeSubscription = await prisma.statusChangeSubscription.delete({
     *   where: {
     *     // ... filter to delete one StatusChangeSubscription
     *   }
     * })
     * 
    **/
    delete<T extends StatusChangeSubscriptionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeSubscriptionDeleteArgs<ExtArgs>>
    ): Prisma__StatusChangeSubscriptionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StatusChangeSubscription.
     * @param {StatusChangeSubscriptionUpdateArgs} args - Arguments to update one StatusChangeSubscription.
     * @example
     * // Update one StatusChangeSubscription
     * const statusChangeSubscription = await prisma.statusChangeSubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatusChangeSubscriptionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeSubscriptionUpdateArgs<ExtArgs>>
    ): Prisma__StatusChangeSubscriptionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StatusChangeSubscriptions.
     * @param {StatusChangeSubscriptionDeleteManyArgs} args - Arguments to filter StatusChangeSubscriptions to delete.
     * @example
     * // Delete a few StatusChangeSubscriptions
     * const { count } = await prisma.statusChangeSubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatusChangeSubscriptionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeSubscriptionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusChangeSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusChangeSubscriptions
     * const statusChangeSubscription = await prisma.statusChangeSubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatusChangeSubscriptionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeSubscriptionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StatusChangeSubscription.
     * @param {StatusChangeSubscriptionUpsertArgs} args - Arguments to update or create a StatusChangeSubscription.
     * @example
     * // Update or create a StatusChangeSubscription
     * const statusChangeSubscription = await prisma.statusChangeSubscription.upsert({
     *   create: {
     *     // ... data to create a StatusChangeSubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusChangeSubscription we want to update
     *   }
     * })
    **/
    upsert<T extends StatusChangeSubscriptionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeSubscriptionUpsertArgs<ExtArgs>>
    ): Prisma__StatusChangeSubscriptionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StatusChangeSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeSubscriptionCountArgs} args - Arguments to filter StatusChangeSubscriptions to count.
     * @example
     * // Count the number of StatusChangeSubscriptions
     * const count = await prisma.statusChangeSubscription.count({
     *   where: {
     *     // ... the filter for the StatusChangeSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends StatusChangeSubscriptionCountArgs>(
      args?: Subset<T, StatusChangeSubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusChangeSubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusChangeSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusChangeSubscriptionAggregateArgs>(args: Subset<T, StatusChangeSubscriptionAggregateArgs>): Prisma.PrismaPromise<GetStatusChangeSubscriptionAggregateType<T>>

    /**
     * Group by StatusChangeSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeSubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusChangeSubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusChangeSubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: StatusChangeSubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusChangeSubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusChangeSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StatusChangeSubscription model
   */
  readonly fields: StatusChangeSubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StatusChangeSubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusChangeSubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    conditions<T extends StatusChangeSubscription$conditionsArgs<ExtArgs> = {}>(args?: Subset<T, StatusChangeSubscription$conditionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusChangeSubscriptionConditionPayload<ExtArgs>, T, 'findMany'> | Null>;

    notifications<T extends StatusChangeSubscription$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, StatusChangeSubscription$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusChangeNotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    delegate_aux_productSubscription<T extends ProductSubscriptionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductSubscriptionDefaultArgs<ExtArgs>>): Prisma__ProductSubscriptionClient<$Result.GetResult<Prisma.$ProductSubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the StatusChangeSubscription model
   */ 
  interface StatusChangeSubscriptionFieldRefs {
    readonly id: FieldRef<"StatusChangeSubscription", 'String'>
  }
    

  // Custom InputTypes

  /**
   * StatusChangeSubscription findUnique
   */
  export type StatusChangeSubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscription
     */
    select?: StatusChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which StatusChangeSubscription to fetch.
     */
    where: StatusChangeSubscriptionWhereUniqueInput
  }


  /**
   * StatusChangeSubscription findUniqueOrThrow
   */
  export type StatusChangeSubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscription
     */
    select?: StatusChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which StatusChangeSubscription to fetch.
     */
    where: StatusChangeSubscriptionWhereUniqueInput
  }


  /**
   * StatusChangeSubscription findFirst
   */
  export type StatusChangeSubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscription
     */
    select?: StatusChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which StatusChangeSubscription to fetch.
     */
    where?: StatusChangeSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusChangeSubscriptions to fetch.
     */
    orderBy?: StatusChangeSubscriptionOrderByWithRelationInput | StatusChangeSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusChangeSubscriptions.
     */
    cursor?: StatusChangeSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusChangeSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusChangeSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusChangeSubscriptions.
     */
    distinct?: StatusChangeSubscriptionScalarFieldEnum | StatusChangeSubscriptionScalarFieldEnum[]
  }


  /**
   * StatusChangeSubscription findFirstOrThrow
   */
  export type StatusChangeSubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscription
     */
    select?: StatusChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which StatusChangeSubscription to fetch.
     */
    where?: StatusChangeSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusChangeSubscriptions to fetch.
     */
    orderBy?: StatusChangeSubscriptionOrderByWithRelationInput | StatusChangeSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusChangeSubscriptions.
     */
    cursor?: StatusChangeSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusChangeSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusChangeSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusChangeSubscriptions.
     */
    distinct?: StatusChangeSubscriptionScalarFieldEnum | StatusChangeSubscriptionScalarFieldEnum[]
  }


  /**
   * StatusChangeSubscription findMany
   */
  export type StatusChangeSubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscription
     */
    select?: StatusChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which StatusChangeSubscriptions to fetch.
     */
    where?: StatusChangeSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusChangeSubscriptions to fetch.
     */
    orderBy?: StatusChangeSubscriptionOrderByWithRelationInput | StatusChangeSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StatusChangeSubscriptions.
     */
    cursor?: StatusChangeSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusChangeSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusChangeSubscriptions.
     */
    skip?: number
    distinct?: StatusChangeSubscriptionScalarFieldEnum | StatusChangeSubscriptionScalarFieldEnum[]
  }


  /**
   * StatusChangeSubscription create
   */
  export type StatusChangeSubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscription
     */
    select?: StatusChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a StatusChangeSubscription.
     */
    data: XOR<StatusChangeSubscriptionCreateInput, StatusChangeSubscriptionUncheckedCreateInput>
  }


  /**
   * StatusChangeSubscription createMany
   */
  export type StatusChangeSubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StatusChangeSubscriptions.
     */
    data: StatusChangeSubscriptionCreateManyInput | StatusChangeSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * StatusChangeSubscription update
   */
  export type StatusChangeSubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscription
     */
    select?: StatusChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a StatusChangeSubscription.
     */
    data: XOR<StatusChangeSubscriptionUpdateInput, StatusChangeSubscriptionUncheckedUpdateInput>
    /**
     * Choose, which StatusChangeSubscription to update.
     */
    where: StatusChangeSubscriptionWhereUniqueInput
  }


  /**
   * StatusChangeSubscription updateMany
   */
  export type StatusChangeSubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StatusChangeSubscriptions.
     */
    data: XOR<StatusChangeSubscriptionUpdateManyMutationInput, StatusChangeSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which StatusChangeSubscriptions to update
     */
    where?: StatusChangeSubscriptionWhereInput
  }


  /**
   * StatusChangeSubscription upsert
   */
  export type StatusChangeSubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscription
     */
    select?: StatusChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the StatusChangeSubscription to update in case it exists.
     */
    where: StatusChangeSubscriptionWhereUniqueInput
    /**
     * In case the StatusChangeSubscription found by the `where` argument doesn't exist, create a new StatusChangeSubscription with this data.
     */
    create: XOR<StatusChangeSubscriptionCreateInput, StatusChangeSubscriptionUncheckedCreateInput>
    /**
     * In case the StatusChangeSubscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusChangeSubscriptionUpdateInput, StatusChangeSubscriptionUncheckedUpdateInput>
  }


  /**
   * StatusChangeSubscription delete
   */
  export type StatusChangeSubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscription
     */
    select?: StatusChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter which StatusChangeSubscription to delete.
     */
    where: StatusChangeSubscriptionWhereUniqueInput
  }


  /**
   * StatusChangeSubscription deleteMany
   */
  export type StatusChangeSubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusChangeSubscriptions to delete
     */
    where?: StatusChangeSubscriptionWhereInput
  }


  /**
   * StatusChangeSubscription.conditions
   */
  export type StatusChangeSubscription$conditionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscriptionCondition
     */
    select?: StatusChangeSubscriptionConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionConditionInclude<ExtArgs> | null
    where?: StatusChangeSubscriptionConditionWhereInput
    orderBy?: StatusChangeSubscriptionConditionOrderByWithRelationInput | StatusChangeSubscriptionConditionOrderByWithRelationInput[]
    cursor?: StatusChangeSubscriptionConditionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StatusChangeSubscriptionConditionScalarFieldEnum | StatusChangeSubscriptionConditionScalarFieldEnum[]
  }


  /**
   * StatusChangeSubscription.notifications
   */
  export type StatusChangeSubscription$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeNotification
     */
    select?: StatusChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeNotificationInclude<ExtArgs> | null
    where?: StatusChangeNotificationWhereInput
    orderBy?: StatusChangeNotificationOrderByWithRelationInput | StatusChangeNotificationOrderByWithRelationInput[]
    cursor?: StatusChangeNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StatusChangeNotificationScalarFieldEnum | StatusChangeNotificationScalarFieldEnum[]
  }


  /**
   * StatusChangeSubscription without action
   */
  export type StatusChangeSubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeSubscription
     */
    select?: StatusChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeSubscriptionInclude<ExtArgs> | null
  }



  /**
   * Model PriceChangeSubscription
   */

  export type AggregatePriceChangeSubscription = {
    _count: PriceChangeSubscriptionCountAggregateOutputType | null
    _min: PriceChangeSubscriptionMinAggregateOutputType | null
    _max: PriceChangeSubscriptionMaxAggregateOutputType | null
  }

  export type PriceChangeSubscriptionMinAggregateOutputType = {
    id: string | null
  }

  export type PriceChangeSubscriptionMaxAggregateOutputType = {
    id: string | null
  }

  export type PriceChangeSubscriptionCountAggregateOutputType = {
    id: number
    conditions: number
    _all: number
  }


  export type PriceChangeSubscriptionMinAggregateInputType = {
    id?: true
  }

  export type PriceChangeSubscriptionMaxAggregateInputType = {
    id?: true
  }

  export type PriceChangeSubscriptionCountAggregateInputType = {
    id?: true
    conditions?: true
    _all?: true
  }

  export type PriceChangeSubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceChangeSubscription to aggregate.
     */
    where?: PriceChangeSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceChangeSubscriptions to fetch.
     */
    orderBy?: PriceChangeSubscriptionOrderByWithRelationInput | PriceChangeSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PriceChangeSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceChangeSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceChangeSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PriceChangeSubscriptions
    **/
    _count?: true | PriceChangeSubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PriceChangeSubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PriceChangeSubscriptionMaxAggregateInputType
  }

  export type GetPriceChangeSubscriptionAggregateType<T extends PriceChangeSubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregatePriceChangeSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePriceChangeSubscription[P]>
      : GetScalarType<T[P], AggregatePriceChangeSubscription[P]>
  }




  export type PriceChangeSubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceChangeSubscriptionWhereInput
    orderBy?: PriceChangeSubscriptionOrderByWithAggregationInput | PriceChangeSubscriptionOrderByWithAggregationInput[]
    by: PriceChangeSubscriptionScalarFieldEnum[] | PriceChangeSubscriptionScalarFieldEnum
    having?: PriceChangeSubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PriceChangeSubscriptionCountAggregateInputType | true
    _min?: PriceChangeSubscriptionMinAggregateInputType
    _max?: PriceChangeSubscriptionMaxAggregateInputType
  }

  export type PriceChangeSubscriptionGroupByOutputType = {
    id: string
    conditions: $Enums.PriceChangeSubscriptionCondition[]
    _count: PriceChangeSubscriptionCountAggregateOutputType | null
    _min: PriceChangeSubscriptionMinAggregateOutputType | null
    _max: PriceChangeSubscriptionMaxAggregateOutputType | null
  }

  type GetPriceChangeSubscriptionGroupByPayload<T extends PriceChangeSubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PriceChangeSubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PriceChangeSubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PriceChangeSubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], PriceChangeSubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type PriceChangeSubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conditions?: boolean
    notifications?: boolean | PriceChangeSubscription$notificationsArgs<ExtArgs>
    delegate_aux_productSubscription?: boolean | ProductSubscriptionDefaultArgs<ExtArgs>
    _count?: boolean | PriceChangeSubscriptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["priceChangeSubscription"]>

  export type PriceChangeSubscriptionSelectScalar = {
    id?: boolean
    conditions?: boolean
  }

  export type PriceChangeSubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | PriceChangeSubscription$notificationsArgs<ExtArgs>
    delegate_aux_productSubscription?: boolean | ProductSubscriptionDefaultArgs<ExtArgs>
    _count?: boolean | PriceChangeSubscriptionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PriceChangeSubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PriceChangeSubscription"
    objects: {
      notifications: Prisma.$PriceChangeNotificationPayload<ExtArgs>[]
      delegate_aux_productSubscription: Prisma.$ProductSubscriptionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      conditions: $Enums.PriceChangeSubscriptionCondition[]
    }, ExtArgs["result"]["priceChangeSubscription"]>
    composites: {}
  }


  type PriceChangeSubscriptionGetPayload<S extends boolean | null | undefined | PriceChangeSubscriptionDefaultArgs> = $Result.GetResult<Prisma.$PriceChangeSubscriptionPayload, S>

  type PriceChangeSubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PriceChangeSubscriptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PriceChangeSubscriptionCountAggregateInputType | true
    }

  export interface PriceChangeSubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PriceChangeSubscription'], meta: { name: 'PriceChangeSubscription' } }
    /**
     * Find zero or one PriceChangeSubscription that matches the filter.
     * @param {PriceChangeSubscriptionFindUniqueArgs} args - Arguments to find a PriceChangeSubscription
     * @example
     * // Get one PriceChangeSubscription
     * const priceChangeSubscription = await prisma.priceChangeSubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PriceChangeSubscriptionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PriceChangeSubscriptionFindUniqueArgs<ExtArgs>>
    ): Prisma__PriceChangeSubscriptionClient<$Result.GetResult<Prisma.$PriceChangeSubscriptionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PriceChangeSubscription that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PriceChangeSubscriptionFindUniqueOrThrowArgs} args - Arguments to find a PriceChangeSubscription
     * @example
     * // Get one PriceChangeSubscription
     * const priceChangeSubscription = await prisma.priceChangeSubscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PriceChangeSubscriptionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceChangeSubscriptionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PriceChangeSubscriptionClient<$Result.GetResult<Prisma.$PriceChangeSubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PriceChangeSubscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceChangeSubscriptionFindFirstArgs} args - Arguments to find a PriceChangeSubscription
     * @example
     * // Get one PriceChangeSubscription
     * const priceChangeSubscription = await prisma.priceChangeSubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PriceChangeSubscriptionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceChangeSubscriptionFindFirstArgs<ExtArgs>>
    ): Prisma__PriceChangeSubscriptionClient<$Result.GetResult<Prisma.$PriceChangeSubscriptionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PriceChangeSubscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceChangeSubscriptionFindFirstOrThrowArgs} args - Arguments to find a PriceChangeSubscription
     * @example
     * // Get one PriceChangeSubscription
     * const priceChangeSubscription = await prisma.priceChangeSubscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PriceChangeSubscriptionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceChangeSubscriptionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PriceChangeSubscriptionClient<$Result.GetResult<Prisma.$PriceChangeSubscriptionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PriceChangeSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceChangeSubscriptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PriceChangeSubscriptions
     * const priceChangeSubscriptions = await prisma.priceChangeSubscription.findMany()
     * 
     * // Get first 10 PriceChangeSubscriptions
     * const priceChangeSubscriptions = await prisma.priceChangeSubscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const priceChangeSubscriptionWithIdOnly = await prisma.priceChangeSubscription.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PriceChangeSubscriptionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceChangeSubscriptionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceChangeSubscriptionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PriceChangeSubscription.
     * @param {PriceChangeSubscriptionCreateArgs} args - Arguments to create a PriceChangeSubscription.
     * @example
     * // Create one PriceChangeSubscription
     * const PriceChangeSubscription = await prisma.priceChangeSubscription.create({
     *   data: {
     *     // ... data to create a PriceChangeSubscription
     *   }
     * })
     * 
    **/
    create<T extends PriceChangeSubscriptionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PriceChangeSubscriptionCreateArgs<ExtArgs>>
    ): Prisma__PriceChangeSubscriptionClient<$Result.GetResult<Prisma.$PriceChangeSubscriptionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PriceChangeSubscriptions.
     *     @param {PriceChangeSubscriptionCreateManyArgs} args - Arguments to create many PriceChangeSubscriptions.
     *     @example
     *     // Create many PriceChangeSubscriptions
     *     const priceChangeSubscription = await prisma.priceChangeSubscription.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PriceChangeSubscriptionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceChangeSubscriptionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PriceChangeSubscription.
     * @param {PriceChangeSubscriptionDeleteArgs} args - Arguments to delete one PriceChangeSubscription.
     * @example
     * // Delete one PriceChangeSubscription
     * const PriceChangeSubscription = await prisma.priceChangeSubscription.delete({
     *   where: {
     *     // ... filter to delete one PriceChangeSubscription
     *   }
     * })
     * 
    **/
    delete<T extends PriceChangeSubscriptionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PriceChangeSubscriptionDeleteArgs<ExtArgs>>
    ): Prisma__PriceChangeSubscriptionClient<$Result.GetResult<Prisma.$PriceChangeSubscriptionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PriceChangeSubscription.
     * @param {PriceChangeSubscriptionUpdateArgs} args - Arguments to update one PriceChangeSubscription.
     * @example
     * // Update one PriceChangeSubscription
     * const priceChangeSubscription = await prisma.priceChangeSubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PriceChangeSubscriptionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PriceChangeSubscriptionUpdateArgs<ExtArgs>>
    ): Prisma__PriceChangeSubscriptionClient<$Result.GetResult<Prisma.$PriceChangeSubscriptionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PriceChangeSubscriptions.
     * @param {PriceChangeSubscriptionDeleteManyArgs} args - Arguments to filter PriceChangeSubscriptions to delete.
     * @example
     * // Delete a few PriceChangeSubscriptions
     * const { count } = await prisma.priceChangeSubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PriceChangeSubscriptionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceChangeSubscriptionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PriceChangeSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceChangeSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PriceChangeSubscriptions
     * const priceChangeSubscription = await prisma.priceChangeSubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PriceChangeSubscriptionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PriceChangeSubscriptionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PriceChangeSubscription.
     * @param {PriceChangeSubscriptionUpsertArgs} args - Arguments to update or create a PriceChangeSubscription.
     * @example
     * // Update or create a PriceChangeSubscription
     * const priceChangeSubscription = await prisma.priceChangeSubscription.upsert({
     *   create: {
     *     // ... data to create a PriceChangeSubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PriceChangeSubscription we want to update
     *   }
     * })
    **/
    upsert<T extends PriceChangeSubscriptionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PriceChangeSubscriptionUpsertArgs<ExtArgs>>
    ): Prisma__PriceChangeSubscriptionClient<$Result.GetResult<Prisma.$PriceChangeSubscriptionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PriceChangeSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceChangeSubscriptionCountArgs} args - Arguments to filter PriceChangeSubscriptions to count.
     * @example
     * // Count the number of PriceChangeSubscriptions
     * const count = await prisma.priceChangeSubscription.count({
     *   where: {
     *     // ... the filter for the PriceChangeSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends PriceChangeSubscriptionCountArgs>(
      args?: Subset<T, PriceChangeSubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PriceChangeSubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PriceChangeSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceChangeSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PriceChangeSubscriptionAggregateArgs>(args: Subset<T, PriceChangeSubscriptionAggregateArgs>): Prisma.PrismaPromise<GetPriceChangeSubscriptionAggregateType<T>>

    /**
     * Group by PriceChangeSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceChangeSubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PriceChangeSubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PriceChangeSubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: PriceChangeSubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PriceChangeSubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPriceChangeSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PriceChangeSubscription model
   */
  readonly fields: PriceChangeSubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PriceChangeSubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PriceChangeSubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    notifications<T extends PriceChangeSubscription$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, PriceChangeSubscription$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceChangeNotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    delegate_aux_productSubscription<T extends ProductSubscriptionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductSubscriptionDefaultArgs<ExtArgs>>): Prisma__ProductSubscriptionClient<$Result.GetResult<Prisma.$ProductSubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PriceChangeSubscription model
   */ 
  interface PriceChangeSubscriptionFieldRefs {
    readonly id: FieldRef<"PriceChangeSubscription", 'String'>
    readonly conditions: FieldRef<"PriceChangeSubscription", 'PriceChangeSubscriptionCondition[]'>
  }
    

  // Custom InputTypes

  /**
   * PriceChangeSubscription findUnique
   */
  export type PriceChangeSubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeSubscription
     */
    select?: PriceChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which PriceChangeSubscription to fetch.
     */
    where: PriceChangeSubscriptionWhereUniqueInput
  }


  /**
   * PriceChangeSubscription findUniqueOrThrow
   */
  export type PriceChangeSubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeSubscription
     */
    select?: PriceChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which PriceChangeSubscription to fetch.
     */
    where: PriceChangeSubscriptionWhereUniqueInput
  }


  /**
   * PriceChangeSubscription findFirst
   */
  export type PriceChangeSubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeSubscription
     */
    select?: PriceChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which PriceChangeSubscription to fetch.
     */
    where?: PriceChangeSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceChangeSubscriptions to fetch.
     */
    orderBy?: PriceChangeSubscriptionOrderByWithRelationInput | PriceChangeSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceChangeSubscriptions.
     */
    cursor?: PriceChangeSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceChangeSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceChangeSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceChangeSubscriptions.
     */
    distinct?: PriceChangeSubscriptionScalarFieldEnum | PriceChangeSubscriptionScalarFieldEnum[]
  }


  /**
   * PriceChangeSubscription findFirstOrThrow
   */
  export type PriceChangeSubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeSubscription
     */
    select?: PriceChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which PriceChangeSubscription to fetch.
     */
    where?: PriceChangeSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceChangeSubscriptions to fetch.
     */
    orderBy?: PriceChangeSubscriptionOrderByWithRelationInput | PriceChangeSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceChangeSubscriptions.
     */
    cursor?: PriceChangeSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceChangeSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceChangeSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceChangeSubscriptions.
     */
    distinct?: PriceChangeSubscriptionScalarFieldEnum | PriceChangeSubscriptionScalarFieldEnum[]
  }


  /**
   * PriceChangeSubscription findMany
   */
  export type PriceChangeSubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeSubscription
     */
    select?: PriceChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which PriceChangeSubscriptions to fetch.
     */
    where?: PriceChangeSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceChangeSubscriptions to fetch.
     */
    orderBy?: PriceChangeSubscriptionOrderByWithRelationInput | PriceChangeSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PriceChangeSubscriptions.
     */
    cursor?: PriceChangeSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceChangeSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceChangeSubscriptions.
     */
    skip?: number
    distinct?: PriceChangeSubscriptionScalarFieldEnum | PriceChangeSubscriptionScalarFieldEnum[]
  }


  /**
   * PriceChangeSubscription create
   */
  export type PriceChangeSubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeSubscription
     */
    select?: PriceChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a PriceChangeSubscription.
     */
    data: XOR<PriceChangeSubscriptionCreateInput, PriceChangeSubscriptionUncheckedCreateInput>
  }


  /**
   * PriceChangeSubscription createMany
   */
  export type PriceChangeSubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PriceChangeSubscriptions.
     */
    data: PriceChangeSubscriptionCreateManyInput | PriceChangeSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PriceChangeSubscription update
   */
  export type PriceChangeSubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeSubscription
     */
    select?: PriceChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a PriceChangeSubscription.
     */
    data: XOR<PriceChangeSubscriptionUpdateInput, PriceChangeSubscriptionUncheckedUpdateInput>
    /**
     * Choose, which PriceChangeSubscription to update.
     */
    where: PriceChangeSubscriptionWhereUniqueInput
  }


  /**
   * PriceChangeSubscription updateMany
   */
  export type PriceChangeSubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PriceChangeSubscriptions.
     */
    data: XOR<PriceChangeSubscriptionUpdateManyMutationInput, PriceChangeSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which PriceChangeSubscriptions to update
     */
    where?: PriceChangeSubscriptionWhereInput
  }


  /**
   * PriceChangeSubscription upsert
   */
  export type PriceChangeSubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeSubscription
     */
    select?: PriceChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeSubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the PriceChangeSubscription to update in case it exists.
     */
    where: PriceChangeSubscriptionWhereUniqueInput
    /**
     * In case the PriceChangeSubscription found by the `where` argument doesn't exist, create a new PriceChangeSubscription with this data.
     */
    create: XOR<PriceChangeSubscriptionCreateInput, PriceChangeSubscriptionUncheckedCreateInput>
    /**
     * In case the PriceChangeSubscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PriceChangeSubscriptionUpdateInput, PriceChangeSubscriptionUncheckedUpdateInput>
  }


  /**
   * PriceChangeSubscription delete
   */
  export type PriceChangeSubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeSubscription
     */
    select?: PriceChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeSubscriptionInclude<ExtArgs> | null
    /**
     * Filter which PriceChangeSubscription to delete.
     */
    where: PriceChangeSubscriptionWhereUniqueInput
  }


  /**
   * PriceChangeSubscription deleteMany
   */
  export type PriceChangeSubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceChangeSubscriptions to delete
     */
    where?: PriceChangeSubscriptionWhereInput
  }


  /**
   * PriceChangeSubscription.notifications
   */
  export type PriceChangeSubscription$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeNotification
     */
    select?: PriceChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeNotificationInclude<ExtArgs> | null
    where?: PriceChangeNotificationWhereInput
    orderBy?: PriceChangeNotificationOrderByWithRelationInput | PriceChangeNotificationOrderByWithRelationInput[]
    cursor?: PriceChangeNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PriceChangeNotificationScalarFieldEnum | PriceChangeNotificationScalarFieldEnum[]
  }


  /**
   * PriceChangeSubscription without action
   */
  export type PriceChangeSubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeSubscription
     */
    select?: PriceChangeSubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeSubscriptionInclude<ExtArgs> | null
  }



  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    userId: string | null
    notificationType: $Enums.NotificationType | null
    state: $Enums.NotificationState | null
    stateAsOf: Date | null
    failedAt: Date | null
    sentAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    userId: string | null
    notificationType: $Enums.NotificationType | null
    state: $Enums.NotificationState | null
    stateAsOf: Date | null
    failedAt: Date | null
    sentAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    userId: number
    notificationType: number
    state: number
    stateAsOf: number
    failedAt: number
    sentAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    userId?: true
    notificationType?: true
    state?: true
    stateAsOf?: true
    failedAt?: true
    sentAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    userId?: true
    notificationType?: true
    state?: true
    stateAsOf?: true
    failedAt?: true
    sentAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    userId?: true
    notificationType?: true
    state?: true
    stateAsOf?: true
    failedAt?: true
    sentAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    createdById: string
    updatedById: string
    userId: string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date
    failedAt: Date | null
    sentAt: Date | null
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    userId?: boolean
    notificationType?: boolean
    state?: boolean
    stateAsOf?: boolean
    failedAt?: boolean
    sentAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    delegate_aux_priceChangeNotification?: boolean | Notification$delegate_aux_priceChangeNotificationArgs<ExtArgs>
    delegate_aux_statusChangeNotification?: boolean | Notification$delegate_aux_statusChangeNotificationArgs<ExtArgs>
    delegate_aux_newProductNotification?: boolean | Notification$delegate_aux_newProductNotificationArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    userId?: boolean
    notificationType?: boolean
    state?: boolean
    stateAsOf?: boolean
    failedAt?: boolean
    sentAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    delegate_aux_priceChangeNotification?: boolean | Notification$delegate_aux_priceChangeNotificationArgs<ExtArgs>
    delegate_aux_statusChangeNotification?: boolean | Notification$delegate_aux_statusChangeNotificationArgs<ExtArgs>
    delegate_aux_newProductNotification?: boolean | Notification$delegate_aux_newProductNotificationArgs<ExtArgs>
  }


  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      delegate_aux_priceChangeNotification: Prisma.$PriceChangeNotificationPayload<ExtArgs> | null
      delegate_aux_statusChangeNotification: Prisma.$StatusChangeNotificationPayload<ExtArgs> | null
      delegate_aux_newProductNotification: Prisma.$NewProductNotificationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      createdById: string
      updatedById: string
      userId: string
      notificationType: $Enums.NotificationType
      state: $Enums.NotificationState
      stateAsOf: Date
      failedAt: Date | null
      sentAt: Date | null
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }


  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
    **/
    create<T extends NotificationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notifications.
     *     @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notification = await prisma.notification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
    **/
    delete<T extends NotificationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    delegate_aux_priceChangeNotification<T extends Notification$delegate_aux_priceChangeNotificationArgs<ExtArgs> = {}>(args?: Subset<T, Notification$delegate_aux_priceChangeNotificationArgs<ExtArgs>>): Prisma__PriceChangeNotificationClient<$Result.GetResult<Prisma.$PriceChangeNotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    delegate_aux_statusChangeNotification<T extends Notification$delegate_aux_statusChangeNotificationArgs<ExtArgs> = {}>(args?: Subset<T, Notification$delegate_aux_statusChangeNotificationArgs<ExtArgs>>): Prisma__StatusChangeNotificationClient<$Result.GetResult<Prisma.$StatusChangeNotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    delegate_aux_newProductNotification<T extends Notification$delegate_aux_newProductNotificationArgs<ExtArgs> = {}>(args?: Subset<T, Notification$delegate_aux_newProductNotificationArgs<ExtArgs>>): Prisma__NewProductNotificationClient<$Result.GetResult<Prisma.$NewProductNotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
    readonly createdById: FieldRef<"Notification", 'String'>
    readonly updatedById: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly notificationType: FieldRef<"Notification", 'NotificationType'>
    readonly state: FieldRef<"Notification", 'NotificationState'>
    readonly stateAsOf: FieldRef<"Notification", 'DateTime'>
    readonly failedAt: FieldRef<"Notification", 'DateTime'>
    readonly sentAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }


  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }


  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification.delegate_aux_priceChangeNotification
   */
  export type Notification$delegate_aux_priceChangeNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeNotification
     */
    select?: PriceChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeNotificationInclude<ExtArgs> | null
    where?: PriceChangeNotificationWhereInput
  }


  /**
   * Notification.delegate_aux_statusChangeNotification
   */
  export type Notification$delegate_aux_statusChangeNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeNotification
     */
    select?: StatusChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeNotificationInclude<ExtArgs> | null
    where?: StatusChangeNotificationWhereInput
  }


  /**
   * Notification.delegate_aux_newProductNotification
   */
  export type Notification$delegate_aux_newProductNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewProductNotification
     */
    select?: NewProductNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewProductNotificationInclude<ExtArgs> | null
    where?: NewProductNotificationWhereInput
  }


  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
  }



  /**
   * Model PriceChangeNotification
   */

  export type AggregatePriceChangeNotification = {
    _count: PriceChangeNotificationCountAggregateOutputType | null
    _avg: PriceChangeNotificationAvgAggregateOutputType | null
    _sum: PriceChangeNotificationSumAggregateOutputType | null
    _min: PriceChangeNotificationMinAggregateOutputType | null
    _max: PriceChangeNotificationMaxAggregateOutputType | null
  }

  export type PriceChangeNotificationAvgAggregateOutputType = {
    previousPrice: number | null
    newPrice: number | null
  }

  export type PriceChangeNotificationSumAggregateOutputType = {
    previousPrice: number | null
    newPrice: number | null
  }

  export type PriceChangeNotificationMinAggregateOutputType = {
    id: string | null
    productRecordId: string | null
    subscriptionId: string | null
    condition: $Enums.PriceChangeSubscriptionCondition | null
    previousPrice: number | null
    newPrice: number | null
  }

  export type PriceChangeNotificationMaxAggregateOutputType = {
    id: string | null
    productRecordId: string | null
    subscriptionId: string | null
    condition: $Enums.PriceChangeSubscriptionCondition | null
    previousPrice: number | null
    newPrice: number | null
  }

  export type PriceChangeNotificationCountAggregateOutputType = {
    id: number
    productRecordId: number
    subscriptionId: number
    condition: number
    previousPrice: number
    newPrice: number
    _all: number
  }


  export type PriceChangeNotificationAvgAggregateInputType = {
    previousPrice?: true
    newPrice?: true
  }

  export type PriceChangeNotificationSumAggregateInputType = {
    previousPrice?: true
    newPrice?: true
  }

  export type PriceChangeNotificationMinAggregateInputType = {
    id?: true
    productRecordId?: true
    subscriptionId?: true
    condition?: true
    previousPrice?: true
    newPrice?: true
  }

  export type PriceChangeNotificationMaxAggregateInputType = {
    id?: true
    productRecordId?: true
    subscriptionId?: true
    condition?: true
    previousPrice?: true
    newPrice?: true
  }

  export type PriceChangeNotificationCountAggregateInputType = {
    id?: true
    productRecordId?: true
    subscriptionId?: true
    condition?: true
    previousPrice?: true
    newPrice?: true
    _all?: true
  }

  export type PriceChangeNotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceChangeNotification to aggregate.
     */
    where?: PriceChangeNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceChangeNotifications to fetch.
     */
    orderBy?: PriceChangeNotificationOrderByWithRelationInput | PriceChangeNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PriceChangeNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceChangeNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceChangeNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PriceChangeNotifications
    **/
    _count?: true | PriceChangeNotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PriceChangeNotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PriceChangeNotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PriceChangeNotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PriceChangeNotificationMaxAggregateInputType
  }

  export type GetPriceChangeNotificationAggregateType<T extends PriceChangeNotificationAggregateArgs> = {
        [P in keyof T & keyof AggregatePriceChangeNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePriceChangeNotification[P]>
      : GetScalarType<T[P], AggregatePriceChangeNotification[P]>
  }




  export type PriceChangeNotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceChangeNotificationWhereInput
    orderBy?: PriceChangeNotificationOrderByWithAggregationInput | PriceChangeNotificationOrderByWithAggregationInput[]
    by: PriceChangeNotificationScalarFieldEnum[] | PriceChangeNotificationScalarFieldEnum
    having?: PriceChangeNotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PriceChangeNotificationCountAggregateInputType | true
    _avg?: PriceChangeNotificationAvgAggregateInputType
    _sum?: PriceChangeNotificationSumAggregateInputType
    _min?: PriceChangeNotificationMinAggregateInputType
    _max?: PriceChangeNotificationMaxAggregateInputType
  }

  export type PriceChangeNotificationGroupByOutputType = {
    id: string
    productRecordId: string
    subscriptionId: string
    condition: $Enums.PriceChangeSubscriptionCondition
    previousPrice: number
    newPrice: number
    _count: PriceChangeNotificationCountAggregateOutputType | null
    _avg: PriceChangeNotificationAvgAggregateOutputType | null
    _sum: PriceChangeNotificationSumAggregateOutputType | null
    _min: PriceChangeNotificationMinAggregateOutputType | null
    _max: PriceChangeNotificationMaxAggregateOutputType | null
  }

  type GetPriceChangeNotificationGroupByPayload<T extends PriceChangeNotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PriceChangeNotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PriceChangeNotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PriceChangeNotificationGroupByOutputType[P]>
            : GetScalarType<T[P], PriceChangeNotificationGroupByOutputType[P]>
        }
      >
    >


  export type PriceChangeNotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productRecordId?: boolean
    subscriptionId?: boolean
    condition?: boolean
    previousPrice?: boolean
    newPrice?: boolean
    productRecord?: boolean | ProductRecordDefaultArgs<ExtArgs>
    subscription?: boolean | PriceChangeSubscriptionDefaultArgs<ExtArgs>
    delegate_aux_notification?: boolean | NotificationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["priceChangeNotification"]>

  export type PriceChangeNotificationSelectScalar = {
    id?: boolean
    productRecordId?: boolean
    subscriptionId?: boolean
    condition?: boolean
    previousPrice?: boolean
    newPrice?: boolean
  }

  export type PriceChangeNotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productRecord?: boolean | ProductRecordDefaultArgs<ExtArgs>
    subscription?: boolean | PriceChangeSubscriptionDefaultArgs<ExtArgs>
    delegate_aux_notification?: boolean | NotificationDefaultArgs<ExtArgs>
  }


  export type $PriceChangeNotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PriceChangeNotification"
    objects: {
      productRecord: Prisma.$ProductRecordPayload<ExtArgs>
      subscription: Prisma.$PriceChangeSubscriptionPayload<ExtArgs>
      delegate_aux_notification: Prisma.$NotificationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productRecordId: string
      subscriptionId: string
      condition: $Enums.PriceChangeSubscriptionCondition
      previousPrice: number
      newPrice: number
    }, ExtArgs["result"]["priceChangeNotification"]>
    composites: {}
  }


  type PriceChangeNotificationGetPayload<S extends boolean | null | undefined | PriceChangeNotificationDefaultArgs> = $Result.GetResult<Prisma.$PriceChangeNotificationPayload, S>

  type PriceChangeNotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PriceChangeNotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PriceChangeNotificationCountAggregateInputType | true
    }

  export interface PriceChangeNotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PriceChangeNotification'], meta: { name: 'PriceChangeNotification' } }
    /**
     * Find zero or one PriceChangeNotification that matches the filter.
     * @param {PriceChangeNotificationFindUniqueArgs} args - Arguments to find a PriceChangeNotification
     * @example
     * // Get one PriceChangeNotification
     * const priceChangeNotification = await prisma.priceChangeNotification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PriceChangeNotificationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PriceChangeNotificationFindUniqueArgs<ExtArgs>>
    ): Prisma__PriceChangeNotificationClient<$Result.GetResult<Prisma.$PriceChangeNotificationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PriceChangeNotification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PriceChangeNotificationFindUniqueOrThrowArgs} args - Arguments to find a PriceChangeNotification
     * @example
     * // Get one PriceChangeNotification
     * const priceChangeNotification = await prisma.priceChangeNotification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PriceChangeNotificationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceChangeNotificationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PriceChangeNotificationClient<$Result.GetResult<Prisma.$PriceChangeNotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PriceChangeNotification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceChangeNotificationFindFirstArgs} args - Arguments to find a PriceChangeNotification
     * @example
     * // Get one PriceChangeNotification
     * const priceChangeNotification = await prisma.priceChangeNotification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PriceChangeNotificationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceChangeNotificationFindFirstArgs<ExtArgs>>
    ): Prisma__PriceChangeNotificationClient<$Result.GetResult<Prisma.$PriceChangeNotificationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PriceChangeNotification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceChangeNotificationFindFirstOrThrowArgs} args - Arguments to find a PriceChangeNotification
     * @example
     * // Get one PriceChangeNotification
     * const priceChangeNotification = await prisma.priceChangeNotification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PriceChangeNotificationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceChangeNotificationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PriceChangeNotificationClient<$Result.GetResult<Prisma.$PriceChangeNotificationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PriceChangeNotifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceChangeNotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PriceChangeNotifications
     * const priceChangeNotifications = await prisma.priceChangeNotification.findMany()
     * 
     * // Get first 10 PriceChangeNotifications
     * const priceChangeNotifications = await prisma.priceChangeNotification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const priceChangeNotificationWithIdOnly = await prisma.priceChangeNotification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PriceChangeNotificationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceChangeNotificationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceChangeNotificationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PriceChangeNotification.
     * @param {PriceChangeNotificationCreateArgs} args - Arguments to create a PriceChangeNotification.
     * @example
     * // Create one PriceChangeNotification
     * const PriceChangeNotification = await prisma.priceChangeNotification.create({
     *   data: {
     *     // ... data to create a PriceChangeNotification
     *   }
     * })
     * 
    **/
    create<T extends PriceChangeNotificationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PriceChangeNotificationCreateArgs<ExtArgs>>
    ): Prisma__PriceChangeNotificationClient<$Result.GetResult<Prisma.$PriceChangeNotificationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PriceChangeNotifications.
     *     @param {PriceChangeNotificationCreateManyArgs} args - Arguments to create many PriceChangeNotifications.
     *     @example
     *     // Create many PriceChangeNotifications
     *     const priceChangeNotification = await prisma.priceChangeNotification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PriceChangeNotificationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceChangeNotificationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PriceChangeNotification.
     * @param {PriceChangeNotificationDeleteArgs} args - Arguments to delete one PriceChangeNotification.
     * @example
     * // Delete one PriceChangeNotification
     * const PriceChangeNotification = await prisma.priceChangeNotification.delete({
     *   where: {
     *     // ... filter to delete one PriceChangeNotification
     *   }
     * })
     * 
    **/
    delete<T extends PriceChangeNotificationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PriceChangeNotificationDeleteArgs<ExtArgs>>
    ): Prisma__PriceChangeNotificationClient<$Result.GetResult<Prisma.$PriceChangeNotificationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PriceChangeNotification.
     * @param {PriceChangeNotificationUpdateArgs} args - Arguments to update one PriceChangeNotification.
     * @example
     * // Update one PriceChangeNotification
     * const priceChangeNotification = await prisma.priceChangeNotification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PriceChangeNotificationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PriceChangeNotificationUpdateArgs<ExtArgs>>
    ): Prisma__PriceChangeNotificationClient<$Result.GetResult<Prisma.$PriceChangeNotificationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PriceChangeNotifications.
     * @param {PriceChangeNotificationDeleteManyArgs} args - Arguments to filter PriceChangeNotifications to delete.
     * @example
     * // Delete a few PriceChangeNotifications
     * const { count } = await prisma.priceChangeNotification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PriceChangeNotificationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PriceChangeNotificationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PriceChangeNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceChangeNotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PriceChangeNotifications
     * const priceChangeNotification = await prisma.priceChangeNotification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PriceChangeNotificationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PriceChangeNotificationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PriceChangeNotification.
     * @param {PriceChangeNotificationUpsertArgs} args - Arguments to update or create a PriceChangeNotification.
     * @example
     * // Update or create a PriceChangeNotification
     * const priceChangeNotification = await prisma.priceChangeNotification.upsert({
     *   create: {
     *     // ... data to create a PriceChangeNotification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PriceChangeNotification we want to update
     *   }
     * })
    **/
    upsert<T extends PriceChangeNotificationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PriceChangeNotificationUpsertArgs<ExtArgs>>
    ): Prisma__PriceChangeNotificationClient<$Result.GetResult<Prisma.$PriceChangeNotificationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PriceChangeNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceChangeNotificationCountArgs} args - Arguments to filter PriceChangeNotifications to count.
     * @example
     * // Count the number of PriceChangeNotifications
     * const count = await prisma.priceChangeNotification.count({
     *   where: {
     *     // ... the filter for the PriceChangeNotifications we want to count
     *   }
     * })
    **/
    count<T extends PriceChangeNotificationCountArgs>(
      args?: Subset<T, PriceChangeNotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PriceChangeNotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PriceChangeNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceChangeNotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PriceChangeNotificationAggregateArgs>(args: Subset<T, PriceChangeNotificationAggregateArgs>): Prisma.PrismaPromise<GetPriceChangeNotificationAggregateType<T>>

    /**
     * Group by PriceChangeNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceChangeNotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PriceChangeNotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PriceChangeNotificationGroupByArgs['orderBy'] }
        : { orderBy?: PriceChangeNotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PriceChangeNotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPriceChangeNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PriceChangeNotification model
   */
  readonly fields: PriceChangeNotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PriceChangeNotification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PriceChangeNotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    productRecord<T extends ProductRecordDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductRecordDefaultArgs<ExtArgs>>): Prisma__ProductRecordClient<$Result.GetResult<Prisma.$ProductRecordPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    subscription<T extends PriceChangeSubscriptionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PriceChangeSubscriptionDefaultArgs<ExtArgs>>): Prisma__PriceChangeSubscriptionClient<$Result.GetResult<Prisma.$PriceChangeSubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    delegate_aux_notification<T extends NotificationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationDefaultArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PriceChangeNotification model
   */ 
  interface PriceChangeNotificationFieldRefs {
    readonly id: FieldRef<"PriceChangeNotification", 'String'>
    readonly productRecordId: FieldRef<"PriceChangeNotification", 'String'>
    readonly subscriptionId: FieldRef<"PriceChangeNotification", 'String'>
    readonly condition: FieldRef<"PriceChangeNotification", 'PriceChangeSubscriptionCondition'>
    readonly previousPrice: FieldRef<"PriceChangeNotification", 'Float'>
    readonly newPrice: FieldRef<"PriceChangeNotification", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * PriceChangeNotification findUnique
   */
  export type PriceChangeNotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeNotification
     */
    select?: PriceChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeNotificationInclude<ExtArgs> | null
    /**
     * Filter, which PriceChangeNotification to fetch.
     */
    where: PriceChangeNotificationWhereUniqueInput
  }


  /**
   * PriceChangeNotification findUniqueOrThrow
   */
  export type PriceChangeNotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeNotification
     */
    select?: PriceChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeNotificationInclude<ExtArgs> | null
    /**
     * Filter, which PriceChangeNotification to fetch.
     */
    where: PriceChangeNotificationWhereUniqueInput
  }


  /**
   * PriceChangeNotification findFirst
   */
  export type PriceChangeNotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeNotification
     */
    select?: PriceChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeNotificationInclude<ExtArgs> | null
    /**
     * Filter, which PriceChangeNotification to fetch.
     */
    where?: PriceChangeNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceChangeNotifications to fetch.
     */
    orderBy?: PriceChangeNotificationOrderByWithRelationInput | PriceChangeNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceChangeNotifications.
     */
    cursor?: PriceChangeNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceChangeNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceChangeNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceChangeNotifications.
     */
    distinct?: PriceChangeNotificationScalarFieldEnum | PriceChangeNotificationScalarFieldEnum[]
  }


  /**
   * PriceChangeNotification findFirstOrThrow
   */
  export type PriceChangeNotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeNotification
     */
    select?: PriceChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeNotificationInclude<ExtArgs> | null
    /**
     * Filter, which PriceChangeNotification to fetch.
     */
    where?: PriceChangeNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceChangeNotifications to fetch.
     */
    orderBy?: PriceChangeNotificationOrderByWithRelationInput | PriceChangeNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceChangeNotifications.
     */
    cursor?: PriceChangeNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceChangeNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceChangeNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceChangeNotifications.
     */
    distinct?: PriceChangeNotificationScalarFieldEnum | PriceChangeNotificationScalarFieldEnum[]
  }


  /**
   * PriceChangeNotification findMany
   */
  export type PriceChangeNotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeNotification
     */
    select?: PriceChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeNotificationInclude<ExtArgs> | null
    /**
     * Filter, which PriceChangeNotifications to fetch.
     */
    where?: PriceChangeNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceChangeNotifications to fetch.
     */
    orderBy?: PriceChangeNotificationOrderByWithRelationInput | PriceChangeNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PriceChangeNotifications.
     */
    cursor?: PriceChangeNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceChangeNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceChangeNotifications.
     */
    skip?: number
    distinct?: PriceChangeNotificationScalarFieldEnum | PriceChangeNotificationScalarFieldEnum[]
  }


  /**
   * PriceChangeNotification create
   */
  export type PriceChangeNotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeNotification
     */
    select?: PriceChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeNotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a PriceChangeNotification.
     */
    data: XOR<PriceChangeNotificationCreateInput, PriceChangeNotificationUncheckedCreateInput>
  }


  /**
   * PriceChangeNotification createMany
   */
  export type PriceChangeNotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PriceChangeNotifications.
     */
    data: PriceChangeNotificationCreateManyInput | PriceChangeNotificationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PriceChangeNotification update
   */
  export type PriceChangeNotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeNotification
     */
    select?: PriceChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeNotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a PriceChangeNotification.
     */
    data: XOR<PriceChangeNotificationUpdateInput, PriceChangeNotificationUncheckedUpdateInput>
    /**
     * Choose, which PriceChangeNotification to update.
     */
    where: PriceChangeNotificationWhereUniqueInput
  }


  /**
   * PriceChangeNotification updateMany
   */
  export type PriceChangeNotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PriceChangeNotifications.
     */
    data: XOR<PriceChangeNotificationUpdateManyMutationInput, PriceChangeNotificationUncheckedUpdateManyInput>
    /**
     * Filter which PriceChangeNotifications to update
     */
    where?: PriceChangeNotificationWhereInput
  }


  /**
   * PriceChangeNotification upsert
   */
  export type PriceChangeNotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeNotification
     */
    select?: PriceChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeNotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the PriceChangeNotification to update in case it exists.
     */
    where: PriceChangeNotificationWhereUniqueInput
    /**
     * In case the PriceChangeNotification found by the `where` argument doesn't exist, create a new PriceChangeNotification with this data.
     */
    create: XOR<PriceChangeNotificationCreateInput, PriceChangeNotificationUncheckedCreateInput>
    /**
     * In case the PriceChangeNotification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PriceChangeNotificationUpdateInput, PriceChangeNotificationUncheckedUpdateInput>
  }


  /**
   * PriceChangeNotification delete
   */
  export type PriceChangeNotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeNotification
     */
    select?: PriceChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeNotificationInclude<ExtArgs> | null
    /**
     * Filter which PriceChangeNotification to delete.
     */
    where: PriceChangeNotificationWhereUniqueInput
  }


  /**
   * PriceChangeNotification deleteMany
   */
  export type PriceChangeNotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceChangeNotifications to delete
     */
    where?: PriceChangeNotificationWhereInput
  }


  /**
   * PriceChangeNotification without action
   */
  export type PriceChangeNotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceChangeNotification
     */
    select?: PriceChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PriceChangeNotificationInclude<ExtArgs> | null
  }



  /**
   * Model StatusChangeNotification
   */

  export type AggregateStatusChangeNotification = {
    _count: StatusChangeNotificationCountAggregateOutputType | null
    _min: StatusChangeNotificationMinAggregateOutputType | null
    _max: StatusChangeNotificationMaxAggregateOutputType | null
  }

  export type StatusChangeNotificationMinAggregateOutputType = {
    id: string | null
    productRecordId: string | null
    subscriptionId: string | null
    previousStatus: $Enums.ProductStatus | null
    newStatus: $Enums.ProductStatus | null
  }

  export type StatusChangeNotificationMaxAggregateOutputType = {
    id: string | null
    productRecordId: string | null
    subscriptionId: string | null
    previousStatus: $Enums.ProductStatus | null
    newStatus: $Enums.ProductStatus | null
  }

  export type StatusChangeNotificationCountAggregateOutputType = {
    id: number
    productRecordId: number
    subscriptionId: number
    previousStatus: number
    newStatus: number
    _all: number
  }


  export type StatusChangeNotificationMinAggregateInputType = {
    id?: true
    productRecordId?: true
    subscriptionId?: true
    previousStatus?: true
    newStatus?: true
  }

  export type StatusChangeNotificationMaxAggregateInputType = {
    id?: true
    productRecordId?: true
    subscriptionId?: true
    previousStatus?: true
    newStatus?: true
  }

  export type StatusChangeNotificationCountAggregateInputType = {
    id?: true
    productRecordId?: true
    subscriptionId?: true
    previousStatus?: true
    newStatus?: true
    _all?: true
  }

  export type StatusChangeNotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusChangeNotification to aggregate.
     */
    where?: StatusChangeNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusChangeNotifications to fetch.
     */
    orderBy?: StatusChangeNotificationOrderByWithRelationInput | StatusChangeNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusChangeNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusChangeNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusChangeNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StatusChangeNotifications
    **/
    _count?: true | StatusChangeNotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusChangeNotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusChangeNotificationMaxAggregateInputType
  }

  export type GetStatusChangeNotificationAggregateType<T extends StatusChangeNotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusChangeNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusChangeNotification[P]>
      : GetScalarType<T[P], AggregateStatusChangeNotification[P]>
  }




  export type StatusChangeNotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusChangeNotificationWhereInput
    orderBy?: StatusChangeNotificationOrderByWithAggregationInput | StatusChangeNotificationOrderByWithAggregationInput[]
    by: StatusChangeNotificationScalarFieldEnum[] | StatusChangeNotificationScalarFieldEnum
    having?: StatusChangeNotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusChangeNotificationCountAggregateInputType | true
    _min?: StatusChangeNotificationMinAggregateInputType
    _max?: StatusChangeNotificationMaxAggregateInputType
  }

  export type StatusChangeNotificationGroupByOutputType = {
    id: string
    productRecordId: string
    subscriptionId: string
    previousStatus: $Enums.ProductStatus
    newStatus: $Enums.ProductStatus
    _count: StatusChangeNotificationCountAggregateOutputType | null
    _min: StatusChangeNotificationMinAggregateOutputType | null
    _max: StatusChangeNotificationMaxAggregateOutputType | null
  }

  type GetStatusChangeNotificationGroupByPayload<T extends StatusChangeNotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusChangeNotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusChangeNotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusChangeNotificationGroupByOutputType[P]>
            : GetScalarType<T[P], StatusChangeNotificationGroupByOutputType[P]>
        }
      >
    >


  export type StatusChangeNotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productRecordId?: boolean
    subscriptionId?: boolean
    previousStatus?: boolean
    newStatus?: boolean
    productRecord?: boolean | ProductRecordDefaultArgs<ExtArgs>
    subscription?: boolean | StatusChangeSubscriptionDefaultArgs<ExtArgs>
    delegate_aux_notification?: boolean | NotificationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusChangeNotification"]>

  export type StatusChangeNotificationSelectScalar = {
    id?: boolean
    productRecordId?: boolean
    subscriptionId?: boolean
    previousStatus?: boolean
    newStatus?: boolean
  }

  export type StatusChangeNotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productRecord?: boolean | ProductRecordDefaultArgs<ExtArgs>
    subscription?: boolean | StatusChangeSubscriptionDefaultArgs<ExtArgs>
    delegate_aux_notification?: boolean | NotificationDefaultArgs<ExtArgs>
  }


  export type $StatusChangeNotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StatusChangeNotification"
    objects: {
      productRecord: Prisma.$ProductRecordPayload<ExtArgs>
      subscription: Prisma.$StatusChangeSubscriptionPayload<ExtArgs>
      delegate_aux_notification: Prisma.$NotificationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productRecordId: string
      subscriptionId: string
      previousStatus: $Enums.ProductStatus
      newStatus: $Enums.ProductStatus
    }, ExtArgs["result"]["statusChangeNotification"]>
    composites: {}
  }


  type StatusChangeNotificationGetPayload<S extends boolean | null | undefined | StatusChangeNotificationDefaultArgs> = $Result.GetResult<Prisma.$StatusChangeNotificationPayload, S>

  type StatusChangeNotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StatusChangeNotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StatusChangeNotificationCountAggregateInputType | true
    }

  export interface StatusChangeNotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StatusChangeNotification'], meta: { name: 'StatusChangeNotification' } }
    /**
     * Find zero or one StatusChangeNotification that matches the filter.
     * @param {StatusChangeNotificationFindUniqueArgs} args - Arguments to find a StatusChangeNotification
     * @example
     * // Get one StatusChangeNotification
     * const statusChangeNotification = await prisma.statusChangeNotification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatusChangeNotificationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeNotificationFindUniqueArgs<ExtArgs>>
    ): Prisma__StatusChangeNotificationClient<$Result.GetResult<Prisma.$StatusChangeNotificationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StatusChangeNotification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StatusChangeNotificationFindUniqueOrThrowArgs} args - Arguments to find a StatusChangeNotification
     * @example
     * // Get one StatusChangeNotification
     * const statusChangeNotification = await prisma.statusChangeNotification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StatusChangeNotificationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeNotificationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StatusChangeNotificationClient<$Result.GetResult<Prisma.$StatusChangeNotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StatusChangeNotification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeNotificationFindFirstArgs} args - Arguments to find a StatusChangeNotification
     * @example
     * // Get one StatusChangeNotification
     * const statusChangeNotification = await prisma.statusChangeNotification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatusChangeNotificationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeNotificationFindFirstArgs<ExtArgs>>
    ): Prisma__StatusChangeNotificationClient<$Result.GetResult<Prisma.$StatusChangeNotificationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StatusChangeNotification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeNotificationFindFirstOrThrowArgs} args - Arguments to find a StatusChangeNotification
     * @example
     * // Get one StatusChangeNotification
     * const statusChangeNotification = await prisma.statusChangeNotification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StatusChangeNotificationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeNotificationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StatusChangeNotificationClient<$Result.GetResult<Prisma.$StatusChangeNotificationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StatusChangeNotifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeNotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusChangeNotifications
     * const statusChangeNotifications = await prisma.statusChangeNotification.findMany()
     * 
     * // Get first 10 StatusChangeNotifications
     * const statusChangeNotifications = await prisma.statusChangeNotification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusChangeNotificationWithIdOnly = await prisma.statusChangeNotification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatusChangeNotificationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeNotificationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusChangeNotificationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StatusChangeNotification.
     * @param {StatusChangeNotificationCreateArgs} args - Arguments to create a StatusChangeNotification.
     * @example
     * // Create one StatusChangeNotification
     * const StatusChangeNotification = await prisma.statusChangeNotification.create({
     *   data: {
     *     // ... data to create a StatusChangeNotification
     *   }
     * })
     * 
    **/
    create<T extends StatusChangeNotificationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeNotificationCreateArgs<ExtArgs>>
    ): Prisma__StatusChangeNotificationClient<$Result.GetResult<Prisma.$StatusChangeNotificationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StatusChangeNotifications.
     *     @param {StatusChangeNotificationCreateManyArgs} args - Arguments to create many StatusChangeNotifications.
     *     @example
     *     // Create many StatusChangeNotifications
     *     const statusChangeNotification = await prisma.statusChangeNotification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatusChangeNotificationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeNotificationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StatusChangeNotification.
     * @param {StatusChangeNotificationDeleteArgs} args - Arguments to delete one StatusChangeNotification.
     * @example
     * // Delete one StatusChangeNotification
     * const StatusChangeNotification = await prisma.statusChangeNotification.delete({
     *   where: {
     *     // ... filter to delete one StatusChangeNotification
     *   }
     * })
     * 
    **/
    delete<T extends StatusChangeNotificationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeNotificationDeleteArgs<ExtArgs>>
    ): Prisma__StatusChangeNotificationClient<$Result.GetResult<Prisma.$StatusChangeNotificationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StatusChangeNotification.
     * @param {StatusChangeNotificationUpdateArgs} args - Arguments to update one StatusChangeNotification.
     * @example
     * // Update one StatusChangeNotification
     * const statusChangeNotification = await prisma.statusChangeNotification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatusChangeNotificationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeNotificationUpdateArgs<ExtArgs>>
    ): Prisma__StatusChangeNotificationClient<$Result.GetResult<Prisma.$StatusChangeNotificationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StatusChangeNotifications.
     * @param {StatusChangeNotificationDeleteManyArgs} args - Arguments to filter StatusChangeNotifications to delete.
     * @example
     * // Delete a few StatusChangeNotifications
     * const { count } = await prisma.statusChangeNotification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatusChangeNotificationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusChangeNotificationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusChangeNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeNotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusChangeNotifications
     * const statusChangeNotification = await prisma.statusChangeNotification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatusChangeNotificationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeNotificationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StatusChangeNotification.
     * @param {StatusChangeNotificationUpsertArgs} args - Arguments to update or create a StatusChangeNotification.
     * @example
     * // Update or create a StatusChangeNotification
     * const statusChangeNotification = await prisma.statusChangeNotification.upsert({
     *   create: {
     *     // ... data to create a StatusChangeNotification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusChangeNotification we want to update
     *   }
     * })
    **/
    upsert<T extends StatusChangeNotificationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StatusChangeNotificationUpsertArgs<ExtArgs>>
    ): Prisma__StatusChangeNotificationClient<$Result.GetResult<Prisma.$StatusChangeNotificationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StatusChangeNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeNotificationCountArgs} args - Arguments to filter StatusChangeNotifications to count.
     * @example
     * // Count the number of StatusChangeNotifications
     * const count = await prisma.statusChangeNotification.count({
     *   where: {
     *     // ... the filter for the StatusChangeNotifications we want to count
     *   }
     * })
    **/
    count<T extends StatusChangeNotificationCountArgs>(
      args?: Subset<T, StatusChangeNotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusChangeNotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusChangeNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeNotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusChangeNotificationAggregateArgs>(args: Subset<T, StatusChangeNotificationAggregateArgs>): Prisma.PrismaPromise<GetStatusChangeNotificationAggregateType<T>>

    /**
     * Group by StatusChangeNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusChangeNotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusChangeNotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusChangeNotificationGroupByArgs['orderBy'] }
        : { orderBy?: StatusChangeNotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusChangeNotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusChangeNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StatusChangeNotification model
   */
  readonly fields: StatusChangeNotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StatusChangeNotification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusChangeNotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    productRecord<T extends ProductRecordDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductRecordDefaultArgs<ExtArgs>>): Prisma__ProductRecordClient<$Result.GetResult<Prisma.$ProductRecordPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    subscription<T extends StatusChangeSubscriptionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StatusChangeSubscriptionDefaultArgs<ExtArgs>>): Prisma__StatusChangeSubscriptionClient<$Result.GetResult<Prisma.$StatusChangeSubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    delegate_aux_notification<T extends NotificationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationDefaultArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the StatusChangeNotification model
   */ 
  interface StatusChangeNotificationFieldRefs {
    readonly id: FieldRef<"StatusChangeNotification", 'String'>
    readonly productRecordId: FieldRef<"StatusChangeNotification", 'String'>
    readonly subscriptionId: FieldRef<"StatusChangeNotification", 'String'>
    readonly previousStatus: FieldRef<"StatusChangeNotification", 'ProductStatus'>
    readonly newStatus: FieldRef<"StatusChangeNotification", 'ProductStatus'>
  }
    

  // Custom InputTypes

  /**
   * StatusChangeNotification findUnique
   */
  export type StatusChangeNotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeNotification
     */
    select?: StatusChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeNotificationInclude<ExtArgs> | null
    /**
     * Filter, which StatusChangeNotification to fetch.
     */
    where: StatusChangeNotificationWhereUniqueInput
  }


  /**
   * StatusChangeNotification findUniqueOrThrow
   */
  export type StatusChangeNotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeNotification
     */
    select?: StatusChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeNotificationInclude<ExtArgs> | null
    /**
     * Filter, which StatusChangeNotification to fetch.
     */
    where: StatusChangeNotificationWhereUniqueInput
  }


  /**
   * StatusChangeNotification findFirst
   */
  export type StatusChangeNotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeNotification
     */
    select?: StatusChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeNotificationInclude<ExtArgs> | null
    /**
     * Filter, which StatusChangeNotification to fetch.
     */
    where?: StatusChangeNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusChangeNotifications to fetch.
     */
    orderBy?: StatusChangeNotificationOrderByWithRelationInput | StatusChangeNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusChangeNotifications.
     */
    cursor?: StatusChangeNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusChangeNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusChangeNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusChangeNotifications.
     */
    distinct?: StatusChangeNotificationScalarFieldEnum | StatusChangeNotificationScalarFieldEnum[]
  }


  /**
   * StatusChangeNotification findFirstOrThrow
   */
  export type StatusChangeNotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeNotification
     */
    select?: StatusChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeNotificationInclude<ExtArgs> | null
    /**
     * Filter, which StatusChangeNotification to fetch.
     */
    where?: StatusChangeNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusChangeNotifications to fetch.
     */
    orderBy?: StatusChangeNotificationOrderByWithRelationInput | StatusChangeNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusChangeNotifications.
     */
    cursor?: StatusChangeNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusChangeNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusChangeNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusChangeNotifications.
     */
    distinct?: StatusChangeNotificationScalarFieldEnum | StatusChangeNotificationScalarFieldEnum[]
  }


  /**
   * StatusChangeNotification findMany
   */
  export type StatusChangeNotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeNotification
     */
    select?: StatusChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeNotificationInclude<ExtArgs> | null
    /**
     * Filter, which StatusChangeNotifications to fetch.
     */
    where?: StatusChangeNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusChangeNotifications to fetch.
     */
    orderBy?: StatusChangeNotificationOrderByWithRelationInput | StatusChangeNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StatusChangeNotifications.
     */
    cursor?: StatusChangeNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusChangeNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusChangeNotifications.
     */
    skip?: number
    distinct?: StatusChangeNotificationScalarFieldEnum | StatusChangeNotificationScalarFieldEnum[]
  }


  /**
   * StatusChangeNotification create
   */
  export type StatusChangeNotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeNotification
     */
    select?: StatusChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeNotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a StatusChangeNotification.
     */
    data: XOR<StatusChangeNotificationCreateInput, StatusChangeNotificationUncheckedCreateInput>
  }


  /**
   * StatusChangeNotification createMany
   */
  export type StatusChangeNotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StatusChangeNotifications.
     */
    data: StatusChangeNotificationCreateManyInput | StatusChangeNotificationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * StatusChangeNotification update
   */
  export type StatusChangeNotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeNotification
     */
    select?: StatusChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeNotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a StatusChangeNotification.
     */
    data: XOR<StatusChangeNotificationUpdateInput, StatusChangeNotificationUncheckedUpdateInput>
    /**
     * Choose, which StatusChangeNotification to update.
     */
    where: StatusChangeNotificationWhereUniqueInput
  }


  /**
   * StatusChangeNotification updateMany
   */
  export type StatusChangeNotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StatusChangeNotifications.
     */
    data: XOR<StatusChangeNotificationUpdateManyMutationInput, StatusChangeNotificationUncheckedUpdateManyInput>
    /**
     * Filter which StatusChangeNotifications to update
     */
    where?: StatusChangeNotificationWhereInput
  }


  /**
   * StatusChangeNotification upsert
   */
  export type StatusChangeNotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeNotification
     */
    select?: StatusChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeNotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the StatusChangeNotification to update in case it exists.
     */
    where: StatusChangeNotificationWhereUniqueInput
    /**
     * In case the StatusChangeNotification found by the `where` argument doesn't exist, create a new StatusChangeNotification with this data.
     */
    create: XOR<StatusChangeNotificationCreateInput, StatusChangeNotificationUncheckedCreateInput>
    /**
     * In case the StatusChangeNotification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusChangeNotificationUpdateInput, StatusChangeNotificationUncheckedUpdateInput>
  }


  /**
   * StatusChangeNotification delete
   */
  export type StatusChangeNotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeNotification
     */
    select?: StatusChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeNotificationInclude<ExtArgs> | null
    /**
     * Filter which StatusChangeNotification to delete.
     */
    where: StatusChangeNotificationWhereUniqueInput
  }


  /**
   * StatusChangeNotification deleteMany
   */
  export type StatusChangeNotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusChangeNotifications to delete
     */
    where?: StatusChangeNotificationWhereInput
  }


  /**
   * StatusChangeNotification without action
   */
  export type StatusChangeNotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusChangeNotification
     */
    select?: StatusChangeNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusChangeNotificationInclude<ExtArgs> | null
  }



  /**
   * Model NewProductNotification
   */

  export type AggregateNewProductNotification = {
    _count: NewProductNotificationCountAggregateOutputType | null
    _min: NewProductNotificationMinAggregateOutputType | null
    _max: NewProductNotificationMaxAggregateOutputType | null
  }

  export type NewProductNotificationMinAggregateOutputType = {
    id: string | null
    productId: string | null
  }

  export type NewProductNotificationMaxAggregateOutputType = {
    id: string | null
    productId: string | null
  }

  export type NewProductNotificationCountAggregateOutputType = {
    id: number
    productId: number
    _all: number
  }


  export type NewProductNotificationMinAggregateInputType = {
    id?: true
    productId?: true
  }

  export type NewProductNotificationMaxAggregateInputType = {
    id?: true
    productId?: true
  }

  export type NewProductNotificationCountAggregateInputType = {
    id?: true
    productId?: true
    _all?: true
  }

  export type NewProductNotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NewProductNotification to aggregate.
     */
    where?: NewProductNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewProductNotifications to fetch.
     */
    orderBy?: NewProductNotificationOrderByWithRelationInput | NewProductNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NewProductNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewProductNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewProductNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NewProductNotifications
    **/
    _count?: true | NewProductNotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewProductNotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewProductNotificationMaxAggregateInputType
  }

  export type GetNewProductNotificationAggregateType<T extends NewProductNotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNewProductNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNewProductNotification[P]>
      : GetScalarType<T[P], AggregateNewProductNotification[P]>
  }




  export type NewProductNotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewProductNotificationWhereInput
    orderBy?: NewProductNotificationOrderByWithAggregationInput | NewProductNotificationOrderByWithAggregationInput[]
    by: NewProductNotificationScalarFieldEnum[] | NewProductNotificationScalarFieldEnum
    having?: NewProductNotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewProductNotificationCountAggregateInputType | true
    _min?: NewProductNotificationMinAggregateInputType
    _max?: NewProductNotificationMaxAggregateInputType
  }

  export type NewProductNotificationGroupByOutputType = {
    id: string
    productId: string
    _count: NewProductNotificationCountAggregateOutputType | null
    _min: NewProductNotificationMinAggregateOutputType | null
    _max: NewProductNotificationMaxAggregateOutputType | null
  }

  type GetNewProductNotificationGroupByPayload<T extends NewProductNotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NewProductNotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewProductNotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewProductNotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NewProductNotificationGroupByOutputType[P]>
        }
      >
    >


  export type NewProductNotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    delegate_aux_notification?: boolean | NotificationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["newProductNotification"]>

  export type NewProductNotificationSelectScalar = {
    id?: boolean
    productId?: boolean
  }

  export type NewProductNotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    delegate_aux_notification?: boolean | NotificationDefaultArgs<ExtArgs>
  }


  export type $NewProductNotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NewProductNotification"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      delegate_aux_notification: Prisma.$NotificationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
    }, ExtArgs["result"]["newProductNotification"]>
    composites: {}
  }


  type NewProductNotificationGetPayload<S extends boolean | null | undefined | NewProductNotificationDefaultArgs> = $Result.GetResult<Prisma.$NewProductNotificationPayload, S>

  type NewProductNotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NewProductNotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NewProductNotificationCountAggregateInputType | true
    }

  export interface NewProductNotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NewProductNotification'], meta: { name: 'NewProductNotification' } }
    /**
     * Find zero or one NewProductNotification that matches the filter.
     * @param {NewProductNotificationFindUniqueArgs} args - Arguments to find a NewProductNotification
     * @example
     * // Get one NewProductNotification
     * const newProductNotification = await prisma.newProductNotification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NewProductNotificationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NewProductNotificationFindUniqueArgs<ExtArgs>>
    ): Prisma__NewProductNotificationClient<$Result.GetResult<Prisma.$NewProductNotificationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one NewProductNotification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NewProductNotificationFindUniqueOrThrowArgs} args - Arguments to find a NewProductNotification
     * @example
     * // Get one NewProductNotification
     * const newProductNotification = await prisma.newProductNotification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NewProductNotificationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NewProductNotificationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NewProductNotificationClient<$Result.GetResult<Prisma.$NewProductNotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first NewProductNotification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewProductNotificationFindFirstArgs} args - Arguments to find a NewProductNotification
     * @example
     * // Get one NewProductNotification
     * const newProductNotification = await prisma.newProductNotification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NewProductNotificationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NewProductNotificationFindFirstArgs<ExtArgs>>
    ): Prisma__NewProductNotificationClient<$Result.GetResult<Prisma.$NewProductNotificationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first NewProductNotification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewProductNotificationFindFirstOrThrowArgs} args - Arguments to find a NewProductNotification
     * @example
     * // Get one NewProductNotification
     * const newProductNotification = await prisma.newProductNotification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NewProductNotificationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NewProductNotificationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NewProductNotificationClient<$Result.GetResult<Prisma.$NewProductNotificationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more NewProductNotifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewProductNotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NewProductNotifications
     * const newProductNotifications = await prisma.newProductNotification.findMany()
     * 
     * // Get first 10 NewProductNotifications
     * const newProductNotifications = await prisma.newProductNotification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newProductNotificationWithIdOnly = await prisma.newProductNotification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NewProductNotificationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NewProductNotificationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewProductNotificationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a NewProductNotification.
     * @param {NewProductNotificationCreateArgs} args - Arguments to create a NewProductNotification.
     * @example
     * // Create one NewProductNotification
     * const NewProductNotification = await prisma.newProductNotification.create({
     *   data: {
     *     // ... data to create a NewProductNotification
     *   }
     * })
     * 
    **/
    create<T extends NewProductNotificationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NewProductNotificationCreateArgs<ExtArgs>>
    ): Prisma__NewProductNotificationClient<$Result.GetResult<Prisma.$NewProductNotificationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many NewProductNotifications.
     *     @param {NewProductNotificationCreateManyArgs} args - Arguments to create many NewProductNotifications.
     *     @example
     *     // Create many NewProductNotifications
     *     const newProductNotification = await prisma.newProductNotification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NewProductNotificationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NewProductNotificationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NewProductNotification.
     * @param {NewProductNotificationDeleteArgs} args - Arguments to delete one NewProductNotification.
     * @example
     * // Delete one NewProductNotification
     * const NewProductNotification = await prisma.newProductNotification.delete({
     *   where: {
     *     // ... filter to delete one NewProductNotification
     *   }
     * })
     * 
    **/
    delete<T extends NewProductNotificationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NewProductNotificationDeleteArgs<ExtArgs>>
    ): Prisma__NewProductNotificationClient<$Result.GetResult<Prisma.$NewProductNotificationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one NewProductNotification.
     * @param {NewProductNotificationUpdateArgs} args - Arguments to update one NewProductNotification.
     * @example
     * // Update one NewProductNotification
     * const newProductNotification = await prisma.newProductNotification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NewProductNotificationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NewProductNotificationUpdateArgs<ExtArgs>>
    ): Prisma__NewProductNotificationClient<$Result.GetResult<Prisma.$NewProductNotificationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more NewProductNotifications.
     * @param {NewProductNotificationDeleteManyArgs} args - Arguments to filter NewProductNotifications to delete.
     * @example
     * // Delete a few NewProductNotifications
     * const { count } = await prisma.newProductNotification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NewProductNotificationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NewProductNotificationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NewProductNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewProductNotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NewProductNotifications
     * const newProductNotification = await prisma.newProductNotification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NewProductNotificationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NewProductNotificationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NewProductNotification.
     * @param {NewProductNotificationUpsertArgs} args - Arguments to update or create a NewProductNotification.
     * @example
     * // Update or create a NewProductNotification
     * const newProductNotification = await prisma.newProductNotification.upsert({
     *   create: {
     *     // ... data to create a NewProductNotification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NewProductNotification we want to update
     *   }
     * })
    **/
    upsert<T extends NewProductNotificationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NewProductNotificationUpsertArgs<ExtArgs>>
    ): Prisma__NewProductNotificationClient<$Result.GetResult<Prisma.$NewProductNotificationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of NewProductNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewProductNotificationCountArgs} args - Arguments to filter NewProductNotifications to count.
     * @example
     * // Count the number of NewProductNotifications
     * const count = await prisma.newProductNotification.count({
     *   where: {
     *     // ... the filter for the NewProductNotifications we want to count
     *   }
     * })
    **/
    count<T extends NewProductNotificationCountArgs>(
      args?: Subset<T, NewProductNotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewProductNotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NewProductNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewProductNotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewProductNotificationAggregateArgs>(args: Subset<T, NewProductNotificationAggregateArgs>): Prisma.PrismaPromise<GetNewProductNotificationAggregateType<T>>

    /**
     * Group by NewProductNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewProductNotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewProductNotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewProductNotificationGroupByArgs['orderBy'] }
        : { orderBy?: NewProductNotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewProductNotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewProductNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NewProductNotification model
   */
  readonly fields: NewProductNotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NewProductNotification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NewProductNotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    delegate_aux_notification<T extends NotificationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationDefaultArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the NewProductNotification model
   */ 
  interface NewProductNotificationFieldRefs {
    readonly id: FieldRef<"NewProductNotification", 'String'>
    readonly productId: FieldRef<"NewProductNotification", 'String'>
  }
    

  // Custom InputTypes

  /**
   * NewProductNotification findUnique
   */
  export type NewProductNotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewProductNotification
     */
    select?: NewProductNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewProductNotificationInclude<ExtArgs> | null
    /**
     * Filter, which NewProductNotification to fetch.
     */
    where: NewProductNotificationWhereUniqueInput
  }


  /**
   * NewProductNotification findUniqueOrThrow
   */
  export type NewProductNotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewProductNotification
     */
    select?: NewProductNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewProductNotificationInclude<ExtArgs> | null
    /**
     * Filter, which NewProductNotification to fetch.
     */
    where: NewProductNotificationWhereUniqueInput
  }


  /**
   * NewProductNotification findFirst
   */
  export type NewProductNotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewProductNotification
     */
    select?: NewProductNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewProductNotificationInclude<ExtArgs> | null
    /**
     * Filter, which NewProductNotification to fetch.
     */
    where?: NewProductNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewProductNotifications to fetch.
     */
    orderBy?: NewProductNotificationOrderByWithRelationInput | NewProductNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NewProductNotifications.
     */
    cursor?: NewProductNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewProductNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewProductNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NewProductNotifications.
     */
    distinct?: NewProductNotificationScalarFieldEnum | NewProductNotificationScalarFieldEnum[]
  }


  /**
   * NewProductNotification findFirstOrThrow
   */
  export type NewProductNotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewProductNotification
     */
    select?: NewProductNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewProductNotificationInclude<ExtArgs> | null
    /**
     * Filter, which NewProductNotification to fetch.
     */
    where?: NewProductNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewProductNotifications to fetch.
     */
    orderBy?: NewProductNotificationOrderByWithRelationInput | NewProductNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NewProductNotifications.
     */
    cursor?: NewProductNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewProductNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewProductNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NewProductNotifications.
     */
    distinct?: NewProductNotificationScalarFieldEnum | NewProductNotificationScalarFieldEnum[]
  }


  /**
   * NewProductNotification findMany
   */
  export type NewProductNotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewProductNotification
     */
    select?: NewProductNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewProductNotificationInclude<ExtArgs> | null
    /**
     * Filter, which NewProductNotifications to fetch.
     */
    where?: NewProductNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NewProductNotifications to fetch.
     */
    orderBy?: NewProductNotificationOrderByWithRelationInput | NewProductNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NewProductNotifications.
     */
    cursor?: NewProductNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NewProductNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NewProductNotifications.
     */
    skip?: number
    distinct?: NewProductNotificationScalarFieldEnum | NewProductNotificationScalarFieldEnum[]
  }


  /**
   * NewProductNotification create
   */
  export type NewProductNotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewProductNotification
     */
    select?: NewProductNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewProductNotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a NewProductNotification.
     */
    data: XOR<NewProductNotificationCreateInput, NewProductNotificationUncheckedCreateInput>
  }


  /**
   * NewProductNotification createMany
   */
  export type NewProductNotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NewProductNotifications.
     */
    data: NewProductNotificationCreateManyInput | NewProductNotificationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * NewProductNotification update
   */
  export type NewProductNotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewProductNotification
     */
    select?: NewProductNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewProductNotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a NewProductNotification.
     */
    data: XOR<NewProductNotificationUpdateInput, NewProductNotificationUncheckedUpdateInput>
    /**
     * Choose, which NewProductNotification to update.
     */
    where: NewProductNotificationWhereUniqueInput
  }


  /**
   * NewProductNotification updateMany
   */
  export type NewProductNotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NewProductNotifications.
     */
    data: XOR<NewProductNotificationUpdateManyMutationInput, NewProductNotificationUncheckedUpdateManyInput>
    /**
     * Filter which NewProductNotifications to update
     */
    where?: NewProductNotificationWhereInput
  }


  /**
   * NewProductNotification upsert
   */
  export type NewProductNotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewProductNotification
     */
    select?: NewProductNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewProductNotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the NewProductNotification to update in case it exists.
     */
    where: NewProductNotificationWhereUniqueInput
    /**
     * In case the NewProductNotification found by the `where` argument doesn't exist, create a new NewProductNotification with this data.
     */
    create: XOR<NewProductNotificationCreateInput, NewProductNotificationUncheckedCreateInput>
    /**
     * In case the NewProductNotification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NewProductNotificationUpdateInput, NewProductNotificationUncheckedUpdateInput>
  }


  /**
   * NewProductNotification delete
   */
  export type NewProductNotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewProductNotification
     */
    select?: NewProductNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewProductNotificationInclude<ExtArgs> | null
    /**
     * Filter which NewProductNotification to delete.
     */
    where: NewProductNotificationWhereUniqueInput
  }


  /**
   * NewProductNotification deleteMany
   */
  export type NewProductNotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NewProductNotifications to delete
     */
    where?: NewProductNotificationWhereInput
  }


  /**
   * NewProductNotification without action
   */
  export type NewProductNotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewProductNotification
     */
    select?: NewProductNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NewProductNotificationInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    clerkId: 'clerkId',
    firstName: 'firstName',
    lastName: 'lastName',
    profileImageUrl: 'profileImageUrl',
    emailAddress: 'emailAddress',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const HttpNetworkErrorDataScalarFieldEnum: {
    id: 'id',
    url: 'url'
  };

  export type HttpNetworkErrorDataScalarFieldEnum = (typeof HttpNetworkErrorDataScalarFieldEnum)[keyof typeof HttpNetworkErrorDataScalarFieldEnum]


  export const HttpSerializationErrorDataScalarFieldEnum: {
    id: 'id',
    url: 'url'
  };

  export type HttpSerializationErrorDataScalarFieldEnum = (typeof HttpSerializationErrorDataScalarFieldEnum)[keyof typeof HttpSerializationErrorDataScalarFieldEnum]


  export const HttpClientErrorDataScalarFieldEnum: {
    id: 'id',
    url: 'url',
    status: 'status'
  };

  export type HttpClientErrorDataScalarFieldEnum = (typeof HttpClientErrorDataScalarFieldEnum)[keyof typeof HttpClientErrorDataScalarFieldEnum]


  export const MissingAttributeErrorDataScalarFieldEnum: {
    id: 'id',
    attribute: 'attribute',
    parentHtml: 'parentHtml'
  };

  export type MissingAttributeErrorDataScalarFieldEnum = (typeof MissingAttributeErrorDataScalarFieldEnum)[keyof typeof MissingAttributeErrorDataScalarFieldEnum]


  export const InvalidAttributeErrorDataScalarFieldEnum: {
    id: 'id',
    attribute: 'attribute',
    parentHtml: 'parentHtml',
    value: 'value'
  };

  export type InvalidAttributeErrorDataScalarFieldEnum = (typeof InvalidAttributeErrorDataScalarFieldEnum)[keyof typeof InvalidAttributeErrorDataScalarFieldEnum]


  export const InvalidTextErrorDataScalarFieldEnum: {
    id: 'id',
    parentHtml: 'parentHtml',
    value: 'value'
  };

  export type InvalidTextErrorDataScalarFieldEnum = (typeof InvalidTextErrorDataScalarFieldEnum)[keyof typeof InvalidTextErrorDataScalarFieldEnum]


  export const MissingTextErrorDataScalarFieldEnum: {
    id: 'id',
    parentHtml: 'parentHtml'
  };

  export type MissingTextErrorDataScalarFieldEnum = (typeof MissingTextErrorDataScalarFieldEnum)[keyof typeof MissingTextErrorDataScalarFieldEnum]


  export const NonUniqueTextErrorDataScalarFieldEnum: {
    id: 'id',
    parentHtml: 'parentHtml'
  };

  export type NonUniqueTextErrorDataScalarFieldEnum = (typeof NonUniqueTextErrorDataScalarFieldEnum)[keyof typeof NonUniqueTextErrorDataScalarFieldEnum]


  export const MissingElementErrorDataScalarFieldEnum: {
    id: 'id',
    parentHtml: 'parentHtml',
    selector: 'selector'
  };

  export type MissingElementErrorDataScalarFieldEnum = (typeof MissingElementErrorDataScalarFieldEnum)[keyof typeof MissingElementErrorDataScalarFieldEnum]


  export const NonUniqueElementErrorDataScalarFieldEnum: {
    id: 'id',
    parentHtml: 'parentHtml',
    selector: 'selector'
  };

  export type NonUniqueElementErrorDataScalarFieldEnum = (typeof NonUniqueElementErrorDataScalarFieldEnum)[keyof typeof NonUniqueElementErrorDataScalarFieldEnum]


  export const ProductRecordErrorScalarFieldEnum: {
    id: 'id',
    errorId: 'errorId',
    errorCode: 'errorCode',
    recordId: 'recordId',
    field: 'field',
    message: 'message'
  };

  export type ProductRecordErrorScalarFieldEnum = (typeof ProductRecordErrorScalarFieldEnum)[keyof typeof ProductRecordErrorScalarFieldEnum]


  export const ProductRecordScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById',
    timestamp: 'timestamp',
    productId: 'productId',
    price: 'price',
    rawPrice: 'rawPrice',
    status: 'status',
    wasManuallyCreated: 'wasManuallyCreated',
    manuallyChangedFields: 'manuallyChangedFields'
  };

  export type ProductRecordScalarFieldEnum = (typeof ProductRecordScalarFieldEnum)[keyof typeof ProductRecordScalarFieldEnum]


  export const ProcessedProductRecordScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById',
    recordId: 'recordId',
    userId: 'userId'
  };

  export type ProcessedProductRecordScalarFieldEnum = (typeof ProcessedProductRecordScalarFieldEnum)[keyof typeof ProcessedProductRecordScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById',
    name: 'name',
    slug: 'slug',
    code: 'code',
    imageSrc: 'imageSrc',
    status: 'status',
    statusLastUpdatedAt: 'statusLastUpdatedAt',
    statusAsOf: 'statusAsOf',
    price: 'price',
    priceLastUpdatedAt: 'priceLastUpdatedAt',
    priceAsOf: 'priceAsOf',
    category: 'category',
    subCategories: 'subCategories'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ProductSubscriptionScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById',
    subscriptionType: 'subscriptionType',
    userId: 'userId',
    productId: 'productId',
    enabled: 'enabled'
  };

  export type ProductSubscriptionScalarFieldEnum = (typeof ProductSubscriptionScalarFieldEnum)[keyof typeof ProductSubscriptionScalarFieldEnum]


  export const StatusChangeSubscriptionConditionScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    fromStatus: 'fromStatus',
    toStatus: 'toStatus',
    subscriptionId: 'subscriptionId'
  };

  export type StatusChangeSubscriptionConditionScalarFieldEnum = (typeof StatusChangeSubscriptionConditionScalarFieldEnum)[keyof typeof StatusChangeSubscriptionConditionScalarFieldEnum]


  export const StatusChangeSubscriptionScalarFieldEnum: {
    id: 'id'
  };

  export type StatusChangeSubscriptionScalarFieldEnum = (typeof StatusChangeSubscriptionScalarFieldEnum)[keyof typeof StatusChangeSubscriptionScalarFieldEnum]


  export const PriceChangeSubscriptionScalarFieldEnum: {
    id: 'id',
    conditions: 'conditions'
  };

  export type PriceChangeSubscriptionScalarFieldEnum = (typeof PriceChangeSubscriptionScalarFieldEnum)[keyof typeof PriceChangeSubscriptionScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById',
    userId: 'userId',
    notificationType: 'notificationType',
    state: 'state',
    stateAsOf: 'stateAsOf',
    failedAt: 'failedAt',
    sentAt: 'sentAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const PriceChangeNotificationScalarFieldEnum: {
    id: 'id',
    productRecordId: 'productRecordId',
    subscriptionId: 'subscriptionId',
    condition: 'condition',
    previousPrice: 'previousPrice',
    newPrice: 'newPrice'
  };

  export type PriceChangeNotificationScalarFieldEnum = (typeof PriceChangeNotificationScalarFieldEnum)[keyof typeof PriceChangeNotificationScalarFieldEnum]


  export const StatusChangeNotificationScalarFieldEnum: {
    id: 'id',
    productRecordId: 'productRecordId',
    subscriptionId: 'subscriptionId',
    previousStatus: 'previousStatus',
    newStatus: 'newStatus'
  };

  export type StatusChangeNotificationScalarFieldEnum = (typeof StatusChangeNotificationScalarFieldEnum)[keyof typeof StatusChangeNotificationScalarFieldEnum]


  export const NewProductNotificationScalarFieldEnum: {
    id: 'id',
    productId: 'productId'
  };

  export type NewProductNotificationScalarFieldEnum = (typeof NewProductNotificationScalarFieldEnum)[keyof typeof NewProductNotificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'ElementAttribute'
   */
  export type EnumElementAttributeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ElementAttribute'>
    


  /**
   * Reference to a field of type 'ElementAttribute[]'
   */
  export type ListEnumElementAttributeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ElementAttribute[]'>
    


  /**
   * Reference to a field of type 'ScrapingErrorCode'
   */
  export type EnumScrapingErrorCodeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScrapingErrorCode'>
    


  /**
   * Reference to a field of type 'ScrapingErrorCode[]'
   */
  export type ListEnumScrapingErrorCodeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScrapingErrorCode[]'>
    


  /**
   * Reference to a field of type 'ProductRecordDataField'
   */
  export type EnumProductRecordDataFieldFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductRecordDataField'>
    


  /**
   * Reference to a field of type 'ProductRecordDataField[]'
   */
  export type ListEnumProductRecordDataFieldFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductRecordDataField[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'ProductStatus'
   */
  export type EnumProductStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductStatus'>
    


  /**
   * Reference to a field of type 'ProductStatus[]'
   */
  export type ListEnumProductStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductStatus[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'ProductCategory'
   */
  export type EnumProductCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductCategory'>
    


  /**
   * Reference to a field of type 'ProductCategory[]'
   */
  export type ListEnumProductCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductCategory[]'>
    


  /**
   * Reference to a field of type 'ProductSubCategory[]'
   */
  export type ListEnumProductSubCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductSubCategory[]'>
    


  /**
   * Reference to a field of type 'ProductSubCategory'
   */
  export type EnumProductSubCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductSubCategory'>
    


  /**
   * Reference to a field of type 'SubscriptionType'
   */
  export type EnumSubscriptionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionType'>
    


  /**
   * Reference to a field of type 'SubscriptionType[]'
   */
  export type ListEnumSubscriptionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionType[]'>
    


  /**
   * Reference to a field of type 'PriceChangeSubscriptionCondition[]'
   */
  export type ListEnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PriceChangeSubscriptionCondition[]'>
    


  /**
   * Reference to a field of type 'PriceChangeSubscriptionCondition'
   */
  export type EnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PriceChangeSubscriptionCondition'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'NotificationState'
   */
  export type EnumNotificationStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationState'>
    


  /**
   * Reference to a field of type 'NotificationState[]'
   */
  export type ListEnumNotificationStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationState[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: UuidFilter<"User"> | string
    clerkId?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    profileImageUrl?: StringNullableFilter<"User"> | string | null
    emailAddress?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdProducts?: ProductListRelationFilter
    updatedProducts?: ProductListRelationFilter
    createdProductRecords?: ProductRecordListRelationFilter
    updatedProductRecords?: ProductRecordListRelationFilter
    createdProductSubscriptions?: ProductSubscriptionListRelationFilter
    updatedProductSubscriptions?: ProductSubscriptionListRelationFilter
    productSubscriptions?: ProductSubscriptionListRelationFilter
    createdNotifications?: NotificationListRelationFilter
    updatedNotifications?: NotificationListRelationFilter
    notifications?: NotificationListRelationFilter
    createdProcessedProductRecords?: ProcessedProductRecordListRelationFilter
    updatedProcessedProductRecords?: ProcessedProductRecordListRelationFilter
    processedProductRecords?: ProcessedProductRecordListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    clerkId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profileImageUrl?: SortOrderInput | SortOrder
    emailAddress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdProducts?: ProductOrderByRelationAggregateInput
    updatedProducts?: ProductOrderByRelationAggregateInput
    createdProductRecords?: ProductRecordOrderByRelationAggregateInput
    updatedProductRecords?: ProductRecordOrderByRelationAggregateInput
    createdProductSubscriptions?: ProductSubscriptionOrderByRelationAggregateInput
    updatedProductSubscriptions?: ProductSubscriptionOrderByRelationAggregateInput
    productSubscriptions?: ProductSubscriptionOrderByRelationAggregateInput
    createdNotifications?: NotificationOrderByRelationAggregateInput
    updatedNotifications?: NotificationOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    createdProcessedProductRecords?: ProcessedProductRecordOrderByRelationAggregateInput
    updatedProcessedProductRecords?: ProcessedProductRecordOrderByRelationAggregateInput
    processedProductRecords?: ProcessedProductRecordOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clerkId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    profileImageUrl?: StringNullableFilter<"User"> | string | null
    emailAddress?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdProducts?: ProductListRelationFilter
    updatedProducts?: ProductListRelationFilter
    createdProductRecords?: ProductRecordListRelationFilter
    updatedProductRecords?: ProductRecordListRelationFilter
    createdProductSubscriptions?: ProductSubscriptionListRelationFilter
    updatedProductSubscriptions?: ProductSubscriptionListRelationFilter
    productSubscriptions?: ProductSubscriptionListRelationFilter
    createdNotifications?: NotificationListRelationFilter
    updatedNotifications?: NotificationListRelationFilter
    notifications?: NotificationListRelationFilter
    createdProcessedProductRecords?: ProcessedProductRecordListRelationFilter
    updatedProcessedProductRecords?: ProcessedProductRecordListRelationFilter
    processedProductRecords?: ProcessedProductRecordListRelationFilter
  }, "id" | "clerkId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    clerkId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profileImageUrl?: SortOrderInput | SortOrder
    emailAddress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"User"> | string
    clerkId?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    profileImageUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailAddress?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type HttpNetworkErrorDataWhereInput = {
    AND?: HttpNetworkErrorDataWhereInput | HttpNetworkErrorDataWhereInput[]
    OR?: HttpNetworkErrorDataWhereInput[]
    NOT?: HttpNetworkErrorDataWhereInput | HttpNetworkErrorDataWhereInput[]
    id?: UuidFilter<"HttpNetworkErrorData"> | string
    url?: StringFilter<"HttpNetworkErrorData"> | string
  }

  export type HttpNetworkErrorDataOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type HttpNetworkErrorDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HttpNetworkErrorDataWhereInput | HttpNetworkErrorDataWhereInput[]
    OR?: HttpNetworkErrorDataWhereInput[]
    NOT?: HttpNetworkErrorDataWhereInput | HttpNetworkErrorDataWhereInput[]
    url?: StringFilter<"HttpNetworkErrorData"> | string
  }, "id">

  export type HttpNetworkErrorDataOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    _count?: HttpNetworkErrorDataCountOrderByAggregateInput
    _max?: HttpNetworkErrorDataMaxOrderByAggregateInput
    _min?: HttpNetworkErrorDataMinOrderByAggregateInput
  }

  export type HttpNetworkErrorDataScalarWhereWithAggregatesInput = {
    AND?: HttpNetworkErrorDataScalarWhereWithAggregatesInput | HttpNetworkErrorDataScalarWhereWithAggregatesInput[]
    OR?: HttpNetworkErrorDataScalarWhereWithAggregatesInput[]
    NOT?: HttpNetworkErrorDataScalarWhereWithAggregatesInput | HttpNetworkErrorDataScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"HttpNetworkErrorData"> | string
    url?: StringWithAggregatesFilter<"HttpNetworkErrorData"> | string
  }

  export type HttpSerializationErrorDataWhereInput = {
    AND?: HttpSerializationErrorDataWhereInput | HttpSerializationErrorDataWhereInput[]
    OR?: HttpSerializationErrorDataWhereInput[]
    NOT?: HttpSerializationErrorDataWhereInput | HttpSerializationErrorDataWhereInput[]
    id?: UuidFilter<"HttpSerializationErrorData"> | string
    url?: StringFilter<"HttpSerializationErrorData"> | string
  }

  export type HttpSerializationErrorDataOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type HttpSerializationErrorDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HttpSerializationErrorDataWhereInput | HttpSerializationErrorDataWhereInput[]
    OR?: HttpSerializationErrorDataWhereInput[]
    NOT?: HttpSerializationErrorDataWhereInput | HttpSerializationErrorDataWhereInput[]
    url?: StringFilter<"HttpSerializationErrorData"> | string
  }, "id">

  export type HttpSerializationErrorDataOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    _count?: HttpSerializationErrorDataCountOrderByAggregateInput
    _max?: HttpSerializationErrorDataMaxOrderByAggregateInput
    _min?: HttpSerializationErrorDataMinOrderByAggregateInput
  }

  export type HttpSerializationErrorDataScalarWhereWithAggregatesInput = {
    AND?: HttpSerializationErrorDataScalarWhereWithAggregatesInput | HttpSerializationErrorDataScalarWhereWithAggregatesInput[]
    OR?: HttpSerializationErrorDataScalarWhereWithAggregatesInput[]
    NOT?: HttpSerializationErrorDataScalarWhereWithAggregatesInput | HttpSerializationErrorDataScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"HttpSerializationErrorData"> | string
    url?: StringWithAggregatesFilter<"HttpSerializationErrorData"> | string
  }

  export type HttpClientErrorDataWhereInput = {
    AND?: HttpClientErrorDataWhereInput | HttpClientErrorDataWhereInput[]
    OR?: HttpClientErrorDataWhereInput[]
    NOT?: HttpClientErrorDataWhereInput | HttpClientErrorDataWhereInput[]
    id?: UuidFilter<"HttpClientErrorData"> | string
    url?: StringFilter<"HttpClientErrorData"> | string
    status?: IntFilter<"HttpClientErrorData"> | number
  }

  export type HttpClientErrorDataOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    status?: SortOrder
  }

  export type HttpClientErrorDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HttpClientErrorDataWhereInput | HttpClientErrorDataWhereInput[]
    OR?: HttpClientErrorDataWhereInput[]
    NOT?: HttpClientErrorDataWhereInput | HttpClientErrorDataWhereInput[]
    url?: StringFilter<"HttpClientErrorData"> | string
    status?: IntFilter<"HttpClientErrorData"> | number
  }, "id">

  export type HttpClientErrorDataOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    status?: SortOrder
    _count?: HttpClientErrorDataCountOrderByAggregateInput
    _avg?: HttpClientErrorDataAvgOrderByAggregateInput
    _max?: HttpClientErrorDataMaxOrderByAggregateInput
    _min?: HttpClientErrorDataMinOrderByAggregateInput
    _sum?: HttpClientErrorDataSumOrderByAggregateInput
  }

  export type HttpClientErrorDataScalarWhereWithAggregatesInput = {
    AND?: HttpClientErrorDataScalarWhereWithAggregatesInput | HttpClientErrorDataScalarWhereWithAggregatesInput[]
    OR?: HttpClientErrorDataScalarWhereWithAggregatesInput[]
    NOT?: HttpClientErrorDataScalarWhereWithAggregatesInput | HttpClientErrorDataScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"HttpClientErrorData"> | string
    url?: StringWithAggregatesFilter<"HttpClientErrorData"> | string
    status?: IntWithAggregatesFilter<"HttpClientErrorData"> | number
  }

  export type MissingAttributeErrorDataWhereInput = {
    AND?: MissingAttributeErrorDataWhereInput | MissingAttributeErrorDataWhereInput[]
    OR?: MissingAttributeErrorDataWhereInput[]
    NOT?: MissingAttributeErrorDataWhereInput | MissingAttributeErrorDataWhereInput[]
    id?: UuidFilter<"MissingAttributeErrorData"> | string
    attribute?: EnumElementAttributeFilter<"MissingAttributeErrorData"> | $Enums.ElementAttribute
    parentHtml?: StringNullableFilter<"MissingAttributeErrorData"> | string | null
  }

  export type MissingAttributeErrorDataOrderByWithRelationInput = {
    id?: SortOrder
    attribute?: SortOrder
    parentHtml?: SortOrderInput | SortOrder
  }

  export type MissingAttributeErrorDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MissingAttributeErrorDataWhereInput | MissingAttributeErrorDataWhereInput[]
    OR?: MissingAttributeErrorDataWhereInput[]
    NOT?: MissingAttributeErrorDataWhereInput | MissingAttributeErrorDataWhereInput[]
    attribute?: EnumElementAttributeFilter<"MissingAttributeErrorData"> | $Enums.ElementAttribute
    parentHtml?: StringNullableFilter<"MissingAttributeErrorData"> | string | null
  }, "id">

  export type MissingAttributeErrorDataOrderByWithAggregationInput = {
    id?: SortOrder
    attribute?: SortOrder
    parentHtml?: SortOrderInput | SortOrder
    _count?: MissingAttributeErrorDataCountOrderByAggregateInput
    _max?: MissingAttributeErrorDataMaxOrderByAggregateInput
    _min?: MissingAttributeErrorDataMinOrderByAggregateInput
  }

  export type MissingAttributeErrorDataScalarWhereWithAggregatesInput = {
    AND?: MissingAttributeErrorDataScalarWhereWithAggregatesInput | MissingAttributeErrorDataScalarWhereWithAggregatesInput[]
    OR?: MissingAttributeErrorDataScalarWhereWithAggregatesInput[]
    NOT?: MissingAttributeErrorDataScalarWhereWithAggregatesInput | MissingAttributeErrorDataScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"MissingAttributeErrorData"> | string
    attribute?: EnumElementAttributeWithAggregatesFilter<"MissingAttributeErrorData"> | $Enums.ElementAttribute
    parentHtml?: StringNullableWithAggregatesFilter<"MissingAttributeErrorData"> | string | null
  }

  export type InvalidAttributeErrorDataWhereInput = {
    AND?: InvalidAttributeErrorDataWhereInput | InvalidAttributeErrorDataWhereInput[]
    OR?: InvalidAttributeErrorDataWhereInput[]
    NOT?: InvalidAttributeErrorDataWhereInput | InvalidAttributeErrorDataWhereInput[]
    id?: UuidFilter<"InvalidAttributeErrorData"> | string
    attribute?: EnumElementAttributeFilter<"InvalidAttributeErrorData"> | $Enums.ElementAttribute
    parentHtml?: StringNullableFilter<"InvalidAttributeErrorData"> | string | null
    value?: StringFilter<"InvalidAttributeErrorData"> | string
  }

  export type InvalidAttributeErrorDataOrderByWithRelationInput = {
    id?: SortOrder
    attribute?: SortOrder
    parentHtml?: SortOrderInput | SortOrder
    value?: SortOrder
  }

  export type InvalidAttributeErrorDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InvalidAttributeErrorDataWhereInput | InvalidAttributeErrorDataWhereInput[]
    OR?: InvalidAttributeErrorDataWhereInput[]
    NOT?: InvalidAttributeErrorDataWhereInput | InvalidAttributeErrorDataWhereInput[]
    attribute?: EnumElementAttributeFilter<"InvalidAttributeErrorData"> | $Enums.ElementAttribute
    parentHtml?: StringNullableFilter<"InvalidAttributeErrorData"> | string | null
    value?: StringFilter<"InvalidAttributeErrorData"> | string
  }, "id">

  export type InvalidAttributeErrorDataOrderByWithAggregationInput = {
    id?: SortOrder
    attribute?: SortOrder
    parentHtml?: SortOrderInput | SortOrder
    value?: SortOrder
    _count?: InvalidAttributeErrorDataCountOrderByAggregateInput
    _max?: InvalidAttributeErrorDataMaxOrderByAggregateInput
    _min?: InvalidAttributeErrorDataMinOrderByAggregateInput
  }

  export type InvalidAttributeErrorDataScalarWhereWithAggregatesInput = {
    AND?: InvalidAttributeErrorDataScalarWhereWithAggregatesInput | InvalidAttributeErrorDataScalarWhereWithAggregatesInput[]
    OR?: InvalidAttributeErrorDataScalarWhereWithAggregatesInput[]
    NOT?: InvalidAttributeErrorDataScalarWhereWithAggregatesInput | InvalidAttributeErrorDataScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"InvalidAttributeErrorData"> | string
    attribute?: EnumElementAttributeWithAggregatesFilter<"InvalidAttributeErrorData"> | $Enums.ElementAttribute
    parentHtml?: StringNullableWithAggregatesFilter<"InvalidAttributeErrorData"> | string | null
    value?: StringWithAggregatesFilter<"InvalidAttributeErrorData"> | string
  }

  export type InvalidTextErrorDataWhereInput = {
    AND?: InvalidTextErrorDataWhereInput | InvalidTextErrorDataWhereInput[]
    OR?: InvalidTextErrorDataWhereInput[]
    NOT?: InvalidTextErrorDataWhereInput | InvalidTextErrorDataWhereInput[]
    id?: UuidFilter<"InvalidTextErrorData"> | string
    parentHtml?: StringNullableFilter<"InvalidTextErrorData"> | string | null
    value?: StringFilter<"InvalidTextErrorData"> | string
  }

  export type InvalidTextErrorDataOrderByWithRelationInput = {
    id?: SortOrder
    parentHtml?: SortOrderInput | SortOrder
    value?: SortOrder
  }

  export type InvalidTextErrorDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InvalidTextErrorDataWhereInput | InvalidTextErrorDataWhereInput[]
    OR?: InvalidTextErrorDataWhereInput[]
    NOT?: InvalidTextErrorDataWhereInput | InvalidTextErrorDataWhereInput[]
    parentHtml?: StringNullableFilter<"InvalidTextErrorData"> | string | null
    value?: StringFilter<"InvalidTextErrorData"> | string
  }, "id">

  export type InvalidTextErrorDataOrderByWithAggregationInput = {
    id?: SortOrder
    parentHtml?: SortOrderInput | SortOrder
    value?: SortOrder
    _count?: InvalidTextErrorDataCountOrderByAggregateInput
    _max?: InvalidTextErrorDataMaxOrderByAggregateInput
    _min?: InvalidTextErrorDataMinOrderByAggregateInput
  }

  export type InvalidTextErrorDataScalarWhereWithAggregatesInput = {
    AND?: InvalidTextErrorDataScalarWhereWithAggregatesInput | InvalidTextErrorDataScalarWhereWithAggregatesInput[]
    OR?: InvalidTextErrorDataScalarWhereWithAggregatesInput[]
    NOT?: InvalidTextErrorDataScalarWhereWithAggregatesInput | InvalidTextErrorDataScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"InvalidTextErrorData"> | string
    parentHtml?: StringNullableWithAggregatesFilter<"InvalidTextErrorData"> | string | null
    value?: StringWithAggregatesFilter<"InvalidTextErrorData"> | string
  }

  export type MissingTextErrorDataWhereInput = {
    AND?: MissingTextErrorDataWhereInput | MissingTextErrorDataWhereInput[]
    OR?: MissingTextErrorDataWhereInput[]
    NOT?: MissingTextErrorDataWhereInput | MissingTextErrorDataWhereInput[]
    id?: UuidFilter<"MissingTextErrorData"> | string
    parentHtml?: StringNullableFilter<"MissingTextErrorData"> | string | null
  }

  export type MissingTextErrorDataOrderByWithRelationInput = {
    id?: SortOrder
    parentHtml?: SortOrderInput | SortOrder
  }

  export type MissingTextErrorDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MissingTextErrorDataWhereInput | MissingTextErrorDataWhereInput[]
    OR?: MissingTextErrorDataWhereInput[]
    NOT?: MissingTextErrorDataWhereInput | MissingTextErrorDataWhereInput[]
    parentHtml?: StringNullableFilter<"MissingTextErrorData"> | string | null
  }, "id">

  export type MissingTextErrorDataOrderByWithAggregationInput = {
    id?: SortOrder
    parentHtml?: SortOrderInput | SortOrder
    _count?: MissingTextErrorDataCountOrderByAggregateInput
    _max?: MissingTextErrorDataMaxOrderByAggregateInput
    _min?: MissingTextErrorDataMinOrderByAggregateInput
  }

  export type MissingTextErrorDataScalarWhereWithAggregatesInput = {
    AND?: MissingTextErrorDataScalarWhereWithAggregatesInput | MissingTextErrorDataScalarWhereWithAggregatesInput[]
    OR?: MissingTextErrorDataScalarWhereWithAggregatesInput[]
    NOT?: MissingTextErrorDataScalarWhereWithAggregatesInput | MissingTextErrorDataScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"MissingTextErrorData"> | string
    parentHtml?: StringNullableWithAggregatesFilter<"MissingTextErrorData"> | string | null
  }

  export type NonUniqueTextErrorDataWhereInput = {
    AND?: NonUniqueTextErrorDataWhereInput | NonUniqueTextErrorDataWhereInput[]
    OR?: NonUniqueTextErrorDataWhereInput[]
    NOT?: NonUniqueTextErrorDataWhereInput | NonUniqueTextErrorDataWhereInput[]
    id?: UuidFilter<"NonUniqueTextErrorData"> | string
    parentHtml?: StringNullableFilter<"NonUniqueTextErrorData"> | string | null
  }

  export type NonUniqueTextErrorDataOrderByWithRelationInput = {
    id?: SortOrder
    parentHtml?: SortOrderInput | SortOrder
  }

  export type NonUniqueTextErrorDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NonUniqueTextErrorDataWhereInput | NonUniqueTextErrorDataWhereInput[]
    OR?: NonUniqueTextErrorDataWhereInput[]
    NOT?: NonUniqueTextErrorDataWhereInput | NonUniqueTextErrorDataWhereInput[]
    parentHtml?: StringNullableFilter<"NonUniqueTextErrorData"> | string | null
  }, "id">

  export type NonUniqueTextErrorDataOrderByWithAggregationInput = {
    id?: SortOrder
    parentHtml?: SortOrderInput | SortOrder
    _count?: NonUniqueTextErrorDataCountOrderByAggregateInput
    _max?: NonUniqueTextErrorDataMaxOrderByAggregateInput
    _min?: NonUniqueTextErrorDataMinOrderByAggregateInput
  }

  export type NonUniqueTextErrorDataScalarWhereWithAggregatesInput = {
    AND?: NonUniqueTextErrorDataScalarWhereWithAggregatesInput | NonUniqueTextErrorDataScalarWhereWithAggregatesInput[]
    OR?: NonUniqueTextErrorDataScalarWhereWithAggregatesInput[]
    NOT?: NonUniqueTextErrorDataScalarWhereWithAggregatesInput | NonUniqueTextErrorDataScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"NonUniqueTextErrorData"> | string
    parentHtml?: StringNullableWithAggregatesFilter<"NonUniqueTextErrorData"> | string | null
  }

  export type MissingElementErrorDataWhereInput = {
    AND?: MissingElementErrorDataWhereInput | MissingElementErrorDataWhereInput[]
    OR?: MissingElementErrorDataWhereInput[]
    NOT?: MissingElementErrorDataWhereInput | MissingElementErrorDataWhereInput[]
    id?: UuidFilter<"MissingElementErrorData"> | string
    parentHtml?: StringNullableFilter<"MissingElementErrorData"> | string | null
    selector?: StringFilter<"MissingElementErrorData"> | string
  }

  export type MissingElementErrorDataOrderByWithRelationInput = {
    id?: SortOrder
    parentHtml?: SortOrderInput | SortOrder
    selector?: SortOrder
  }

  export type MissingElementErrorDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MissingElementErrorDataWhereInput | MissingElementErrorDataWhereInput[]
    OR?: MissingElementErrorDataWhereInput[]
    NOT?: MissingElementErrorDataWhereInput | MissingElementErrorDataWhereInput[]
    parentHtml?: StringNullableFilter<"MissingElementErrorData"> | string | null
    selector?: StringFilter<"MissingElementErrorData"> | string
  }, "id">

  export type MissingElementErrorDataOrderByWithAggregationInput = {
    id?: SortOrder
    parentHtml?: SortOrderInput | SortOrder
    selector?: SortOrder
    _count?: MissingElementErrorDataCountOrderByAggregateInput
    _max?: MissingElementErrorDataMaxOrderByAggregateInput
    _min?: MissingElementErrorDataMinOrderByAggregateInput
  }

  export type MissingElementErrorDataScalarWhereWithAggregatesInput = {
    AND?: MissingElementErrorDataScalarWhereWithAggregatesInput | MissingElementErrorDataScalarWhereWithAggregatesInput[]
    OR?: MissingElementErrorDataScalarWhereWithAggregatesInput[]
    NOT?: MissingElementErrorDataScalarWhereWithAggregatesInput | MissingElementErrorDataScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"MissingElementErrorData"> | string
    parentHtml?: StringNullableWithAggregatesFilter<"MissingElementErrorData"> | string | null
    selector?: StringWithAggregatesFilter<"MissingElementErrorData"> | string
  }

  export type NonUniqueElementErrorDataWhereInput = {
    AND?: NonUniqueElementErrorDataWhereInput | NonUniqueElementErrorDataWhereInput[]
    OR?: NonUniqueElementErrorDataWhereInput[]
    NOT?: NonUniqueElementErrorDataWhereInput | NonUniqueElementErrorDataWhereInput[]
    id?: UuidFilter<"NonUniqueElementErrorData"> | string
    parentHtml?: StringNullableFilter<"NonUniqueElementErrorData"> | string | null
    selector?: StringFilter<"NonUniqueElementErrorData"> | string
  }

  export type NonUniqueElementErrorDataOrderByWithRelationInput = {
    id?: SortOrder
    parentHtml?: SortOrderInput | SortOrder
    selector?: SortOrder
  }

  export type NonUniqueElementErrorDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NonUniqueElementErrorDataWhereInput | NonUniqueElementErrorDataWhereInput[]
    OR?: NonUniqueElementErrorDataWhereInput[]
    NOT?: NonUniqueElementErrorDataWhereInput | NonUniqueElementErrorDataWhereInput[]
    parentHtml?: StringNullableFilter<"NonUniqueElementErrorData"> | string | null
    selector?: StringFilter<"NonUniqueElementErrorData"> | string
  }, "id">

  export type NonUniqueElementErrorDataOrderByWithAggregationInput = {
    id?: SortOrder
    parentHtml?: SortOrderInput | SortOrder
    selector?: SortOrder
    _count?: NonUniqueElementErrorDataCountOrderByAggregateInput
    _max?: NonUniqueElementErrorDataMaxOrderByAggregateInput
    _min?: NonUniqueElementErrorDataMinOrderByAggregateInput
  }

  export type NonUniqueElementErrorDataScalarWhereWithAggregatesInput = {
    AND?: NonUniqueElementErrorDataScalarWhereWithAggregatesInput | NonUniqueElementErrorDataScalarWhereWithAggregatesInput[]
    OR?: NonUniqueElementErrorDataScalarWhereWithAggregatesInput[]
    NOT?: NonUniqueElementErrorDataScalarWhereWithAggregatesInput | NonUniqueElementErrorDataScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"NonUniqueElementErrorData"> | string
    parentHtml?: StringNullableWithAggregatesFilter<"NonUniqueElementErrorData"> | string | null
    selector?: StringWithAggregatesFilter<"NonUniqueElementErrorData"> | string
  }

  export type ProductRecordErrorWhereInput = {
    AND?: ProductRecordErrorWhereInput | ProductRecordErrorWhereInput[]
    OR?: ProductRecordErrorWhereInput[]
    NOT?: ProductRecordErrorWhereInput | ProductRecordErrorWhereInput[]
    id?: UuidFilter<"ProductRecordError"> | string
    errorId?: UuidFilter<"ProductRecordError"> | string
    errorCode?: EnumScrapingErrorCodeFilter<"ProductRecordError"> | $Enums.ScrapingErrorCode
    recordId?: UuidFilter<"ProductRecordError"> | string
    field?: EnumProductRecordDataFieldFilter<"ProductRecordError"> | $Enums.ProductRecordDataField
    message?: StringFilter<"ProductRecordError"> | string
    record?: XOR<ProductRecordRelationFilter, ProductRecordWhereInput>
  }

  export type ProductRecordErrorOrderByWithRelationInput = {
    id?: SortOrder
    errorId?: SortOrder
    errorCode?: SortOrder
    recordId?: SortOrder
    field?: SortOrder
    message?: SortOrder
    record?: ProductRecordOrderByWithRelationInput
  }

  export type ProductRecordErrorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    errorId?: string
    recordId?: string
    AND?: ProductRecordErrorWhereInput | ProductRecordErrorWhereInput[]
    OR?: ProductRecordErrorWhereInput[]
    NOT?: ProductRecordErrorWhereInput | ProductRecordErrorWhereInput[]
    errorCode?: EnumScrapingErrorCodeFilter<"ProductRecordError"> | $Enums.ScrapingErrorCode
    field?: EnumProductRecordDataFieldFilter<"ProductRecordError"> | $Enums.ProductRecordDataField
    message?: StringFilter<"ProductRecordError"> | string
    record?: XOR<ProductRecordRelationFilter, ProductRecordWhereInput>
  }, "id" | "errorId" | "recordId">

  export type ProductRecordErrorOrderByWithAggregationInput = {
    id?: SortOrder
    errorId?: SortOrder
    errorCode?: SortOrder
    recordId?: SortOrder
    field?: SortOrder
    message?: SortOrder
    _count?: ProductRecordErrorCountOrderByAggregateInput
    _max?: ProductRecordErrorMaxOrderByAggregateInput
    _min?: ProductRecordErrorMinOrderByAggregateInput
  }

  export type ProductRecordErrorScalarWhereWithAggregatesInput = {
    AND?: ProductRecordErrorScalarWhereWithAggregatesInput | ProductRecordErrorScalarWhereWithAggregatesInput[]
    OR?: ProductRecordErrorScalarWhereWithAggregatesInput[]
    NOT?: ProductRecordErrorScalarWhereWithAggregatesInput | ProductRecordErrorScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ProductRecordError"> | string
    errorId?: UuidWithAggregatesFilter<"ProductRecordError"> | string
    errorCode?: EnumScrapingErrorCodeWithAggregatesFilter<"ProductRecordError"> | $Enums.ScrapingErrorCode
    recordId?: UuidWithAggregatesFilter<"ProductRecordError"> | string
    field?: EnumProductRecordDataFieldWithAggregatesFilter<"ProductRecordError"> | $Enums.ProductRecordDataField
    message?: StringWithAggregatesFilter<"ProductRecordError"> | string
  }

  export type ProductRecordWhereInput = {
    AND?: ProductRecordWhereInput | ProductRecordWhereInput[]
    OR?: ProductRecordWhereInput[]
    NOT?: ProductRecordWhereInput | ProductRecordWhereInput[]
    id?: UuidFilter<"ProductRecord"> | string
    createdAt?: DateTimeFilter<"ProductRecord"> | Date | string
    updatedAt?: DateTimeFilter<"ProductRecord"> | Date | string
    createdById?: UuidFilter<"ProductRecord"> | string
    updatedById?: UuidFilter<"ProductRecord"> | string
    timestamp?: DateTimeFilter<"ProductRecord"> | Date | string
    productId?: UuidFilter<"ProductRecord"> | string
    price?: FloatNullableFilter<"ProductRecord"> | number | null
    rawPrice?: StringNullableFilter<"ProductRecord"> | string | null
    status?: EnumProductStatusNullableFilter<"ProductRecord"> | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFilter<"ProductRecord"> | boolean
    manuallyChangedFields?: EnumProductRecordDataFieldNullableListFilter<"ProductRecord">
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    errors?: ProductRecordErrorListRelationFilter
    statusChangeNotifications?: StatusChangeNotificationListRelationFilter
    priceChangeNotifications?: PriceChangeNotificationListRelationFilter
    processedRecords?: ProcessedProductRecordListRelationFilter
  }

  export type ProductRecordOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    timestamp?: SortOrder
    productId?: SortOrder
    price?: SortOrderInput | SortOrder
    rawPrice?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    wasManuallyCreated?: SortOrder
    manuallyChangedFields?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    errors?: ProductRecordErrorOrderByRelationAggregateInput
    statusChangeNotifications?: StatusChangeNotificationOrderByRelationAggregateInput
    priceChangeNotifications?: PriceChangeNotificationOrderByRelationAggregateInput
    processedRecords?: ProcessedProductRecordOrderByRelationAggregateInput
  }

  export type ProductRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductRecordWhereInput | ProductRecordWhereInput[]
    OR?: ProductRecordWhereInput[]
    NOT?: ProductRecordWhereInput | ProductRecordWhereInput[]
    createdAt?: DateTimeFilter<"ProductRecord"> | Date | string
    updatedAt?: DateTimeFilter<"ProductRecord"> | Date | string
    createdById?: UuidFilter<"ProductRecord"> | string
    updatedById?: UuidFilter<"ProductRecord"> | string
    timestamp?: DateTimeFilter<"ProductRecord"> | Date | string
    productId?: UuidFilter<"ProductRecord"> | string
    price?: FloatNullableFilter<"ProductRecord"> | number | null
    rawPrice?: StringNullableFilter<"ProductRecord"> | string | null
    status?: EnumProductStatusNullableFilter<"ProductRecord"> | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFilter<"ProductRecord"> | boolean
    manuallyChangedFields?: EnumProductRecordDataFieldNullableListFilter<"ProductRecord">
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    errors?: ProductRecordErrorListRelationFilter
    statusChangeNotifications?: StatusChangeNotificationListRelationFilter
    priceChangeNotifications?: PriceChangeNotificationListRelationFilter
    processedRecords?: ProcessedProductRecordListRelationFilter
  }, "id">

  export type ProductRecordOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    timestamp?: SortOrder
    productId?: SortOrder
    price?: SortOrderInput | SortOrder
    rawPrice?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    wasManuallyCreated?: SortOrder
    manuallyChangedFields?: SortOrder
    _count?: ProductRecordCountOrderByAggregateInput
    _avg?: ProductRecordAvgOrderByAggregateInput
    _max?: ProductRecordMaxOrderByAggregateInput
    _min?: ProductRecordMinOrderByAggregateInput
    _sum?: ProductRecordSumOrderByAggregateInput
  }

  export type ProductRecordScalarWhereWithAggregatesInput = {
    AND?: ProductRecordScalarWhereWithAggregatesInput | ProductRecordScalarWhereWithAggregatesInput[]
    OR?: ProductRecordScalarWhereWithAggregatesInput[]
    NOT?: ProductRecordScalarWhereWithAggregatesInput | ProductRecordScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ProductRecord"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProductRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProductRecord"> | Date | string
    createdById?: UuidWithAggregatesFilter<"ProductRecord"> | string
    updatedById?: UuidWithAggregatesFilter<"ProductRecord"> | string
    timestamp?: DateTimeWithAggregatesFilter<"ProductRecord"> | Date | string
    productId?: UuidWithAggregatesFilter<"ProductRecord"> | string
    price?: FloatNullableWithAggregatesFilter<"ProductRecord"> | number | null
    rawPrice?: StringNullableWithAggregatesFilter<"ProductRecord"> | string | null
    status?: EnumProductStatusNullableWithAggregatesFilter<"ProductRecord"> | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolWithAggregatesFilter<"ProductRecord"> | boolean
    manuallyChangedFields?: EnumProductRecordDataFieldNullableListFilter<"ProductRecord">
  }

  export type ProcessedProductRecordWhereInput = {
    AND?: ProcessedProductRecordWhereInput | ProcessedProductRecordWhereInput[]
    OR?: ProcessedProductRecordWhereInput[]
    NOT?: ProcessedProductRecordWhereInput | ProcessedProductRecordWhereInput[]
    id?: UuidFilter<"ProcessedProductRecord"> | string
    createdAt?: DateTimeFilter<"ProcessedProductRecord"> | Date | string
    updatedAt?: DateTimeFilter<"ProcessedProductRecord"> | Date | string
    createdById?: UuidFilter<"ProcessedProductRecord"> | string
    updatedById?: UuidFilter<"ProcessedProductRecord"> | string
    recordId?: UuidFilter<"ProcessedProductRecord"> | string
    userId?: UuidFilter<"ProcessedProductRecord"> | string
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    record?: XOR<ProductRecordRelationFilter, ProductRecordWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ProcessedProductRecordOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    recordId?: SortOrder
    userId?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    record?: ProductRecordOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ProcessedProductRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_recordId?: ProcessedProductRecordUserIdRecordIdCompoundUniqueInput
    AND?: ProcessedProductRecordWhereInput | ProcessedProductRecordWhereInput[]
    OR?: ProcessedProductRecordWhereInput[]
    NOT?: ProcessedProductRecordWhereInput | ProcessedProductRecordWhereInput[]
    createdAt?: DateTimeFilter<"ProcessedProductRecord"> | Date | string
    updatedAt?: DateTimeFilter<"ProcessedProductRecord"> | Date | string
    createdById?: UuidFilter<"ProcessedProductRecord"> | string
    updatedById?: UuidFilter<"ProcessedProductRecord"> | string
    recordId?: UuidFilter<"ProcessedProductRecord"> | string
    userId?: UuidFilter<"ProcessedProductRecord"> | string
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    record?: XOR<ProductRecordRelationFilter, ProductRecordWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId_recordId">

  export type ProcessedProductRecordOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    recordId?: SortOrder
    userId?: SortOrder
    _count?: ProcessedProductRecordCountOrderByAggregateInput
    _max?: ProcessedProductRecordMaxOrderByAggregateInput
    _min?: ProcessedProductRecordMinOrderByAggregateInput
  }

  export type ProcessedProductRecordScalarWhereWithAggregatesInput = {
    AND?: ProcessedProductRecordScalarWhereWithAggregatesInput | ProcessedProductRecordScalarWhereWithAggregatesInput[]
    OR?: ProcessedProductRecordScalarWhereWithAggregatesInput[]
    NOT?: ProcessedProductRecordScalarWhereWithAggregatesInput | ProcessedProductRecordScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ProcessedProductRecord"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProcessedProductRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProcessedProductRecord"> | Date | string
    createdById?: UuidWithAggregatesFilter<"ProcessedProductRecord"> | string
    updatedById?: UuidWithAggregatesFilter<"ProcessedProductRecord"> | string
    recordId?: UuidWithAggregatesFilter<"ProcessedProductRecord"> | string
    userId?: UuidWithAggregatesFilter<"ProcessedProductRecord"> | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: UuidFilter<"Product"> | string
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    createdById?: UuidFilter<"Product"> | string
    updatedById?: UuidFilter<"Product"> | string
    name?: StringNullableFilter<"Product"> | string | null
    slug?: StringFilter<"Product"> | string
    code?: StringNullableFilter<"Product"> | string | null
    imageSrc?: StringNullableFilter<"Product"> | string | null
    status?: EnumProductStatusNullableFilter<"Product"> | $Enums.ProductStatus | null
    statusLastUpdatedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    statusAsOf?: DateTimeNullableFilter<"Product"> | Date | string | null
    price?: FloatNullableFilter<"Product"> | number | null
    priceLastUpdatedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    priceAsOf?: DateTimeNullableFilter<"Product"> | Date | string | null
    category?: EnumProductCategoryFilter<"Product"> | $Enums.ProductCategory
    subCategories?: EnumProductSubCategoryNullableListFilter<"Product">
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    records?: ProductRecordListRelationFilter
    subscriptions?: ProductSubscriptionListRelationFilter
    newProductNotifications?: NewProductNotificationListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    name?: SortOrderInput | SortOrder
    slug?: SortOrder
    code?: SortOrderInput | SortOrder
    imageSrc?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    statusLastUpdatedAt?: SortOrderInput | SortOrder
    statusAsOf?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    priceLastUpdatedAt?: SortOrderInput | SortOrder
    priceAsOf?: SortOrderInput | SortOrder
    category?: SortOrder
    subCategories?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    records?: ProductRecordOrderByRelationAggregateInput
    subscriptions?: ProductSubscriptionOrderByRelationAggregateInput
    newProductNotifications?: NewProductNotificationOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    createdById?: UuidFilter<"Product"> | string
    updatedById?: UuidFilter<"Product"> | string
    name?: StringNullableFilter<"Product"> | string | null
    code?: StringNullableFilter<"Product"> | string | null
    imageSrc?: StringNullableFilter<"Product"> | string | null
    status?: EnumProductStatusNullableFilter<"Product"> | $Enums.ProductStatus | null
    statusLastUpdatedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    statusAsOf?: DateTimeNullableFilter<"Product"> | Date | string | null
    price?: FloatNullableFilter<"Product"> | number | null
    priceLastUpdatedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    priceAsOf?: DateTimeNullableFilter<"Product"> | Date | string | null
    category?: EnumProductCategoryFilter<"Product"> | $Enums.ProductCategory
    subCategories?: EnumProductSubCategoryNullableListFilter<"Product">
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    records?: ProductRecordListRelationFilter
    subscriptions?: ProductSubscriptionListRelationFilter
    newProductNotifications?: NewProductNotificationListRelationFilter
  }, "id" | "slug">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    name?: SortOrderInput | SortOrder
    slug?: SortOrder
    code?: SortOrderInput | SortOrder
    imageSrc?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    statusLastUpdatedAt?: SortOrderInput | SortOrder
    statusAsOf?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    priceLastUpdatedAt?: SortOrderInput | SortOrder
    priceAsOf?: SortOrderInput | SortOrder
    category?: SortOrder
    subCategories?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Product"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    createdById?: UuidWithAggregatesFilter<"Product"> | string
    updatedById?: UuidWithAggregatesFilter<"Product"> | string
    name?: StringNullableWithAggregatesFilter<"Product"> | string | null
    slug?: StringWithAggregatesFilter<"Product"> | string
    code?: StringNullableWithAggregatesFilter<"Product"> | string | null
    imageSrc?: StringNullableWithAggregatesFilter<"Product"> | string | null
    status?: EnumProductStatusNullableWithAggregatesFilter<"Product"> | $Enums.ProductStatus | null
    statusLastUpdatedAt?: DateTimeNullableWithAggregatesFilter<"Product"> | Date | string | null
    statusAsOf?: DateTimeNullableWithAggregatesFilter<"Product"> | Date | string | null
    price?: FloatNullableWithAggregatesFilter<"Product"> | number | null
    priceLastUpdatedAt?: DateTimeNullableWithAggregatesFilter<"Product"> | Date | string | null
    priceAsOf?: DateTimeNullableWithAggregatesFilter<"Product"> | Date | string | null
    category?: EnumProductCategoryWithAggregatesFilter<"Product"> | $Enums.ProductCategory
    subCategories?: EnumProductSubCategoryNullableListFilter<"Product">
  }

  export type ProductSubscriptionWhereInput = {
    AND?: ProductSubscriptionWhereInput | ProductSubscriptionWhereInput[]
    OR?: ProductSubscriptionWhereInput[]
    NOT?: ProductSubscriptionWhereInput | ProductSubscriptionWhereInput[]
    id?: UuidFilter<"ProductSubscription"> | string
    createdAt?: DateTimeFilter<"ProductSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"ProductSubscription"> | Date | string
    createdById?: UuidFilter<"ProductSubscription"> | string
    updatedById?: UuidFilter<"ProductSubscription"> | string
    subscriptionType?: EnumSubscriptionTypeFilter<"ProductSubscription"> | $Enums.SubscriptionType
    userId?: UuidFilter<"ProductSubscription"> | string
    productId?: UuidFilter<"ProductSubscription"> | string
    enabled?: BoolFilter<"ProductSubscription"> | boolean
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    delegate_aux_statusChangeSubscription?: XOR<StatusChangeSubscriptionNullableRelationFilter, StatusChangeSubscriptionWhereInput> | null
    delegate_aux_priceChangeSubscription?: XOR<PriceChangeSubscriptionNullableRelationFilter, PriceChangeSubscriptionWhereInput> | null
  }

  export type ProductSubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    subscriptionType?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    enabled?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionOrderByWithRelationInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionOrderByWithRelationInput
  }

  export type ProductSubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_productId_subscriptionType?: ProductSubscriptionUserIdProductIdSubscriptionTypeCompoundUniqueInput
    AND?: ProductSubscriptionWhereInput | ProductSubscriptionWhereInput[]
    OR?: ProductSubscriptionWhereInput[]
    NOT?: ProductSubscriptionWhereInput | ProductSubscriptionWhereInput[]
    createdAt?: DateTimeFilter<"ProductSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"ProductSubscription"> | Date | string
    createdById?: UuidFilter<"ProductSubscription"> | string
    updatedById?: UuidFilter<"ProductSubscription"> | string
    subscriptionType?: EnumSubscriptionTypeFilter<"ProductSubscription"> | $Enums.SubscriptionType
    userId?: UuidFilter<"ProductSubscription"> | string
    productId?: UuidFilter<"ProductSubscription"> | string
    enabled?: BoolFilter<"ProductSubscription"> | boolean
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    delegate_aux_statusChangeSubscription?: XOR<StatusChangeSubscriptionNullableRelationFilter, StatusChangeSubscriptionWhereInput> | null
    delegate_aux_priceChangeSubscription?: XOR<PriceChangeSubscriptionNullableRelationFilter, PriceChangeSubscriptionWhereInput> | null
  }, "id" | "userId_productId_subscriptionType">

  export type ProductSubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    subscriptionType?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    enabled?: SortOrder
    _count?: ProductSubscriptionCountOrderByAggregateInput
    _max?: ProductSubscriptionMaxOrderByAggregateInput
    _min?: ProductSubscriptionMinOrderByAggregateInput
  }

  export type ProductSubscriptionScalarWhereWithAggregatesInput = {
    AND?: ProductSubscriptionScalarWhereWithAggregatesInput | ProductSubscriptionScalarWhereWithAggregatesInput[]
    OR?: ProductSubscriptionScalarWhereWithAggregatesInput[]
    NOT?: ProductSubscriptionScalarWhereWithAggregatesInput | ProductSubscriptionScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ProductSubscription"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProductSubscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProductSubscription"> | Date | string
    createdById?: UuidWithAggregatesFilter<"ProductSubscription"> | string
    updatedById?: UuidWithAggregatesFilter<"ProductSubscription"> | string
    subscriptionType?: EnumSubscriptionTypeWithAggregatesFilter<"ProductSubscription"> | $Enums.SubscriptionType
    userId?: UuidWithAggregatesFilter<"ProductSubscription"> | string
    productId?: UuidWithAggregatesFilter<"ProductSubscription"> | string
    enabled?: BoolWithAggregatesFilter<"ProductSubscription"> | boolean
  }

  export type StatusChangeSubscriptionConditionWhereInput = {
    AND?: StatusChangeSubscriptionConditionWhereInput | StatusChangeSubscriptionConditionWhereInput[]
    OR?: StatusChangeSubscriptionConditionWhereInput[]
    NOT?: StatusChangeSubscriptionConditionWhereInput | StatusChangeSubscriptionConditionWhereInput[]
    id?: UuidFilter<"StatusChangeSubscriptionCondition"> | string
    createdAt?: DateTimeFilter<"StatusChangeSubscriptionCondition"> | Date | string
    updatedAt?: DateTimeFilter<"StatusChangeSubscriptionCondition"> | Date | string
    fromStatus?: EnumProductStatusNullableListFilter<"StatusChangeSubscriptionCondition">
    toStatus?: EnumProductStatusNullableListFilter<"StatusChangeSubscriptionCondition">
    subscriptionId?: UuidFilter<"StatusChangeSubscriptionCondition"> | string
    subscription?: XOR<StatusChangeSubscriptionRelationFilter, StatusChangeSubscriptionWhereInput>
  }

  export type StatusChangeSubscriptionConditionOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fromStatus?: SortOrder
    toStatus?: SortOrder
    subscriptionId?: SortOrder
    subscription?: StatusChangeSubscriptionOrderByWithRelationInput
  }

  export type StatusChangeSubscriptionConditionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StatusChangeSubscriptionConditionWhereInput | StatusChangeSubscriptionConditionWhereInput[]
    OR?: StatusChangeSubscriptionConditionWhereInput[]
    NOT?: StatusChangeSubscriptionConditionWhereInput | StatusChangeSubscriptionConditionWhereInput[]
    createdAt?: DateTimeFilter<"StatusChangeSubscriptionCondition"> | Date | string
    updatedAt?: DateTimeFilter<"StatusChangeSubscriptionCondition"> | Date | string
    fromStatus?: EnumProductStatusNullableListFilter<"StatusChangeSubscriptionCondition">
    toStatus?: EnumProductStatusNullableListFilter<"StatusChangeSubscriptionCondition">
    subscriptionId?: UuidFilter<"StatusChangeSubscriptionCondition"> | string
    subscription?: XOR<StatusChangeSubscriptionRelationFilter, StatusChangeSubscriptionWhereInput>
  }, "id">

  export type StatusChangeSubscriptionConditionOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fromStatus?: SortOrder
    toStatus?: SortOrder
    subscriptionId?: SortOrder
    _count?: StatusChangeSubscriptionConditionCountOrderByAggregateInput
    _max?: StatusChangeSubscriptionConditionMaxOrderByAggregateInput
    _min?: StatusChangeSubscriptionConditionMinOrderByAggregateInput
  }

  export type StatusChangeSubscriptionConditionScalarWhereWithAggregatesInput = {
    AND?: StatusChangeSubscriptionConditionScalarWhereWithAggregatesInput | StatusChangeSubscriptionConditionScalarWhereWithAggregatesInput[]
    OR?: StatusChangeSubscriptionConditionScalarWhereWithAggregatesInput[]
    NOT?: StatusChangeSubscriptionConditionScalarWhereWithAggregatesInput | StatusChangeSubscriptionConditionScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"StatusChangeSubscriptionCondition"> | string
    createdAt?: DateTimeWithAggregatesFilter<"StatusChangeSubscriptionCondition"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StatusChangeSubscriptionCondition"> | Date | string
    fromStatus?: EnumProductStatusNullableListFilter<"StatusChangeSubscriptionCondition">
    toStatus?: EnumProductStatusNullableListFilter<"StatusChangeSubscriptionCondition">
    subscriptionId?: UuidWithAggregatesFilter<"StatusChangeSubscriptionCondition"> | string
  }

  export type StatusChangeSubscriptionWhereInput = {
    AND?: StatusChangeSubscriptionWhereInput | StatusChangeSubscriptionWhereInput[]
    OR?: StatusChangeSubscriptionWhereInput[]
    NOT?: StatusChangeSubscriptionWhereInput | StatusChangeSubscriptionWhereInput[]
    id?: UuidFilter<"StatusChangeSubscription"> | string
    conditions?: StatusChangeSubscriptionConditionListRelationFilter
    notifications?: StatusChangeNotificationListRelationFilter
    delegate_aux_productSubscription?: XOR<ProductSubscriptionRelationFilter, ProductSubscriptionWhereInput>
  }

  export type StatusChangeSubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    conditions?: StatusChangeSubscriptionConditionOrderByRelationAggregateInput
    notifications?: StatusChangeNotificationOrderByRelationAggregateInput
    delegate_aux_productSubscription?: ProductSubscriptionOrderByWithRelationInput
  }

  export type StatusChangeSubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StatusChangeSubscriptionWhereInput | StatusChangeSubscriptionWhereInput[]
    OR?: StatusChangeSubscriptionWhereInput[]
    NOT?: StatusChangeSubscriptionWhereInput | StatusChangeSubscriptionWhereInput[]
    conditions?: StatusChangeSubscriptionConditionListRelationFilter
    notifications?: StatusChangeNotificationListRelationFilter
    delegate_aux_productSubscription?: XOR<ProductSubscriptionRelationFilter, ProductSubscriptionWhereInput>
  }, "id">

  export type StatusChangeSubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    _count?: StatusChangeSubscriptionCountOrderByAggregateInput
    _max?: StatusChangeSubscriptionMaxOrderByAggregateInput
    _min?: StatusChangeSubscriptionMinOrderByAggregateInput
  }

  export type StatusChangeSubscriptionScalarWhereWithAggregatesInput = {
    AND?: StatusChangeSubscriptionScalarWhereWithAggregatesInput | StatusChangeSubscriptionScalarWhereWithAggregatesInput[]
    OR?: StatusChangeSubscriptionScalarWhereWithAggregatesInput[]
    NOT?: StatusChangeSubscriptionScalarWhereWithAggregatesInput | StatusChangeSubscriptionScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"StatusChangeSubscription"> | string
  }

  export type PriceChangeSubscriptionWhereInput = {
    AND?: PriceChangeSubscriptionWhereInput | PriceChangeSubscriptionWhereInput[]
    OR?: PriceChangeSubscriptionWhereInput[]
    NOT?: PriceChangeSubscriptionWhereInput | PriceChangeSubscriptionWhereInput[]
    id?: UuidFilter<"PriceChangeSubscription"> | string
    conditions?: EnumPriceChangeSubscriptionConditionNullableListFilter<"PriceChangeSubscription">
    notifications?: PriceChangeNotificationListRelationFilter
    delegate_aux_productSubscription?: XOR<ProductSubscriptionRelationFilter, ProductSubscriptionWhereInput>
  }

  export type PriceChangeSubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    conditions?: SortOrder
    notifications?: PriceChangeNotificationOrderByRelationAggregateInput
    delegate_aux_productSubscription?: ProductSubscriptionOrderByWithRelationInput
  }

  export type PriceChangeSubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PriceChangeSubscriptionWhereInput | PriceChangeSubscriptionWhereInput[]
    OR?: PriceChangeSubscriptionWhereInput[]
    NOT?: PriceChangeSubscriptionWhereInput | PriceChangeSubscriptionWhereInput[]
    conditions?: EnumPriceChangeSubscriptionConditionNullableListFilter<"PriceChangeSubscription">
    notifications?: PriceChangeNotificationListRelationFilter
    delegate_aux_productSubscription?: XOR<ProductSubscriptionRelationFilter, ProductSubscriptionWhereInput>
  }, "id">

  export type PriceChangeSubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    conditions?: SortOrder
    _count?: PriceChangeSubscriptionCountOrderByAggregateInput
    _max?: PriceChangeSubscriptionMaxOrderByAggregateInput
    _min?: PriceChangeSubscriptionMinOrderByAggregateInput
  }

  export type PriceChangeSubscriptionScalarWhereWithAggregatesInput = {
    AND?: PriceChangeSubscriptionScalarWhereWithAggregatesInput | PriceChangeSubscriptionScalarWhereWithAggregatesInput[]
    OR?: PriceChangeSubscriptionScalarWhereWithAggregatesInput[]
    NOT?: PriceChangeSubscriptionScalarWhereWithAggregatesInput | PriceChangeSubscriptionScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"PriceChangeSubscription"> | string
    conditions?: EnumPriceChangeSubscriptionConditionNullableListFilter<"PriceChangeSubscription">
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: UuidFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    createdById?: UuidFilter<"Notification"> | string
    updatedById?: UuidFilter<"Notification"> | string
    userId?: UuidFilter<"Notification"> | string
    notificationType?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    state?: EnumNotificationStateFilter<"Notification"> | $Enums.NotificationState
    stateAsOf?: DateTimeFilter<"Notification"> | Date | string
    failedAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    delegate_aux_priceChangeNotification?: XOR<PriceChangeNotificationNullableRelationFilter, PriceChangeNotificationWhereInput> | null
    delegate_aux_statusChangeNotification?: XOR<StatusChangeNotificationNullableRelationFilter, StatusChangeNotificationWhereInput> | null
    delegate_aux_newProductNotification?: XOR<NewProductNotificationNullableRelationFilter, NewProductNotificationWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    userId?: SortOrder
    notificationType?: SortOrder
    state?: SortOrder
    stateAsOf?: SortOrder
    failedAt?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    delegate_aux_priceChangeNotification?: PriceChangeNotificationOrderByWithRelationInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationOrderByWithRelationInput
    delegate_aux_newProductNotification?: NewProductNotificationOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    createdById?: UuidFilter<"Notification"> | string
    updatedById?: UuidFilter<"Notification"> | string
    userId?: UuidFilter<"Notification"> | string
    notificationType?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    state?: EnumNotificationStateFilter<"Notification"> | $Enums.NotificationState
    stateAsOf?: DateTimeFilter<"Notification"> | Date | string
    failedAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    delegate_aux_priceChangeNotification?: XOR<PriceChangeNotificationNullableRelationFilter, PriceChangeNotificationWhereInput> | null
    delegate_aux_statusChangeNotification?: XOR<StatusChangeNotificationNullableRelationFilter, StatusChangeNotificationWhereInput> | null
    delegate_aux_newProductNotification?: XOR<NewProductNotificationNullableRelationFilter, NewProductNotificationWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    userId?: SortOrder
    notificationType?: SortOrder
    state?: SortOrder
    stateAsOf?: SortOrder
    failedAt?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Notification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    createdById?: UuidWithAggregatesFilter<"Notification"> | string
    updatedById?: UuidWithAggregatesFilter<"Notification"> | string
    userId?: UuidWithAggregatesFilter<"Notification"> | string
    notificationType?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    state?: EnumNotificationStateWithAggregatesFilter<"Notification"> | $Enums.NotificationState
    stateAsOf?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    failedAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    sentAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
  }

  export type PriceChangeNotificationWhereInput = {
    AND?: PriceChangeNotificationWhereInput | PriceChangeNotificationWhereInput[]
    OR?: PriceChangeNotificationWhereInput[]
    NOT?: PriceChangeNotificationWhereInput | PriceChangeNotificationWhereInput[]
    id?: UuidFilter<"PriceChangeNotification"> | string
    productRecordId?: UuidFilter<"PriceChangeNotification"> | string
    subscriptionId?: UuidFilter<"PriceChangeNotification"> | string
    condition?: EnumPriceChangeSubscriptionConditionFilter<"PriceChangeNotification"> | $Enums.PriceChangeSubscriptionCondition
    previousPrice?: FloatFilter<"PriceChangeNotification"> | number
    newPrice?: FloatFilter<"PriceChangeNotification"> | number
    productRecord?: XOR<ProductRecordRelationFilter, ProductRecordWhereInput>
    subscription?: XOR<PriceChangeSubscriptionRelationFilter, PriceChangeSubscriptionWhereInput>
    delegate_aux_notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
  }

  export type PriceChangeNotificationOrderByWithRelationInput = {
    id?: SortOrder
    productRecordId?: SortOrder
    subscriptionId?: SortOrder
    condition?: SortOrder
    previousPrice?: SortOrder
    newPrice?: SortOrder
    productRecord?: ProductRecordOrderByWithRelationInput
    subscription?: PriceChangeSubscriptionOrderByWithRelationInput
    delegate_aux_notification?: NotificationOrderByWithRelationInput
  }

  export type PriceChangeNotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PriceChangeNotificationWhereInput | PriceChangeNotificationWhereInput[]
    OR?: PriceChangeNotificationWhereInput[]
    NOT?: PriceChangeNotificationWhereInput | PriceChangeNotificationWhereInput[]
    productRecordId?: UuidFilter<"PriceChangeNotification"> | string
    subscriptionId?: UuidFilter<"PriceChangeNotification"> | string
    condition?: EnumPriceChangeSubscriptionConditionFilter<"PriceChangeNotification"> | $Enums.PriceChangeSubscriptionCondition
    previousPrice?: FloatFilter<"PriceChangeNotification"> | number
    newPrice?: FloatFilter<"PriceChangeNotification"> | number
    productRecord?: XOR<ProductRecordRelationFilter, ProductRecordWhereInput>
    subscription?: XOR<PriceChangeSubscriptionRelationFilter, PriceChangeSubscriptionWhereInput>
    delegate_aux_notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
  }, "id">

  export type PriceChangeNotificationOrderByWithAggregationInput = {
    id?: SortOrder
    productRecordId?: SortOrder
    subscriptionId?: SortOrder
    condition?: SortOrder
    previousPrice?: SortOrder
    newPrice?: SortOrder
    _count?: PriceChangeNotificationCountOrderByAggregateInput
    _avg?: PriceChangeNotificationAvgOrderByAggregateInput
    _max?: PriceChangeNotificationMaxOrderByAggregateInput
    _min?: PriceChangeNotificationMinOrderByAggregateInput
    _sum?: PriceChangeNotificationSumOrderByAggregateInput
  }

  export type PriceChangeNotificationScalarWhereWithAggregatesInput = {
    AND?: PriceChangeNotificationScalarWhereWithAggregatesInput | PriceChangeNotificationScalarWhereWithAggregatesInput[]
    OR?: PriceChangeNotificationScalarWhereWithAggregatesInput[]
    NOT?: PriceChangeNotificationScalarWhereWithAggregatesInput | PriceChangeNotificationScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"PriceChangeNotification"> | string
    productRecordId?: UuidWithAggregatesFilter<"PriceChangeNotification"> | string
    subscriptionId?: UuidWithAggregatesFilter<"PriceChangeNotification"> | string
    condition?: EnumPriceChangeSubscriptionConditionWithAggregatesFilter<"PriceChangeNotification"> | $Enums.PriceChangeSubscriptionCondition
    previousPrice?: FloatWithAggregatesFilter<"PriceChangeNotification"> | number
    newPrice?: FloatWithAggregatesFilter<"PriceChangeNotification"> | number
  }

  export type StatusChangeNotificationWhereInput = {
    AND?: StatusChangeNotificationWhereInput | StatusChangeNotificationWhereInput[]
    OR?: StatusChangeNotificationWhereInput[]
    NOT?: StatusChangeNotificationWhereInput | StatusChangeNotificationWhereInput[]
    id?: UuidFilter<"StatusChangeNotification"> | string
    productRecordId?: UuidFilter<"StatusChangeNotification"> | string
    subscriptionId?: UuidFilter<"StatusChangeNotification"> | string
    previousStatus?: EnumProductStatusFilter<"StatusChangeNotification"> | $Enums.ProductStatus
    newStatus?: EnumProductStatusFilter<"StatusChangeNotification"> | $Enums.ProductStatus
    productRecord?: XOR<ProductRecordRelationFilter, ProductRecordWhereInput>
    subscription?: XOR<StatusChangeSubscriptionRelationFilter, StatusChangeSubscriptionWhereInput>
    delegate_aux_notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
  }

  export type StatusChangeNotificationOrderByWithRelationInput = {
    id?: SortOrder
    productRecordId?: SortOrder
    subscriptionId?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
    productRecord?: ProductRecordOrderByWithRelationInput
    subscription?: StatusChangeSubscriptionOrderByWithRelationInput
    delegate_aux_notification?: NotificationOrderByWithRelationInput
  }

  export type StatusChangeNotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StatusChangeNotificationWhereInput | StatusChangeNotificationWhereInput[]
    OR?: StatusChangeNotificationWhereInput[]
    NOT?: StatusChangeNotificationWhereInput | StatusChangeNotificationWhereInput[]
    productRecordId?: UuidFilter<"StatusChangeNotification"> | string
    subscriptionId?: UuidFilter<"StatusChangeNotification"> | string
    previousStatus?: EnumProductStatusFilter<"StatusChangeNotification"> | $Enums.ProductStatus
    newStatus?: EnumProductStatusFilter<"StatusChangeNotification"> | $Enums.ProductStatus
    productRecord?: XOR<ProductRecordRelationFilter, ProductRecordWhereInput>
    subscription?: XOR<StatusChangeSubscriptionRelationFilter, StatusChangeSubscriptionWhereInput>
    delegate_aux_notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
  }, "id">

  export type StatusChangeNotificationOrderByWithAggregationInput = {
    id?: SortOrder
    productRecordId?: SortOrder
    subscriptionId?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
    _count?: StatusChangeNotificationCountOrderByAggregateInput
    _max?: StatusChangeNotificationMaxOrderByAggregateInput
    _min?: StatusChangeNotificationMinOrderByAggregateInput
  }

  export type StatusChangeNotificationScalarWhereWithAggregatesInput = {
    AND?: StatusChangeNotificationScalarWhereWithAggregatesInput | StatusChangeNotificationScalarWhereWithAggregatesInput[]
    OR?: StatusChangeNotificationScalarWhereWithAggregatesInput[]
    NOT?: StatusChangeNotificationScalarWhereWithAggregatesInput | StatusChangeNotificationScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"StatusChangeNotification"> | string
    productRecordId?: UuidWithAggregatesFilter<"StatusChangeNotification"> | string
    subscriptionId?: UuidWithAggregatesFilter<"StatusChangeNotification"> | string
    previousStatus?: EnumProductStatusWithAggregatesFilter<"StatusChangeNotification"> | $Enums.ProductStatus
    newStatus?: EnumProductStatusWithAggregatesFilter<"StatusChangeNotification"> | $Enums.ProductStatus
  }

  export type NewProductNotificationWhereInput = {
    AND?: NewProductNotificationWhereInput | NewProductNotificationWhereInput[]
    OR?: NewProductNotificationWhereInput[]
    NOT?: NewProductNotificationWhereInput | NewProductNotificationWhereInput[]
    id?: UuidFilter<"NewProductNotification"> | string
    productId?: UuidFilter<"NewProductNotification"> | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    delegate_aux_notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
  }

  export type NewProductNotificationOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    product?: ProductOrderByWithRelationInput
    delegate_aux_notification?: NotificationOrderByWithRelationInput
  }

  export type NewProductNotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NewProductNotificationWhereInput | NewProductNotificationWhereInput[]
    OR?: NewProductNotificationWhereInput[]
    NOT?: NewProductNotificationWhereInput | NewProductNotificationWhereInput[]
    productId?: UuidFilter<"NewProductNotification"> | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    delegate_aux_notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
  }, "id">

  export type NewProductNotificationOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    _count?: NewProductNotificationCountOrderByAggregateInput
    _max?: NewProductNotificationMaxOrderByAggregateInput
    _min?: NewProductNotificationMinOrderByAggregateInput
  }

  export type NewProductNotificationScalarWhereWithAggregatesInput = {
    AND?: NewProductNotificationScalarWhereWithAggregatesInput | NewProductNotificationScalarWhereWithAggregatesInput[]
    OR?: NewProductNotificationScalarWhereWithAggregatesInput[]
    NOT?: NewProductNotificationScalarWhereWithAggregatesInput | NewProductNotificationScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"NewProductNotification"> | string
    productId?: UuidWithAggregatesFilter<"NewProductNotification"> | string
  }

  export type UserCreateInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationUncheckedCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUncheckedUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HttpNetworkErrorDataCreateInput = {
    id?: string
    url: string
  }

  export type HttpNetworkErrorDataUncheckedCreateInput = {
    id?: string
    url: string
  }

  export type HttpNetworkErrorDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type HttpNetworkErrorDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type HttpNetworkErrorDataCreateManyInput = {
    id?: string
    url: string
  }

  export type HttpNetworkErrorDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type HttpNetworkErrorDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type HttpSerializationErrorDataCreateInput = {
    id?: string
    url: string
  }

  export type HttpSerializationErrorDataUncheckedCreateInput = {
    id?: string
    url: string
  }

  export type HttpSerializationErrorDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type HttpSerializationErrorDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type HttpSerializationErrorDataCreateManyInput = {
    id?: string
    url: string
  }

  export type HttpSerializationErrorDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type HttpSerializationErrorDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type HttpClientErrorDataCreateInput = {
    id?: string
    url: string
    status: number
  }

  export type HttpClientErrorDataUncheckedCreateInput = {
    id?: string
    url: string
    status: number
  }

  export type HttpClientErrorDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type HttpClientErrorDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type HttpClientErrorDataCreateManyInput = {
    id?: string
    url: string
    status: number
  }

  export type HttpClientErrorDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type HttpClientErrorDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type MissingAttributeErrorDataCreateInput = {
    id?: string
    attribute: $Enums.ElementAttribute
    parentHtml?: string | null
  }

  export type MissingAttributeErrorDataUncheckedCreateInput = {
    id?: string
    attribute: $Enums.ElementAttribute
    parentHtml?: string | null
  }

  export type MissingAttributeErrorDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    attribute?: EnumElementAttributeFieldUpdateOperationsInput | $Enums.ElementAttribute
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MissingAttributeErrorDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    attribute?: EnumElementAttributeFieldUpdateOperationsInput | $Enums.ElementAttribute
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MissingAttributeErrorDataCreateManyInput = {
    id?: string
    attribute: $Enums.ElementAttribute
    parentHtml?: string | null
  }

  export type MissingAttributeErrorDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    attribute?: EnumElementAttributeFieldUpdateOperationsInput | $Enums.ElementAttribute
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MissingAttributeErrorDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    attribute?: EnumElementAttributeFieldUpdateOperationsInput | $Enums.ElementAttribute
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvalidAttributeErrorDataCreateInput = {
    id?: string
    attribute: $Enums.ElementAttribute
    parentHtml?: string | null
    value: string
  }

  export type InvalidAttributeErrorDataUncheckedCreateInput = {
    id?: string
    attribute: $Enums.ElementAttribute
    parentHtml?: string | null
    value: string
  }

  export type InvalidAttributeErrorDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    attribute?: EnumElementAttributeFieldUpdateOperationsInput | $Enums.ElementAttribute
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
  }

  export type InvalidAttributeErrorDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    attribute?: EnumElementAttributeFieldUpdateOperationsInput | $Enums.ElementAttribute
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
  }

  export type InvalidAttributeErrorDataCreateManyInput = {
    id?: string
    attribute: $Enums.ElementAttribute
    parentHtml?: string | null
    value: string
  }

  export type InvalidAttributeErrorDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    attribute?: EnumElementAttributeFieldUpdateOperationsInput | $Enums.ElementAttribute
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
  }

  export type InvalidAttributeErrorDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    attribute?: EnumElementAttributeFieldUpdateOperationsInput | $Enums.ElementAttribute
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
  }

  export type InvalidTextErrorDataCreateInput = {
    id?: string
    parentHtml?: string | null
    value: string
  }

  export type InvalidTextErrorDataUncheckedCreateInput = {
    id?: string
    parentHtml?: string | null
    value: string
  }

  export type InvalidTextErrorDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
  }

  export type InvalidTextErrorDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
  }

  export type InvalidTextErrorDataCreateManyInput = {
    id?: string
    parentHtml?: string | null
    value: string
  }

  export type InvalidTextErrorDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
  }

  export type InvalidTextErrorDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
  }

  export type MissingTextErrorDataCreateInput = {
    id?: string
    parentHtml?: string | null
  }

  export type MissingTextErrorDataUncheckedCreateInput = {
    id?: string
    parentHtml?: string | null
  }

  export type MissingTextErrorDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MissingTextErrorDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MissingTextErrorDataCreateManyInput = {
    id?: string
    parentHtml?: string | null
  }

  export type MissingTextErrorDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MissingTextErrorDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NonUniqueTextErrorDataCreateInput = {
    id?: string
    parentHtml?: string | null
  }

  export type NonUniqueTextErrorDataUncheckedCreateInput = {
    id?: string
    parentHtml?: string | null
  }

  export type NonUniqueTextErrorDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NonUniqueTextErrorDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NonUniqueTextErrorDataCreateManyInput = {
    id?: string
    parentHtml?: string | null
  }

  export type NonUniqueTextErrorDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NonUniqueTextErrorDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MissingElementErrorDataCreateInput = {
    id?: string
    parentHtml?: string | null
    selector: string
  }

  export type MissingElementErrorDataUncheckedCreateInput = {
    id?: string
    parentHtml?: string | null
    selector: string
  }

  export type MissingElementErrorDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    selector?: StringFieldUpdateOperationsInput | string
  }

  export type MissingElementErrorDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    selector?: StringFieldUpdateOperationsInput | string
  }

  export type MissingElementErrorDataCreateManyInput = {
    id?: string
    parentHtml?: string | null
    selector: string
  }

  export type MissingElementErrorDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    selector?: StringFieldUpdateOperationsInput | string
  }

  export type MissingElementErrorDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    selector?: StringFieldUpdateOperationsInput | string
  }

  export type NonUniqueElementErrorDataCreateInput = {
    id?: string
    parentHtml?: string | null
    selector: string
  }

  export type NonUniqueElementErrorDataUncheckedCreateInput = {
    id?: string
    parentHtml?: string | null
    selector: string
  }

  export type NonUniqueElementErrorDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    selector?: StringFieldUpdateOperationsInput | string
  }

  export type NonUniqueElementErrorDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    selector?: StringFieldUpdateOperationsInput | string
  }

  export type NonUniqueElementErrorDataCreateManyInput = {
    id?: string
    parentHtml?: string | null
    selector: string
  }

  export type NonUniqueElementErrorDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    selector?: StringFieldUpdateOperationsInput | string
  }

  export type NonUniqueElementErrorDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    selector?: StringFieldUpdateOperationsInput | string
  }

  export type ProductRecordErrorCreateInput = {
    id?: string
    errorId: string
    errorCode: $Enums.ScrapingErrorCode
    field: $Enums.ProductRecordDataField
    message: string
    record: ProductRecordCreateNestedOneWithoutErrorsInput
  }

  export type ProductRecordErrorUncheckedCreateInput = {
    id?: string
    errorId: string
    errorCode: $Enums.ScrapingErrorCode
    recordId: string
    field: $Enums.ProductRecordDataField
    message: string
  }

  export type ProductRecordErrorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    errorId?: StringFieldUpdateOperationsInput | string
    errorCode?: EnumScrapingErrorCodeFieldUpdateOperationsInput | $Enums.ScrapingErrorCode
    field?: EnumProductRecordDataFieldFieldUpdateOperationsInput | $Enums.ProductRecordDataField
    message?: StringFieldUpdateOperationsInput | string
    record?: ProductRecordUpdateOneRequiredWithoutErrorsNestedInput
  }

  export type ProductRecordErrorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    errorId?: StringFieldUpdateOperationsInput | string
    errorCode?: EnumScrapingErrorCodeFieldUpdateOperationsInput | $Enums.ScrapingErrorCode
    recordId?: StringFieldUpdateOperationsInput | string
    field?: EnumProductRecordDataFieldFieldUpdateOperationsInput | $Enums.ProductRecordDataField
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ProductRecordErrorCreateManyInput = {
    id?: string
    errorId: string
    errorCode: $Enums.ScrapingErrorCode
    recordId: string
    field: $Enums.ProductRecordDataField
    message: string
  }

  export type ProductRecordErrorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    errorId?: StringFieldUpdateOperationsInput | string
    errorCode?: EnumScrapingErrorCodeFieldUpdateOperationsInput | $Enums.ScrapingErrorCode
    field?: EnumProductRecordDataFieldFieldUpdateOperationsInput | $Enums.ProductRecordDataField
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ProductRecordErrorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    errorId?: StringFieldUpdateOperationsInput | string
    errorCode?: EnumScrapingErrorCodeFieldUpdateOperationsInput | $Enums.ScrapingErrorCode
    recordId?: StringFieldUpdateOperationsInput | string
    field?: EnumProductRecordDataFieldFieldUpdateOperationsInput | $Enums.ProductRecordDataField
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ProductRecordCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timestamp?: Date | string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    createdBy: UserCreateNestedOneWithoutCreatedProductRecordsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProductRecordsInput
    product: ProductCreateNestedOneWithoutRecordsInput
    errors?: ProductRecordErrorCreateNestedManyWithoutRecordInput
    statusChangeNotifications?: StatusChangeNotificationCreateNestedManyWithoutProductRecordInput
    priceChangeNotifications?: PriceChangeNotificationCreateNestedManyWithoutProductRecordInput
    processedRecords?: ProcessedProductRecordCreateNestedManyWithoutRecordInput
  }

  export type ProductRecordUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    timestamp?: Date | string
    productId: string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    errors?: ProductRecordErrorUncheckedCreateNestedManyWithoutRecordInput
    statusChangeNotifications?: StatusChangeNotificationUncheckedCreateNestedManyWithoutProductRecordInput
    priceChangeNotifications?: PriceChangeNotificationUncheckedCreateNestedManyWithoutProductRecordInput
    processedRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutRecordInput
  }

  export type ProductRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductRecordsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductRecordsNestedInput
    product?: ProductUpdateOneRequiredWithoutRecordsNestedInput
    errors?: ProductRecordErrorUpdateManyWithoutRecordNestedInput
    statusChangeNotifications?: StatusChangeNotificationUpdateManyWithoutProductRecordNestedInput
    priceChangeNotifications?: PriceChangeNotificationUpdateManyWithoutProductRecordNestedInput
    processedRecords?: ProcessedProductRecordUpdateManyWithoutRecordNestedInput
  }

  export type ProductRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    errors?: ProductRecordErrorUncheckedUpdateManyWithoutRecordNestedInput
    statusChangeNotifications?: StatusChangeNotificationUncheckedUpdateManyWithoutProductRecordNestedInput
    priceChangeNotifications?: PriceChangeNotificationUncheckedUpdateManyWithoutProductRecordNestedInput
    processedRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutRecordNestedInput
  }

  export type ProductRecordCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    timestamp?: Date | string
    productId: string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
  }

  export type ProductRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
  }

  export type ProductRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
  }

  export type ProcessedProductRecordCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedProcessedProductRecordsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProcessedProductRecordsInput
    record: ProductRecordCreateNestedOneWithoutProcessedRecordsInput
    user: UserCreateNestedOneWithoutProcessedProductRecordsInput
  }

  export type ProcessedProductRecordUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    recordId: string
    userId: string
  }

  export type ProcessedProductRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedProcessedProductRecordsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProcessedProductRecordsNestedInput
    record?: ProductRecordUpdateOneRequiredWithoutProcessedRecordsNestedInput
    user?: UserUpdateOneRequiredWithoutProcessedProductRecordsNestedInput
  }

  export type ProcessedProductRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessedProductRecordCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    recordId: string
    userId: string
  }

  export type ProcessedProductRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcessedProductRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name?: string | null
    slug: string
    code?: string | null
    imageSrc?: string | null
    status?: $Enums.ProductStatus | null
    statusLastUpdatedAt?: Date | string | null
    statusAsOf?: Date | string | null
    price?: number | null
    priceLastUpdatedAt?: Date | string | null
    priceAsOf?: Date | string | null
    category: $Enums.ProductCategory
    subCategories?: ProductCreatesubCategoriesInput | $Enums.ProductSubCategory[]
    createdBy: UserCreateNestedOneWithoutCreatedProductsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProductsInput
    records?: ProductRecordCreateNestedManyWithoutProductInput
    subscriptions?: ProductSubscriptionCreateNestedManyWithoutProductInput
    newProductNotifications?: NewProductNotificationCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    name?: string | null
    slug: string
    code?: string | null
    imageSrc?: string | null
    status?: $Enums.ProductStatus | null
    statusLastUpdatedAt?: Date | string | null
    statusAsOf?: Date | string | null
    price?: number | null
    priceLastUpdatedAt?: Date | string | null
    priceAsOf?: Date | string | null
    category: $Enums.ProductCategory
    subCategories?: ProductCreatesubCategoriesInput | $Enums.ProductSubCategory[]
    records?: ProductRecordUncheckedCreateNestedManyWithoutProductInput
    subscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutProductInput
    newProductNotifications?: NewProductNotificationUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    imageSrc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    statusLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    priceLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priceAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    subCategories?: ProductUpdatesubCategoriesInput | $Enums.ProductSubCategory[]
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductsNestedInput
    records?: ProductRecordUpdateManyWithoutProductNestedInput
    subscriptions?: ProductSubscriptionUpdateManyWithoutProductNestedInput
    newProductNotifications?: NewProductNotificationUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    imageSrc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    statusLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    priceLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priceAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    subCategories?: ProductUpdatesubCategoriesInput | $Enums.ProductSubCategory[]
    records?: ProductRecordUncheckedUpdateManyWithoutProductNestedInput
    subscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutProductNestedInput
    newProductNotifications?: NewProductNotificationUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    name?: string | null
    slug: string
    code?: string | null
    imageSrc?: string | null
    status?: $Enums.ProductStatus | null
    statusLastUpdatedAt?: Date | string | null
    statusAsOf?: Date | string | null
    price?: number | null
    priceLastUpdatedAt?: Date | string | null
    priceAsOf?: Date | string | null
    category: $Enums.ProductCategory
    subCategories?: ProductCreatesubCategoriesInput | $Enums.ProductSubCategory[]
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    imageSrc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    statusLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    priceLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priceAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    subCategories?: ProductUpdatesubCategoriesInput | $Enums.ProductSubCategory[]
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    imageSrc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    statusLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    priceLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priceAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    subCategories?: ProductUpdatesubCategoriesInput | $Enums.ProductSubCategory[]
  }

  export type ProductSubscriptionCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionType: $Enums.SubscriptionType
    enabled?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedProductSubscriptionsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProductSubscriptionsInput
    user: UserCreateNestedOneWithoutProductSubscriptionsInput
    product: ProductCreateNestedOneWithoutSubscriptionsInput
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
  }

  export type ProductSubscriptionUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    subscriptionType: $Enums.SubscriptionType
    userId: string
    productId: string
    enabled?: boolean
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUncheckedCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUncheckedCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
  }

  export type ProductSubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductSubscriptionsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductSubscriptionsNestedInput
    user?: UserUpdateOneRequiredWithoutProductSubscriptionsNestedInput
    product?: ProductUpdateOneRequiredWithoutSubscriptionsNestedInput
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
  }

  export type ProductSubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUncheckedUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUncheckedUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
  }

  export type ProductSubscriptionCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    subscriptionType: $Enums.SubscriptionType
    userId: string
    productId: string
    enabled?: boolean
  }

  export type ProductSubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    enabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductSubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StatusChangeSubscriptionConditionCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromStatus?: StatusChangeSubscriptionConditionCreatefromStatusInput | $Enums.ProductStatus[]
    toStatus?: StatusChangeSubscriptionConditionCreatetoStatusInput | $Enums.ProductStatus[]
    subscription: StatusChangeSubscriptionCreateNestedOneWithoutConditionsInput
  }

  export type StatusChangeSubscriptionConditionUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromStatus?: StatusChangeSubscriptionConditionCreatefromStatusInput | $Enums.ProductStatus[]
    toStatus?: StatusChangeSubscriptionConditionCreatetoStatusInput | $Enums.ProductStatus[]
    subscriptionId: string
  }

  export type StatusChangeSubscriptionConditionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromStatus?: StatusChangeSubscriptionConditionUpdatefromStatusInput | $Enums.ProductStatus[]
    toStatus?: StatusChangeSubscriptionConditionUpdatetoStatusInput | $Enums.ProductStatus[]
    subscription?: StatusChangeSubscriptionUpdateOneRequiredWithoutConditionsNestedInput
  }

  export type StatusChangeSubscriptionConditionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromStatus?: StatusChangeSubscriptionConditionUpdatefromStatusInput | $Enums.ProductStatus[]
    toStatus?: StatusChangeSubscriptionConditionUpdatetoStatusInput | $Enums.ProductStatus[]
    subscriptionId?: StringFieldUpdateOperationsInput | string
  }

  export type StatusChangeSubscriptionConditionCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromStatus?: StatusChangeSubscriptionConditionCreatefromStatusInput | $Enums.ProductStatus[]
    toStatus?: StatusChangeSubscriptionConditionCreatetoStatusInput | $Enums.ProductStatus[]
    subscriptionId: string
  }

  export type StatusChangeSubscriptionConditionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromStatus?: StatusChangeSubscriptionConditionUpdatefromStatusInput | $Enums.ProductStatus[]
    toStatus?: StatusChangeSubscriptionConditionUpdatetoStatusInput | $Enums.ProductStatus[]
  }

  export type StatusChangeSubscriptionConditionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromStatus?: StatusChangeSubscriptionConditionUpdatefromStatusInput | $Enums.ProductStatus[]
    toStatus?: StatusChangeSubscriptionConditionUpdatetoStatusInput | $Enums.ProductStatus[]
    subscriptionId?: StringFieldUpdateOperationsInput | string
  }

  export type StatusChangeSubscriptionCreateInput = {
    conditions?: StatusChangeSubscriptionConditionCreateNestedManyWithoutSubscriptionInput
    notifications?: StatusChangeNotificationCreateNestedManyWithoutSubscriptionInput
    delegate_aux_productSubscription?: ProductSubscriptionCreateNestedOneWithoutDelegate_aux_statusChangeSubscriptionInput
  }

  export type StatusChangeSubscriptionUncheckedCreateInput = {
    id?: string
    conditions?: StatusChangeSubscriptionConditionUncheckedCreateNestedManyWithoutSubscriptionInput
    notifications?: StatusChangeNotificationUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type StatusChangeSubscriptionUpdateInput = {
    conditions?: StatusChangeSubscriptionConditionUpdateManyWithoutSubscriptionNestedInput
    notifications?: StatusChangeNotificationUpdateManyWithoutSubscriptionNestedInput
    delegate_aux_productSubscription?: ProductSubscriptionUpdateOneRequiredWithoutDelegate_aux_statusChangeSubscriptionNestedInput
  }

  export type StatusChangeSubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    conditions?: StatusChangeSubscriptionConditionUncheckedUpdateManyWithoutSubscriptionNestedInput
    notifications?: StatusChangeNotificationUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type StatusChangeSubscriptionCreateManyInput = {
    id?: string
  }

  export type StatusChangeSubscriptionUpdateManyMutationInput = {

  }

  export type StatusChangeSubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type PriceChangeSubscriptionCreateInput = {
    conditions?: PriceChangeSubscriptionCreateconditionsInput | $Enums.PriceChangeSubscriptionCondition[]
    notifications?: PriceChangeNotificationCreateNestedManyWithoutSubscriptionInput
    delegate_aux_productSubscription?: ProductSubscriptionCreateNestedOneWithoutDelegate_aux_priceChangeSubscriptionInput
  }

  export type PriceChangeSubscriptionUncheckedCreateInput = {
    id?: string
    conditions?: PriceChangeSubscriptionCreateconditionsInput | $Enums.PriceChangeSubscriptionCondition[]
    notifications?: PriceChangeNotificationUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type PriceChangeSubscriptionUpdateInput = {
    conditions?: PriceChangeSubscriptionUpdateconditionsInput | $Enums.PriceChangeSubscriptionCondition[]
    notifications?: PriceChangeNotificationUpdateManyWithoutSubscriptionNestedInput
    delegate_aux_productSubscription?: ProductSubscriptionUpdateOneRequiredWithoutDelegate_aux_priceChangeSubscriptionNestedInput
  }

  export type PriceChangeSubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    conditions?: PriceChangeSubscriptionUpdateconditionsInput | $Enums.PriceChangeSubscriptionCondition[]
    notifications?: PriceChangeNotificationUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type PriceChangeSubscriptionCreateManyInput = {
    id?: string
    conditions?: PriceChangeSubscriptionCreateconditionsInput | $Enums.PriceChangeSubscriptionCondition[]
  }

  export type PriceChangeSubscriptionUpdateManyMutationInput = {
    conditions?: PriceChangeSubscriptionUpdateconditionsInput | $Enums.PriceChangeSubscriptionCondition[]
  }

  export type PriceChangeSubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    conditions?: PriceChangeSubscriptionUpdateconditionsInput | $Enums.PriceChangeSubscriptionCondition[]
  }

  export type NotificationCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedNotificationsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedNotificationsInput
    user: UserCreateNestedOneWithoutNotificationsInput
    delegate_aux_priceChangeNotification?: PriceChangeNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_newProductNotification?: NewProductNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    userId: string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_newProductNotification?: NewProductNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedNotificationsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedNotificationsNestedInput
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_newProductNotification?: NewProductNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_newProductNotification?: NewProductNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
  }

  export type NotificationCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    userId: string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PriceChangeNotificationCreateInput = {
    condition: $Enums.PriceChangeSubscriptionCondition
    previousPrice: number
    newPrice: number
    productRecord: ProductRecordCreateNestedOneWithoutPriceChangeNotificationsInput
    subscription: PriceChangeSubscriptionCreateNestedOneWithoutNotificationsInput
    delegate_aux_notification?: NotificationCreateNestedOneWithoutDelegate_aux_priceChangeNotificationInput
  }

  export type PriceChangeNotificationUncheckedCreateInput = {
    id?: string
    productRecordId: string
    subscriptionId: string
    condition: $Enums.PriceChangeSubscriptionCondition
    previousPrice: number
    newPrice: number
  }

  export type PriceChangeNotificationUpdateInput = {
    condition?: EnumPriceChangeSubscriptionConditionFieldUpdateOperationsInput | $Enums.PriceChangeSubscriptionCondition
    previousPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
    productRecord?: ProductRecordUpdateOneRequiredWithoutPriceChangeNotificationsNestedInput
    subscription?: PriceChangeSubscriptionUpdateOneRequiredWithoutNotificationsNestedInput
    delegate_aux_notification?: NotificationUpdateOneRequiredWithoutDelegate_aux_priceChangeNotificationNestedInput
  }

  export type PriceChangeNotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productRecordId?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    condition?: EnumPriceChangeSubscriptionConditionFieldUpdateOperationsInput | $Enums.PriceChangeSubscriptionCondition
    previousPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type PriceChangeNotificationCreateManyInput = {
    id?: string
    productRecordId: string
    subscriptionId: string
    condition: $Enums.PriceChangeSubscriptionCondition
    previousPrice: number
    newPrice: number
  }

  export type PriceChangeNotificationUpdateManyMutationInput = {
    condition?: EnumPriceChangeSubscriptionConditionFieldUpdateOperationsInput | $Enums.PriceChangeSubscriptionCondition
    previousPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type PriceChangeNotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productRecordId?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    condition?: EnumPriceChangeSubscriptionConditionFieldUpdateOperationsInput | $Enums.PriceChangeSubscriptionCondition
    previousPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type StatusChangeNotificationCreateInput = {
    previousStatus: $Enums.ProductStatus
    newStatus: $Enums.ProductStatus
    productRecord: ProductRecordCreateNestedOneWithoutStatusChangeNotificationsInput
    subscription: StatusChangeSubscriptionCreateNestedOneWithoutNotificationsInput
    delegate_aux_notification?: NotificationCreateNestedOneWithoutDelegate_aux_statusChangeNotificationInput
  }

  export type StatusChangeNotificationUncheckedCreateInput = {
    id?: string
    productRecordId: string
    subscriptionId: string
    previousStatus: $Enums.ProductStatus
    newStatus: $Enums.ProductStatus
  }

  export type StatusChangeNotificationUpdateInput = {
    previousStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    newStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    productRecord?: ProductRecordUpdateOneRequiredWithoutStatusChangeNotificationsNestedInput
    subscription?: StatusChangeSubscriptionUpdateOneRequiredWithoutNotificationsNestedInput
    delegate_aux_notification?: NotificationUpdateOneRequiredWithoutDelegate_aux_statusChangeNotificationNestedInput
  }

  export type StatusChangeNotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productRecordId?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    previousStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    newStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
  }

  export type StatusChangeNotificationCreateManyInput = {
    id?: string
    productRecordId: string
    subscriptionId: string
    previousStatus: $Enums.ProductStatus
    newStatus: $Enums.ProductStatus
  }

  export type StatusChangeNotificationUpdateManyMutationInput = {
    previousStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    newStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
  }

  export type StatusChangeNotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productRecordId?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    previousStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    newStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
  }

  export type NewProductNotificationCreateInput = {
    product: ProductCreateNestedOneWithoutNewProductNotificationsInput
    delegate_aux_notification?: NotificationCreateNestedOneWithoutDelegate_aux_newProductNotificationInput
  }

  export type NewProductNotificationUncheckedCreateInput = {
    id?: string
    productId: string
  }

  export type NewProductNotificationUpdateInput = {
    product?: ProductUpdateOneRequiredWithoutNewProductNotificationsNestedInput
    delegate_aux_notification?: NotificationUpdateOneRequiredWithoutDelegate_aux_newProductNotificationNestedInput
  }

  export type NewProductNotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type NewProductNotificationCreateManyInput = {
    id?: string
    productId: string
  }

  export type NewProductNotificationUpdateManyMutationInput = {

  }

  export type NewProductNotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type ProductRecordListRelationFilter = {
    every?: ProductRecordWhereInput
    some?: ProductRecordWhereInput
    none?: ProductRecordWhereInput
  }

  export type ProductSubscriptionListRelationFilter = {
    every?: ProductSubscriptionWhereInput
    some?: ProductSubscriptionWhereInput
    none?: ProductSubscriptionWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type ProcessedProductRecordListRelationFilter = {
    every?: ProcessedProductRecordWhereInput
    some?: ProcessedProductRecordWhereInput
    none?: ProcessedProductRecordWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductSubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProcessedProductRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profileImageUrl?: SortOrder
    emailAddress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profileImageUrl?: SortOrder
    emailAddress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profileImageUrl?: SortOrder
    emailAddress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type HttpNetworkErrorDataCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type HttpNetworkErrorDataMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type HttpNetworkErrorDataMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type HttpSerializationErrorDataCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type HttpSerializationErrorDataMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type HttpSerializationErrorDataMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type HttpClientErrorDataCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    status?: SortOrder
  }

  export type HttpClientErrorDataAvgOrderByAggregateInput = {
    status?: SortOrder
  }

  export type HttpClientErrorDataMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    status?: SortOrder
  }

  export type HttpClientErrorDataMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    status?: SortOrder
  }

  export type HttpClientErrorDataSumOrderByAggregateInput = {
    status?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumElementAttributeFilter<$PrismaModel = never> = {
    equals?: $Enums.ElementAttribute | EnumElementAttributeFieldRefInput<$PrismaModel>
    in?: $Enums.ElementAttribute[] | ListEnumElementAttributeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ElementAttribute[] | ListEnumElementAttributeFieldRefInput<$PrismaModel>
    not?: NestedEnumElementAttributeFilter<$PrismaModel> | $Enums.ElementAttribute
  }

  export type MissingAttributeErrorDataCountOrderByAggregateInput = {
    id?: SortOrder
    attribute?: SortOrder
    parentHtml?: SortOrder
  }

  export type MissingAttributeErrorDataMaxOrderByAggregateInput = {
    id?: SortOrder
    attribute?: SortOrder
    parentHtml?: SortOrder
  }

  export type MissingAttributeErrorDataMinOrderByAggregateInput = {
    id?: SortOrder
    attribute?: SortOrder
    parentHtml?: SortOrder
  }

  export type EnumElementAttributeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ElementAttribute | EnumElementAttributeFieldRefInput<$PrismaModel>
    in?: $Enums.ElementAttribute[] | ListEnumElementAttributeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ElementAttribute[] | ListEnumElementAttributeFieldRefInput<$PrismaModel>
    not?: NestedEnumElementAttributeWithAggregatesFilter<$PrismaModel> | $Enums.ElementAttribute
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumElementAttributeFilter<$PrismaModel>
    _max?: NestedEnumElementAttributeFilter<$PrismaModel>
  }

  export type InvalidAttributeErrorDataCountOrderByAggregateInput = {
    id?: SortOrder
    attribute?: SortOrder
    parentHtml?: SortOrder
    value?: SortOrder
  }

  export type InvalidAttributeErrorDataMaxOrderByAggregateInput = {
    id?: SortOrder
    attribute?: SortOrder
    parentHtml?: SortOrder
    value?: SortOrder
  }

  export type InvalidAttributeErrorDataMinOrderByAggregateInput = {
    id?: SortOrder
    attribute?: SortOrder
    parentHtml?: SortOrder
    value?: SortOrder
  }

  export type InvalidTextErrorDataCountOrderByAggregateInput = {
    id?: SortOrder
    parentHtml?: SortOrder
    value?: SortOrder
  }

  export type InvalidTextErrorDataMaxOrderByAggregateInput = {
    id?: SortOrder
    parentHtml?: SortOrder
    value?: SortOrder
  }

  export type InvalidTextErrorDataMinOrderByAggregateInput = {
    id?: SortOrder
    parentHtml?: SortOrder
    value?: SortOrder
  }

  export type MissingTextErrorDataCountOrderByAggregateInput = {
    id?: SortOrder
    parentHtml?: SortOrder
  }

  export type MissingTextErrorDataMaxOrderByAggregateInput = {
    id?: SortOrder
    parentHtml?: SortOrder
  }

  export type MissingTextErrorDataMinOrderByAggregateInput = {
    id?: SortOrder
    parentHtml?: SortOrder
  }

  export type NonUniqueTextErrorDataCountOrderByAggregateInput = {
    id?: SortOrder
    parentHtml?: SortOrder
  }

  export type NonUniqueTextErrorDataMaxOrderByAggregateInput = {
    id?: SortOrder
    parentHtml?: SortOrder
  }

  export type NonUniqueTextErrorDataMinOrderByAggregateInput = {
    id?: SortOrder
    parentHtml?: SortOrder
  }

  export type MissingElementErrorDataCountOrderByAggregateInput = {
    id?: SortOrder
    parentHtml?: SortOrder
    selector?: SortOrder
  }

  export type MissingElementErrorDataMaxOrderByAggregateInput = {
    id?: SortOrder
    parentHtml?: SortOrder
    selector?: SortOrder
  }

  export type MissingElementErrorDataMinOrderByAggregateInput = {
    id?: SortOrder
    parentHtml?: SortOrder
    selector?: SortOrder
  }

  export type NonUniqueElementErrorDataCountOrderByAggregateInput = {
    id?: SortOrder
    parentHtml?: SortOrder
    selector?: SortOrder
  }

  export type NonUniqueElementErrorDataMaxOrderByAggregateInput = {
    id?: SortOrder
    parentHtml?: SortOrder
    selector?: SortOrder
  }

  export type NonUniqueElementErrorDataMinOrderByAggregateInput = {
    id?: SortOrder
    parentHtml?: SortOrder
    selector?: SortOrder
  }

  export type EnumScrapingErrorCodeFilter<$PrismaModel = never> = {
    equals?: $Enums.ScrapingErrorCode | EnumScrapingErrorCodeFieldRefInput<$PrismaModel>
    in?: $Enums.ScrapingErrorCode[] | ListEnumScrapingErrorCodeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScrapingErrorCode[] | ListEnumScrapingErrorCodeFieldRefInput<$PrismaModel>
    not?: NestedEnumScrapingErrorCodeFilter<$PrismaModel> | $Enums.ScrapingErrorCode
  }

  export type EnumProductRecordDataFieldFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductRecordDataField | EnumProductRecordDataFieldFieldRefInput<$PrismaModel>
    in?: $Enums.ProductRecordDataField[] | ListEnumProductRecordDataFieldFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductRecordDataField[] | ListEnumProductRecordDataFieldFieldRefInput<$PrismaModel>
    not?: NestedEnumProductRecordDataFieldFilter<$PrismaModel> | $Enums.ProductRecordDataField
  }

  export type ProductRecordRelationFilter = {
    is?: ProductRecordWhereInput
    isNot?: ProductRecordWhereInput
  }

  export type ProductRecordErrorCountOrderByAggregateInput = {
    id?: SortOrder
    errorId?: SortOrder
    errorCode?: SortOrder
    recordId?: SortOrder
    field?: SortOrder
    message?: SortOrder
  }

  export type ProductRecordErrorMaxOrderByAggregateInput = {
    id?: SortOrder
    errorId?: SortOrder
    errorCode?: SortOrder
    recordId?: SortOrder
    field?: SortOrder
    message?: SortOrder
  }

  export type ProductRecordErrorMinOrderByAggregateInput = {
    id?: SortOrder
    errorId?: SortOrder
    errorCode?: SortOrder
    recordId?: SortOrder
    field?: SortOrder
    message?: SortOrder
  }

  export type EnumScrapingErrorCodeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScrapingErrorCode | EnumScrapingErrorCodeFieldRefInput<$PrismaModel>
    in?: $Enums.ScrapingErrorCode[] | ListEnumScrapingErrorCodeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScrapingErrorCode[] | ListEnumScrapingErrorCodeFieldRefInput<$PrismaModel>
    not?: NestedEnumScrapingErrorCodeWithAggregatesFilter<$PrismaModel> | $Enums.ScrapingErrorCode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScrapingErrorCodeFilter<$PrismaModel>
    _max?: NestedEnumScrapingErrorCodeFilter<$PrismaModel>
  }

  export type EnumProductRecordDataFieldWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductRecordDataField | EnumProductRecordDataFieldFieldRefInput<$PrismaModel>
    in?: $Enums.ProductRecordDataField[] | ListEnumProductRecordDataFieldFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductRecordDataField[] | ListEnumProductRecordDataFieldFieldRefInput<$PrismaModel>
    not?: NestedEnumProductRecordDataFieldWithAggregatesFilter<$PrismaModel> | $Enums.ProductRecordDataField
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductRecordDataFieldFilter<$PrismaModel>
    _max?: NestedEnumProductRecordDataFieldFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type EnumProductStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductStatus | EnumProductStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProductStatusNullableFilter<$PrismaModel> | $Enums.ProductStatus | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumProductRecordDataFieldNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductRecordDataField[] | ListEnumProductRecordDataFieldFieldRefInput<$PrismaModel> | null
    has?: $Enums.ProductRecordDataField | EnumProductRecordDataFieldFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.ProductRecordDataField[] | ListEnumProductRecordDataFieldFieldRefInput<$PrismaModel>
    hasSome?: $Enums.ProductRecordDataField[] | ListEnumProductRecordDataFieldFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type ProductRecordErrorListRelationFilter = {
    every?: ProductRecordErrorWhereInput
    some?: ProductRecordErrorWhereInput
    none?: ProductRecordErrorWhereInput
  }

  export type StatusChangeNotificationListRelationFilter = {
    every?: StatusChangeNotificationWhereInput
    some?: StatusChangeNotificationWhereInput
    none?: StatusChangeNotificationWhereInput
  }

  export type PriceChangeNotificationListRelationFilter = {
    every?: PriceChangeNotificationWhereInput
    some?: PriceChangeNotificationWhereInput
    none?: PriceChangeNotificationWhereInput
  }

  export type ProductRecordErrorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StatusChangeNotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PriceChangeNotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductRecordCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    timestamp?: SortOrder
    productId?: SortOrder
    price?: SortOrder
    rawPrice?: SortOrder
    status?: SortOrder
    wasManuallyCreated?: SortOrder
    manuallyChangedFields?: SortOrder
  }

  export type ProductRecordAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type ProductRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    timestamp?: SortOrder
    productId?: SortOrder
    price?: SortOrder
    rawPrice?: SortOrder
    status?: SortOrder
    wasManuallyCreated?: SortOrder
  }

  export type ProductRecordMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    timestamp?: SortOrder
    productId?: SortOrder
    price?: SortOrder
    rawPrice?: SortOrder
    status?: SortOrder
    wasManuallyCreated?: SortOrder
  }

  export type ProductRecordSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumProductStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductStatus | EnumProductStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProductStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.ProductStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumProductStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumProductStatusNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ProcessedProductRecordUserIdRecordIdCompoundUniqueInput = {
    userId: string
    recordId: string
  }

  export type ProcessedProductRecordCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    recordId?: SortOrder
    userId?: SortOrder
  }

  export type ProcessedProductRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    recordId?: SortOrder
    userId?: SortOrder
  }

  export type ProcessedProductRecordMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    recordId?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumProductCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductCategory | EnumProductCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ProductCategory[] | ListEnumProductCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductCategory[] | ListEnumProductCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumProductCategoryFilter<$PrismaModel> | $Enums.ProductCategory
  }

  export type EnumProductSubCategoryNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductSubCategory[] | ListEnumProductSubCategoryFieldRefInput<$PrismaModel> | null
    has?: $Enums.ProductSubCategory | EnumProductSubCategoryFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.ProductSubCategory[] | ListEnumProductSubCategoryFieldRefInput<$PrismaModel>
    hasSome?: $Enums.ProductSubCategory[] | ListEnumProductSubCategoryFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type NewProductNotificationListRelationFilter = {
    every?: NewProductNotificationWhereInput
    some?: NewProductNotificationWhereInput
    none?: NewProductNotificationWhereInput
  }

  export type NewProductNotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    code?: SortOrder
    imageSrc?: SortOrder
    status?: SortOrder
    statusLastUpdatedAt?: SortOrder
    statusAsOf?: SortOrder
    price?: SortOrder
    priceLastUpdatedAt?: SortOrder
    priceAsOf?: SortOrder
    category?: SortOrder
    subCategories?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    code?: SortOrder
    imageSrc?: SortOrder
    status?: SortOrder
    statusLastUpdatedAt?: SortOrder
    statusAsOf?: SortOrder
    price?: SortOrder
    priceLastUpdatedAt?: SortOrder
    priceAsOf?: SortOrder
    category?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    code?: SortOrder
    imageSrc?: SortOrder
    status?: SortOrder
    statusLastUpdatedAt?: SortOrder
    statusAsOf?: SortOrder
    price?: SortOrder
    priceLastUpdatedAt?: SortOrder
    priceAsOf?: SortOrder
    category?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumProductCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductCategory | EnumProductCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ProductCategory[] | ListEnumProductCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductCategory[] | ListEnumProductCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumProductCategoryWithAggregatesFilter<$PrismaModel> | $Enums.ProductCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductCategoryFilter<$PrismaModel>
    _max?: NestedEnumProductCategoryFilter<$PrismaModel>
  }

  export type EnumSubscriptionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionType | EnumSubscriptionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionType[] | ListEnumSubscriptionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionType[] | ListEnumSubscriptionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionTypeFilter<$PrismaModel> | $Enums.SubscriptionType
  }

  export type StatusChangeSubscriptionNullableRelationFilter = {
    is?: StatusChangeSubscriptionWhereInput | null
    isNot?: StatusChangeSubscriptionWhereInput | null
  }

  export type PriceChangeSubscriptionNullableRelationFilter = {
    is?: PriceChangeSubscriptionWhereInput | null
    isNot?: PriceChangeSubscriptionWhereInput | null
  }

  export type ProductSubscriptionUserIdProductIdSubscriptionTypeCompoundUniqueInput = {
    userId: string
    productId: string
    subscriptionType: $Enums.SubscriptionType
  }

  export type ProductSubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    subscriptionType?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    enabled?: SortOrder
  }

  export type ProductSubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    subscriptionType?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    enabled?: SortOrder
  }

  export type ProductSubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    subscriptionType?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    enabled?: SortOrder
  }

  export type EnumSubscriptionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionType | EnumSubscriptionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionType[] | ListEnumSubscriptionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionType[] | ListEnumSubscriptionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionTypeWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionTypeFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionTypeFilter<$PrismaModel>
  }

  export type EnumProductStatusNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel> | null
    has?: $Enums.ProductStatus | EnumProductStatusFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel>
    hasSome?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type StatusChangeSubscriptionRelationFilter = {
    is?: StatusChangeSubscriptionWhereInput
    isNot?: StatusChangeSubscriptionWhereInput
  }

  export type StatusChangeSubscriptionConditionCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fromStatus?: SortOrder
    toStatus?: SortOrder
    subscriptionId?: SortOrder
  }

  export type StatusChangeSubscriptionConditionMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subscriptionId?: SortOrder
  }

  export type StatusChangeSubscriptionConditionMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subscriptionId?: SortOrder
  }

  export type StatusChangeSubscriptionConditionListRelationFilter = {
    every?: StatusChangeSubscriptionConditionWhereInput
    some?: StatusChangeSubscriptionConditionWhereInput
    none?: StatusChangeSubscriptionConditionWhereInput
  }

  export type ProductSubscriptionRelationFilter = {
    is?: ProductSubscriptionWhereInput
    isNot?: ProductSubscriptionWhereInput
  }

  export type StatusChangeSubscriptionConditionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StatusChangeSubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StatusChangeSubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StatusChangeSubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumPriceChangeSubscriptionConditionNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.PriceChangeSubscriptionCondition[] | ListEnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel> | null
    has?: $Enums.PriceChangeSubscriptionCondition | EnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.PriceChangeSubscriptionCondition[] | ListEnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel>
    hasSome?: $Enums.PriceChangeSubscriptionCondition[] | ListEnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type PriceChangeSubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    conditions?: SortOrder
  }

  export type PriceChangeSubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PriceChangeSubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type EnumNotificationStateFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationState | EnumNotificationStateFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationState[] | ListEnumNotificationStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationState[] | ListEnumNotificationStateFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStateFilter<$PrismaModel> | $Enums.NotificationState
  }

  export type PriceChangeNotificationNullableRelationFilter = {
    is?: PriceChangeNotificationWhereInput | null
    isNot?: PriceChangeNotificationWhereInput | null
  }

  export type StatusChangeNotificationNullableRelationFilter = {
    is?: StatusChangeNotificationWhereInput | null
    isNot?: StatusChangeNotificationWhereInput | null
  }

  export type NewProductNotificationNullableRelationFilter = {
    is?: NewProductNotificationWhereInput | null
    isNot?: NewProductNotificationWhereInput | null
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    userId?: SortOrder
    notificationType?: SortOrder
    state?: SortOrder
    stateAsOf?: SortOrder
    failedAt?: SortOrder
    sentAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    userId?: SortOrder
    notificationType?: SortOrder
    state?: SortOrder
    stateAsOf?: SortOrder
    failedAt?: SortOrder
    sentAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    userId?: SortOrder
    notificationType?: SortOrder
    state?: SortOrder
    stateAsOf?: SortOrder
    failedAt?: SortOrder
    sentAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type EnumNotificationStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationState | EnumNotificationStateFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationState[] | ListEnumNotificationStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationState[] | ListEnumNotificationStateFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStateWithAggregatesFilter<$PrismaModel> | $Enums.NotificationState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationStateFilter<$PrismaModel>
    _max?: NestedEnumNotificationStateFilter<$PrismaModel>
  }

  export type EnumPriceChangeSubscriptionConditionFilter<$PrismaModel = never> = {
    equals?: $Enums.PriceChangeSubscriptionCondition | EnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel>
    in?: $Enums.PriceChangeSubscriptionCondition[] | ListEnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel>
    notIn?: $Enums.PriceChangeSubscriptionCondition[] | ListEnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel>
    not?: NestedEnumPriceChangeSubscriptionConditionFilter<$PrismaModel> | $Enums.PriceChangeSubscriptionCondition
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PriceChangeSubscriptionRelationFilter = {
    is?: PriceChangeSubscriptionWhereInput
    isNot?: PriceChangeSubscriptionWhereInput
  }

  export type NotificationRelationFilter = {
    is?: NotificationWhereInput
    isNot?: NotificationWhereInput
  }

  export type PriceChangeNotificationCountOrderByAggregateInput = {
    id?: SortOrder
    productRecordId?: SortOrder
    subscriptionId?: SortOrder
    condition?: SortOrder
    previousPrice?: SortOrder
    newPrice?: SortOrder
  }

  export type PriceChangeNotificationAvgOrderByAggregateInput = {
    previousPrice?: SortOrder
    newPrice?: SortOrder
  }

  export type PriceChangeNotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    productRecordId?: SortOrder
    subscriptionId?: SortOrder
    condition?: SortOrder
    previousPrice?: SortOrder
    newPrice?: SortOrder
  }

  export type PriceChangeNotificationMinOrderByAggregateInput = {
    id?: SortOrder
    productRecordId?: SortOrder
    subscriptionId?: SortOrder
    condition?: SortOrder
    previousPrice?: SortOrder
    newPrice?: SortOrder
  }

  export type PriceChangeNotificationSumOrderByAggregateInput = {
    previousPrice?: SortOrder
    newPrice?: SortOrder
  }

  export type EnumPriceChangeSubscriptionConditionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PriceChangeSubscriptionCondition | EnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel>
    in?: $Enums.PriceChangeSubscriptionCondition[] | ListEnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel>
    notIn?: $Enums.PriceChangeSubscriptionCondition[] | ListEnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel>
    not?: NestedEnumPriceChangeSubscriptionConditionWithAggregatesFilter<$PrismaModel> | $Enums.PriceChangeSubscriptionCondition
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriceChangeSubscriptionConditionFilter<$PrismaModel>
    _max?: NestedEnumPriceChangeSubscriptionConditionFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumProductStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductStatus | EnumProductStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProductStatusFilter<$PrismaModel> | $Enums.ProductStatus
  }

  export type StatusChangeNotificationCountOrderByAggregateInput = {
    id?: SortOrder
    productRecordId?: SortOrder
    subscriptionId?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
  }

  export type StatusChangeNotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    productRecordId?: SortOrder
    subscriptionId?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
  }

  export type StatusChangeNotificationMinOrderByAggregateInput = {
    id?: SortOrder
    productRecordId?: SortOrder
    subscriptionId?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
  }

  export type EnumProductStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductStatus | EnumProductStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProductStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProductStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductStatusFilter<$PrismaModel>
    _max?: NestedEnumProductStatusFilter<$PrismaModel>
  }

  export type NewProductNotificationCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
  }

  export type NewProductNotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
  }

  export type NewProductNotificationMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
  }

  export type ProductCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput> | ProductCreateWithoutCreatedByInput[] | ProductUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCreatedByInput | ProductCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProductCreateManyCreatedByInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ProductCreateWithoutUpdatedByInput, ProductUncheckedCreateWithoutUpdatedByInput> | ProductCreateWithoutUpdatedByInput[] | ProductUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUpdatedByInput | ProductCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ProductCreateManyUpdatedByInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductRecordCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProductRecordCreateWithoutCreatedByInput, ProductRecordUncheckedCreateWithoutCreatedByInput> | ProductRecordCreateWithoutCreatedByInput[] | ProductRecordUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductRecordCreateOrConnectWithoutCreatedByInput | ProductRecordCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProductRecordCreateManyCreatedByInputEnvelope
    connect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
  }

  export type ProductRecordCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ProductRecordCreateWithoutUpdatedByInput, ProductRecordUncheckedCreateWithoutUpdatedByInput> | ProductRecordCreateWithoutUpdatedByInput[] | ProductRecordUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProductRecordCreateOrConnectWithoutUpdatedByInput | ProductRecordCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ProductRecordCreateManyUpdatedByInputEnvelope
    connect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
  }

  export type ProductSubscriptionCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProductSubscriptionCreateWithoutCreatedByInput, ProductSubscriptionUncheckedCreateWithoutCreatedByInput> | ProductSubscriptionCreateWithoutCreatedByInput[] | ProductSubscriptionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutCreatedByInput | ProductSubscriptionCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProductSubscriptionCreateManyCreatedByInputEnvelope
    connect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
  }

  export type ProductSubscriptionCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ProductSubscriptionCreateWithoutUpdatedByInput, ProductSubscriptionUncheckedCreateWithoutUpdatedByInput> | ProductSubscriptionCreateWithoutUpdatedByInput[] | ProductSubscriptionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutUpdatedByInput | ProductSubscriptionCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ProductSubscriptionCreateManyUpdatedByInputEnvelope
    connect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
  }

  export type ProductSubscriptionCreateNestedManyWithoutUserInput = {
    create?: XOR<ProductSubscriptionCreateWithoutUserInput, ProductSubscriptionUncheckedCreateWithoutUserInput> | ProductSubscriptionCreateWithoutUserInput[] | ProductSubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutUserInput | ProductSubscriptionCreateOrConnectWithoutUserInput[]
    createMany?: ProductSubscriptionCreateManyUserInputEnvelope
    connect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<NotificationCreateWithoutCreatedByInput, NotificationUncheckedCreateWithoutCreatedByInput> | NotificationCreateWithoutCreatedByInput[] | NotificationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCreatedByInput | NotificationCreateOrConnectWithoutCreatedByInput[]
    createMany?: NotificationCreateManyCreatedByInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<NotificationCreateWithoutUpdatedByInput, NotificationUncheckedCreateWithoutUpdatedByInput> | NotificationCreateWithoutUpdatedByInput[] | NotificationUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUpdatedByInput | NotificationCreateOrConnectWithoutUpdatedByInput[]
    createMany?: NotificationCreateManyUpdatedByInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ProcessedProductRecordCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProcessedProductRecordCreateWithoutCreatedByInput, ProcessedProductRecordUncheckedCreateWithoutCreatedByInput> | ProcessedProductRecordCreateWithoutCreatedByInput[] | ProcessedProductRecordUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProcessedProductRecordCreateOrConnectWithoutCreatedByInput | ProcessedProductRecordCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProcessedProductRecordCreateManyCreatedByInputEnvelope
    connect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
  }

  export type ProcessedProductRecordCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ProcessedProductRecordCreateWithoutUpdatedByInput, ProcessedProductRecordUncheckedCreateWithoutUpdatedByInput> | ProcessedProductRecordCreateWithoutUpdatedByInput[] | ProcessedProductRecordUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProcessedProductRecordCreateOrConnectWithoutUpdatedByInput | ProcessedProductRecordCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ProcessedProductRecordCreateManyUpdatedByInputEnvelope
    connect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
  }

  export type ProcessedProductRecordCreateNestedManyWithoutUserInput = {
    create?: XOR<ProcessedProductRecordCreateWithoutUserInput, ProcessedProductRecordUncheckedCreateWithoutUserInput> | ProcessedProductRecordCreateWithoutUserInput[] | ProcessedProductRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProcessedProductRecordCreateOrConnectWithoutUserInput | ProcessedProductRecordCreateOrConnectWithoutUserInput[]
    createMany?: ProcessedProductRecordCreateManyUserInputEnvelope
    connect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput> | ProductCreateWithoutCreatedByInput[] | ProductUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCreatedByInput | ProductCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProductCreateManyCreatedByInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ProductCreateWithoutUpdatedByInput, ProductUncheckedCreateWithoutUpdatedByInput> | ProductCreateWithoutUpdatedByInput[] | ProductUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUpdatedByInput | ProductCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ProductCreateManyUpdatedByInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductRecordUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProductRecordCreateWithoutCreatedByInput, ProductRecordUncheckedCreateWithoutCreatedByInput> | ProductRecordCreateWithoutCreatedByInput[] | ProductRecordUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductRecordCreateOrConnectWithoutCreatedByInput | ProductRecordCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProductRecordCreateManyCreatedByInputEnvelope
    connect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
  }

  export type ProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ProductRecordCreateWithoutUpdatedByInput, ProductRecordUncheckedCreateWithoutUpdatedByInput> | ProductRecordCreateWithoutUpdatedByInput[] | ProductRecordUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProductRecordCreateOrConnectWithoutUpdatedByInput | ProductRecordCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ProductRecordCreateManyUpdatedByInputEnvelope
    connect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
  }

  export type ProductSubscriptionUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProductSubscriptionCreateWithoutCreatedByInput, ProductSubscriptionUncheckedCreateWithoutCreatedByInput> | ProductSubscriptionCreateWithoutCreatedByInput[] | ProductSubscriptionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutCreatedByInput | ProductSubscriptionCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProductSubscriptionCreateManyCreatedByInputEnvelope
    connect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
  }

  export type ProductSubscriptionUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ProductSubscriptionCreateWithoutUpdatedByInput, ProductSubscriptionUncheckedCreateWithoutUpdatedByInput> | ProductSubscriptionCreateWithoutUpdatedByInput[] | ProductSubscriptionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutUpdatedByInput | ProductSubscriptionCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ProductSubscriptionCreateManyUpdatedByInputEnvelope
    connect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
  }

  export type ProductSubscriptionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProductSubscriptionCreateWithoutUserInput, ProductSubscriptionUncheckedCreateWithoutUserInput> | ProductSubscriptionCreateWithoutUserInput[] | ProductSubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutUserInput | ProductSubscriptionCreateOrConnectWithoutUserInput[]
    createMany?: ProductSubscriptionCreateManyUserInputEnvelope
    connect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<NotificationCreateWithoutCreatedByInput, NotificationUncheckedCreateWithoutCreatedByInput> | NotificationCreateWithoutCreatedByInput[] | NotificationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCreatedByInput | NotificationCreateOrConnectWithoutCreatedByInput[]
    createMany?: NotificationCreateManyCreatedByInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<NotificationCreateWithoutUpdatedByInput, NotificationUncheckedCreateWithoutUpdatedByInput> | NotificationCreateWithoutUpdatedByInput[] | NotificationUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUpdatedByInput | NotificationCreateOrConnectWithoutUpdatedByInput[]
    createMany?: NotificationCreateManyUpdatedByInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ProcessedProductRecordUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProcessedProductRecordCreateWithoutCreatedByInput, ProcessedProductRecordUncheckedCreateWithoutCreatedByInput> | ProcessedProductRecordCreateWithoutCreatedByInput[] | ProcessedProductRecordUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProcessedProductRecordCreateOrConnectWithoutCreatedByInput | ProcessedProductRecordCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProcessedProductRecordCreateManyCreatedByInputEnvelope
    connect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
  }

  export type ProcessedProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ProcessedProductRecordCreateWithoutUpdatedByInput, ProcessedProductRecordUncheckedCreateWithoutUpdatedByInput> | ProcessedProductRecordCreateWithoutUpdatedByInput[] | ProcessedProductRecordUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProcessedProductRecordCreateOrConnectWithoutUpdatedByInput | ProcessedProductRecordCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ProcessedProductRecordCreateManyUpdatedByInputEnvelope
    connect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
  }

  export type ProcessedProductRecordUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProcessedProductRecordCreateWithoutUserInput, ProcessedProductRecordUncheckedCreateWithoutUserInput> | ProcessedProductRecordCreateWithoutUserInput[] | ProcessedProductRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProcessedProductRecordCreateOrConnectWithoutUserInput | ProcessedProductRecordCreateOrConnectWithoutUserInput[]
    createMany?: ProcessedProductRecordCreateManyUserInputEnvelope
    connect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProductUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput> | ProductCreateWithoutCreatedByInput[] | ProductUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCreatedByInput | ProductCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCreatedByInput | ProductUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProductCreateManyCreatedByInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCreatedByInput | ProductUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCreatedByInput | ProductUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ProductCreateWithoutUpdatedByInput, ProductUncheckedCreateWithoutUpdatedByInput> | ProductCreateWithoutUpdatedByInput[] | ProductUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUpdatedByInput | ProductCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutUpdatedByInput | ProductUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ProductCreateManyUpdatedByInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutUpdatedByInput | ProductUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutUpdatedByInput | ProductUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductRecordUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProductRecordCreateWithoutCreatedByInput, ProductRecordUncheckedCreateWithoutCreatedByInput> | ProductRecordCreateWithoutCreatedByInput[] | ProductRecordUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductRecordCreateOrConnectWithoutCreatedByInput | ProductRecordCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProductRecordUpsertWithWhereUniqueWithoutCreatedByInput | ProductRecordUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProductRecordCreateManyCreatedByInputEnvelope
    set?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    disconnect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    delete?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    connect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    update?: ProductRecordUpdateWithWhereUniqueWithoutCreatedByInput | ProductRecordUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProductRecordUpdateManyWithWhereWithoutCreatedByInput | ProductRecordUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProductRecordScalarWhereInput | ProductRecordScalarWhereInput[]
  }

  export type ProductRecordUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ProductRecordCreateWithoutUpdatedByInput, ProductRecordUncheckedCreateWithoutUpdatedByInput> | ProductRecordCreateWithoutUpdatedByInput[] | ProductRecordUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProductRecordCreateOrConnectWithoutUpdatedByInput | ProductRecordCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ProductRecordUpsertWithWhereUniqueWithoutUpdatedByInput | ProductRecordUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ProductRecordCreateManyUpdatedByInputEnvelope
    set?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    disconnect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    delete?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    connect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    update?: ProductRecordUpdateWithWhereUniqueWithoutUpdatedByInput | ProductRecordUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ProductRecordUpdateManyWithWhereWithoutUpdatedByInput | ProductRecordUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ProductRecordScalarWhereInput | ProductRecordScalarWhereInput[]
  }

  export type ProductSubscriptionUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProductSubscriptionCreateWithoutCreatedByInput, ProductSubscriptionUncheckedCreateWithoutCreatedByInput> | ProductSubscriptionCreateWithoutCreatedByInput[] | ProductSubscriptionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutCreatedByInput | ProductSubscriptionCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProductSubscriptionUpsertWithWhereUniqueWithoutCreatedByInput | ProductSubscriptionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProductSubscriptionCreateManyCreatedByInputEnvelope
    set?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    disconnect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    delete?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    connect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    update?: ProductSubscriptionUpdateWithWhereUniqueWithoutCreatedByInput | ProductSubscriptionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProductSubscriptionUpdateManyWithWhereWithoutCreatedByInput | ProductSubscriptionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProductSubscriptionScalarWhereInput | ProductSubscriptionScalarWhereInput[]
  }

  export type ProductSubscriptionUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ProductSubscriptionCreateWithoutUpdatedByInput, ProductSubscriptionUncheckedCreateWithoutUpdatedByInput> | ProductSubscriptionCreateWithoutUpdatedByInput[] | ProductSubscriptionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutUpdatedByInput | ProductSubscriptionCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ProductSubscriptionUpsertWithWhereUniqueWithoutUpdatedByInput | ProductSubscriptionUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ProductSubscriptionCreateManyUpdatedByInputEnvelope
    set?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    disconnect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    delete?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    connect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    update?: ProductSubscriptionUpdateWithWhereUniqueWithoutUpdatedByInput | ProductSubscriptionUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ProductSubscriptionUpdateManyWithWhereWithoutUpdatedByInput | ProductSubscriptionUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ProductSubscriptionScalarWhereInput | ProductSubscriptionScalarWhereInput[]
  }

  export type ProductSubscriptionUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProductSubscriptionCreateWithoutUserInput, ProductSubscriptionUncheckedCreateWithoutUserInput> | ProductSubscriptionCreateWithoutUserInput[] | ProductSubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutUserInput | ProductSubscriptionCreateOrConnectWithoutUserInput[]
    upsert?: ProductSubscriptionUpsertWithWhereUniqueWithoutUserInput | ProductSubscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProductSubscriptionCreateManyUserInputEnvelope
    set?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    disconnect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    delete?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    connect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    update?: ProductSubscriptionUpdateWithWhereUniqueWithoutUserInput | ProductSubscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProductSubscriptionUpdateManyWithWhereWithoutUserInput | ProductSubscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProductSubscriptionScalarWhereInput | ProductSubscriptionScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<NotificationCreateWithoutCreatedByInput, NotificationUncheckedCreateWithoutCreatedByInput> | NotificationCreateWithoutCreatedByInput[] | NotificationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCreatedByInput | NotificationCreateOrConnectWithoutCreatedByInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutCreatedByInput | NotificationUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: NotificationCreateManyCreatedByInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutCreatedByInput | NotificationUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutCreatedByInput | NotificationUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<NotificationCreateWithoutUpdatedByInput, NotificationUncheckedCreateWithoutUpdatedByInput> | NotificationCreateWithoutUpdatedByInput[] | NotificationUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUpdatedByInput | NotificationCreateOrConnectWithoutUpdatedByInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUpdatedByInput | NotificationUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: NotificationCreateManyUpdatedByInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUpdatedByInput | NotificationUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUpdatedByInput | NotificationUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ProcessedProductRecordUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProcessedProductRecordCreateWithoutCreatedByInput, ProcessedProductRecordUncheckedCreateWithoutCreatedByInput> | ProcessedProductRecordCreateWithoutCreatedByInput[] | ProcessedProductRecordUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProcessedProductRecordCreateOrConnectWithoutCreatedByInput | ProcessedProductRecordCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProcessedProductRecordUpsertWithWhereUniqueWithoutCreatedByInput | ProcessedProductRecordUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProcessedProductRecordCreateManyCreatedByInputEnvelope
    set?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    disconnect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    delete?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    connect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    update?: ProcessedProductRecordUpdateWithWhereUniqueWithoutCreatedByInput | ProcessedProductRecordUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProcessedProductRecordUpdateManyWithWhereWithoutCreatedByInput | ProcessedProductRecordUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProcessedProductRecordScalarWhereInput | ProcessedProductRecordScalarWhereInput[]
  }

  export type ProcessedProductRecordUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ProcessedProductRecordCreateWithoutUpdatedByInput, ProcessedProductRecordUncheckedCreateWithoutUpdatedByInput> | ProcessedProductRecordCreateWithoutUpdatedByInput[] | ProcessedProductRecordUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProcessedProductRecordCreateOrConnectWithoutUpdatedByInput | ProcessedProductRecordCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ProcessedProductRecordUpsertWithWhereUniqueWithoutUpdatedByInput | ProcessedProductRecordUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ProcessedProductRecordCreateManyUpdatedByInputEnvelope
    set?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    disconnect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    delete?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    connect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    update?: ProcessedProductRecordUpdateWithWhereUniqueWithoutUpdatedByInput | ProcessedProductRecordUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ProcessedProductRecordUpdateManyWithWhereWithoutUpdatedByInput | ProcessedProductRecordUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ProcessedProductRecordScalarWhereInput | ProcessedProductRecordScalarWhereInput[]
  }

  export type ProcessedProductRecordUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProcessedProductRecordCreateWithoutUserInput, ProcessedProductRecordUncheckedCreateWithoutUserInput> | ProcessedProductRecordCreateWithoutUserInput[] | ProcessedProductRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProcessedProductRecordCreateOrConnectWithoutUserInput | ProcessedProductRecordCreateOrConnectWithoutUserInput[]
    upsert?: ProcessedProductRecordUpsertWithWhereUniqueWithoutUserInput | ProcessedProductRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProcessedProductRecordCreateManyUserInputEnvelope
    set?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    disconnect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    delete?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    connect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    update?: ProcessedProductRecordUpdateWithWhereUniqueWithoutUserInput | ProcessedProductRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProcessedProductRecordUpdateManyWithWhereWithoutUserInput | ProcessedProductRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProcessedProductRecordScalarWhereInput | ProcessedProductRecordScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput> | ProductCreateWithoutCreatedByInput[] | ProductUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCreatedByInput | ProductCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCreatedByInput | ProductUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProductCreateManyCreatedByInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCreatedByInput | ProductUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCreatedByInput | ProductUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ProductCreateWithoutUpdatedByInput, ProductUncheckedCreateWithoutUpdatedByInput> | ProductCreateWithoutUpdatedByInput[] | ProductUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUpdatedByInput | ProductCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutUpdatedByInput | ProductUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ProductCreateManyUpdatedByInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutUpdatedByInput | ProductUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutUpdatedByInput | ProductUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProductRecordCreateWithoutCreatedByInput, ProductRecordUncheckedCreateWithoutCreatedByInput> | ProductRecordCreateWithoutCreatedByInput[] | ProductRecordUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductRecordCreateOrConnectWithoutCreatedByInput | ProductRecordCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProductRecordUpsertWithWhereUniqueWithoutCreatedByInput | ProductRecordUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProductRecordCreateManyCreatedByInputEnvelope
    set?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    disconnect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    delete?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    connect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    update?: ProductRecordUpdateWithWhereUniqueWithoutCreatedByInput | ProductRecordUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProductRecordUpdateManyWithWhereWithoutCreatedByInput | ProductRecordUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProductRecordScalarWhereInput | ProductRecordScalarWhereInput[]
  }

  export type ProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ProductRecordCreateWithoutUpdatedByInput, ProductRecordUncheckedCreateWithoutUpdatedByInput> | ProductRecordCreateWithoutUpdatedByInput[] | ProductRecordUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProductRecordCreateOrConnectWithoutUpdatedByInput | ProductRecordCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ProductRecordUpsertWithWhereUniqueWithoutUpdatedByInput | ProductRecordUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ProductRecordCreateManyUpdatedByInputEnvelope
    set?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    disconnect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    delete?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    connect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    update?: ProductRecordUpdateWithWhereUniqueWithoutUpdatedByInput | ProductRecordUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ProductRecordUpdateManyWithWhereWithoutUpdatedByInput | ProductRecordUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ProductRecordScalarWhereInput | ProductRecordScalarWhereInput[]
  }

  export type ProductSubscriptionUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProductSubscriptionCreateWithoutCreatedByInput, ProductSubscriptionUncheckedCreateWithoutCreatedByInput> | ProductSubscriptionCreateWithoutCreatedByInput[] | ProductSubscriptionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutCreatedByInput | ProductSubscriptionCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProductSubscriptionUpsertWithWhereUniqueWithoutCreatedByInput | ProductSubscriptionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProductSubscriptionCreateManyCreatedByInputEnvelope
    set?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    disconnect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    delete?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    connect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    update?: ProductSubscriptionUpdateWithWhereUniqueWithoutCreatedByInput | ProductSubscriptionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProductSubscriptionUpdateManyWithWhereWithoutCreatedByInput | ProductSubscriptionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProductSubscriptionScalarWhereInput | ProductSubscriptionScalarWhereInput[]
  }

  export type ProductSubscriptionUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ProductSubscriptionCreateWithoutUpdatedByInput, ProductSubscriptionUncheckedCreateWithoutUpdatedByInput> | ProductSubscriptionCreateWithoutUpdatedByInput[] | ProductSubscriptionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutUpdatedByInput | ProductSubscriptionCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ProductSubscriptionUpsertWithWhereUniqueWithoutUpdatedByInput | ProductSubscriptionUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ProductSubscriptionCreateManyUpdatedByInputEnvelope
    set?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    disconnect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    delete?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    connect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    update?: ProductSubscriptionUpdateWithWhereUniqueWithoutUpdatedByInput | ProductSubscriptionUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ProductSubscriptionUpdateManyWithWhereWithoutUpdatedByInput | ProductSubscriptionUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ProductSubscriptionScalarWhereInput | ProductSubscriptionScalarWhereInput[]
  }

  export type ProductSubscriptionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProductSubscriptionCreateWithoutUserInput, ProductSubscriptionUncheckedCreateWithoutUserInput> | ProductSubscriptionCreateWithoutUserInput[] | ProductSubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutUserInput | ProductSubscriptionCreateOrConnectWithoutUserInput[]
    upsert?: ProductSubscriptionUpsertWithWhereUniqueWithoutUserInput | ProductSubscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProductSubscriptionCreateManyUserInputEnvelope
    set?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    disconnect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    delete?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    connect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    update?: ProductSubscriptionUpdateWithWhereUniqueWithoutUserInput | ProductSubscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProductSubscriptionUpdateManyWithWhereWithoutUserInput | ProductSubscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProductSubscriptionScalarWhereInput | ProductSubscriptionScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<NotificationCreateWithoutCreatedByInput, NotificationUncheckedCreateWithoutCreatedByInput> | NotificationCreateWithoutCreatedByInput[] | NotificationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCreatedByInput | NotificationCreateOrConnectWithoutCreatedByInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutCreatedByInput | NotificationUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: NotificationCreateManyCreatedByInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutCreatedByInput | NotificationUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutCreatedByInput | NotificationUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<NotificationCreateWithoutUpdatedByInput, NotificationUncheckedCreateWithoutUpdatedByInput> | NotificationCreateWithoutUpdatedByInput[] | NotificationUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUpdatedByInput | NotificationCreateOrConnectWithoutUpdatedByInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUpdatedByInput | NotificationUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: NotificationCreateManyUpdatedByInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUpdatedByInput | NotificationUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUpdatedByInput | NotificationUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ProcessedProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProcessedProductRecordCreateWithoutCreatedByInput, ProcessedProductRecordUncheckedCreateWithoutCreatedByInput> | ProcessedProductRecordCreateWithoutCreatedByInput[] | ProcessedProductRecordUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProcessedProductRecordCreateOrConnectWithoutCreatedByInput | ProcessedProductRecordCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProcessedProductRecordUpsertWithWhereUniqueWithoutCreatedByInput | ProcessedProductRecordUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProcessedProductRecordCreateManyCreatedByInputEnvelope
    set?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    disconnect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    delete?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    connect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    update?: ProcessedProductRecordUpdateWithWhereUniqueWithoutCreatedByInput | ProcessedProductRecordUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProcessedProductRecordUpdateManyWithWhereWithoutCreatedByInput | ProcessedProductRecordUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProcessedProductRecordScalarWhereInput | ProcessedProductRecordScalarWhereInput[]
  }

  export type ProcessedProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ProcessedProductRecordCreateWithoutUpdatedByInput, ProcessedProductRecordUncheckedCreateWithoutUpdatedByInput> | ProcessedProductRecordCreateWithoutUpdatedByInput[] | ProcessedProductRecordUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProcessedProductRecordCreateOrConnectWithoutUpdatedByInput | ProcessedProductRecordCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ProcessedProductRecordUpsertWithWhereUniqueWithoutUpdatedByInput | ProcessedProductRecordUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ProcessedProductRecordCreateManyUpdatedByInputEnvelope
    set?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    disconnect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    delete?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    connect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    update?: ProcessedProductRecordUpdateWithWhereUniqueWithoutUpdatedByInput | ProcessedProductRecordUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ProcessedProductRecordUpdateManyWithWhereWithoutUpdatedByInput | ProcessedProductRecordUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ProcessedProductRecordScalarWhereInput | ProcessedProductRecordScalarWhereInput[]
  }

  export type ProcessedProductRecordUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProcessedProductRecordCreateWithoutUserInput, ProcessedProductRecordUncheckedCreateWithoutUserInput> | ProcessedProductRecordCreateWithoutUserInput[] | ProcessedProductRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProcessedProductRecordCreateOrConnectWithoutUserInput | ProcessedProductRecordCreateOrConnectWithoutUserInput[]
    upsert?: ProcessedProductRecordUpsertWithWhereUniqueWithoutUserInput | ProcessedProductRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProcessedProductRecordCreateManyUserInputEnvelope
    set?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    disconnect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    delete?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    connect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    update?: ProcessedProductRecordUpdateWithWhereUniqueWithoutUserInput | ProcessedProductRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProcessedProductRecordUpdateManyWithWhereWithoutUserInput | ProcessedProductRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProcessedProductRecordScalarWhereInput | ProcessedProductRecordScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumElementAttributeFieldUpdateOperationsInput = {
    set?: $Enums.ElementAttribute
  }

  export type ProductRecordCreateNestedOneWithoutErrorsInput = {
    create?: XOR<ProductRecordCreateWithoutErrorsInput, ProductRecordUncheckedCreateWithoutErrorsInput>
    connectOrCreate?: ProductRecordCreateOrConnectWithoutErrorsInput
    connect?: ProductRecordWhereUniqueInput
  }

  export type EnumScrapingErrorCodeFieldUpdateOperationsInput = {
    set?: $Enums.ScrapingErrorCode
  }

  export type EnumProductRecordDataFieldFieldUpdateOperationsInput = {
    set?: $Enums.ProductRecordDataField
  }

  export type ProductRecordUpdateOneRequiredWithoutErrorsNestedInput = {
    create?: XOR<ProductRecordCreateWithoutErrorsInput, ProductRecordUncheckedCreateWithoutErrorsInput>
    connectOrCreate?: ProductRecordCreateOrConnectWithoutErrorsInput
    upsert?: ProductRecordUpsertWithoutErrorsInput
    connect?: ProductRecordWhereUniqueInput
    update?: XOR<XOR<ProductRecordUpdateToOneWithWhereWithoutErrorsInput, ProductRecordUpdateWithoutErrorsInput>, ProductRecordUncheckedUpdateWithoutErrorsInput>
  }

  export type ProductRecordCreatemanuallyChangedFieldsInput = {
    set: $Enums.ProductRecordDataField[]
  }

  export type UserCreateNestedOneWithoutCreatedProductRecordsInput = {
    create?: XOR<UserCreateWithoutCreatedProductRecordsInput, UserUncheckedCreateWithoutCreatedProductRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProductRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedProductRecordsInput = {
    create?: XOR<UserCreateWithoutUpdatedProductRecordsInput, UserUncheckedCreateWithoutUpdatedProductRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedProductRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutRecordsInput = {
    create?: XOR<ProductCreateWithoutRecordsInput, ProductUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutRecordsInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductRecordErrorCreateNestedManyWithoutRecordInput = {
    create?: XOR<ProductRecordErrorCreateWithoutRecordInput, ProductRecordErrorUncheckedCreateWithoutRecordInput> | ProductRecordErrorCreateWithoutRecordInput[] | ProductRecordErrorUncheckedCreateWithoutRecordInput[]
    connectOrCreate?: ProductRecordErrorCreateOrConnectWithoutRecordInput | ProductRecordErrorCreateOrConnectWithoutRecordInput[]
    createMany?: ProductRecordErrorCreateManyRecordInputEnvelope
    connect?: ProductRecordErrorWhereUniqueInput | ProductRecordErrorWhereUniqueInput[]
  }

  export type StatusChangeNotificationCreateNestedManyWithoutProductRecordInput = {
    create?: XOR<StatusChangeNotificationCreateWithoutProductRecordInput, StatusChangeNotificationUncheckedCreateWithoutProductRecordInput> | StatusChangeNotificationCreateWithoutProductRecordInput[] | StatusChangeNotificationUncheckedCreateWithoutProductRecordInput[]
    connectOrCreate?: StatusChangeNotificationCreateOrConnectWithoutProductRecordInput | StatusChangeNotificationCreateOrConnectWithoutProductRecordInput[]
    createMany?: StatusChangeNotificationCreateManyProductRecordInputEnvelope
    connect?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
  }

  export type PriceChangeNotificationCreateNestedManyWithoutProductRecordInput = {
    create?: XOR<PriceChangeNotificationCreateWithoutProductRecordInput, PriceChangeNotificationUncheckedCreateWithoutProductRecordInput> | PriceChangeNotificationCreateWithoutProductRecordInput[] | PriceChangeNotificationUncheckedCreateWithoutProductRecordInput[]
    connectOrCreate?: PriceChangeNotificationCreateOrConnectWithoutProductRecordInput | PriceChangeNotificationCreateOrConnectWithoutProductRecordInput[]
    createMany?: PriceChangeNotificationCreateManyProductRecordInputEnvelope
    connect?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
  }

  export type ProcessedProductRecordCreateNestedManyWithoutRecordInput = {
    create?: XOR<ProcessedProductRecordCreateWithoutRecordInput, ProcessedProductRecordUncheckedCreateWithoutRecordInput> | ProcessedProductRecordCreateWithoutRecordInput[] | ProcessedProductRecordUncheckedCreateWithoutRecordInput[]
    connectOrCreate?: ProcessedProductRecordCreateOrConnectWithoutRecordInput | ProcessedProductRecordCreateOrConnectWithoutRecordInput[]
    createMany?: ProcessedProductRecordCreateManyRecordInputEnvelope
    connect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
  }

  export type ProductRecordErrorUncheckedCreateNestedManyWithoutRecordInput = {
    create?: XOR<ProductRecordErrorCreateWithoutRecordInput, ProductRecordErrorUncheckedCreateWithoutRecordInput> | ProductRecordErrorCreateWithoutRecordInput[] | ProductRecordErrorUncheckedCreateWithoutRecordInput[]
    connectOrCreate?: ProductRecordErrorCreateOrConnectWithoutRecordInput | ProductRecordErrorCreateOrConnectWithoutRecordInput[]
    createMany?: ProductRecordErrorCreateManyRecordInputEnvelope
    connect?: ProductRecordErrorWhereUniqueInput | ProductRecordErrorWhereUniqueInput[]
  }

  export type StatusChangeNotificationUncheckedCreateNestedManyWithoutProductRecordInput = {
    create?: XOR<StatusChangeNotificationCreateWithoutProductRecordInput, StatusChangeNotificationUncheckedCreateWithoutProductRecordInput> | StatusChangeNotificationCreateWithoutProductRecordInput[] | StatusChangeNotificationUncheckedCreateWithoutProductRecordInput[]
    connectOrCreate?: StatusChangeNotificationCreateOrConnectWithoutProductRecordInput | StatusChangeNotificationCreateOrConnectWithoutProductRecordInput[]
    createMany?: StatusChangeNotificationCreateManyProductRecordInputEnvelope
    connect?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
  }

  export type PriceChangeNotificationUncheckedCreateNestedManyWithoutProductRecordInput = {
    create?: XOR<PriceChangeNotificationCreateWithoutProductRecordInput, PriceChangeNotificationUncheckedCreateWithoutProductRecordInput> | PriceChangeNotificationCreateWithoutProductRecordInput[] | PriceChangeNotificationUncheckedCreateWithoutProductRecordInput[]
    connectOrCreate?: PriceChangeNotificationCreateOrConnectWithoutProductRecordInput | PriceChangeNotificationCreateOrConnectWithoutProductRecordInput[]
    createMany?: PriceChangeNotificationCreateManyProductRecordInputEnvelope
    connect?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
  }

  export type ProcessedProductRecordUncheckedCreateNestedManyWithoutRecordInput = {
    create?: XOR<ProcessedProductRecordCreateWithoutRecordInput, ProcessedProductRecordUncheckedCreateWithoutRecordInput> | ProcessedProductRecordCreateWithoutRecordInput[] | ProcessedProductRecordUncheckedCreateWithoutRecordInput[]
    connectOrCreate?: ProcessedProductRecordCreateOrConnectWithoutRecordInput | ProcessedProductRecordCreateOrConnectWithoutRecordInput[]
    createMany?: ProcessedProductRecordCreateManyRecordInputEnvelope
    connect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableEnumProductStatusFieldUpdateOperationsInput = {
    set?: $Enums.ProductStatus | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ProductRecordUpdatemanuallyChangedFieldsInput = {
    set?: $Enums.ProductRecordDataField[]
    push?: $Enums.ProductRecordDataField | $Enums.ProductRecordDataField[]
  }

  export type UserUpdateOneRequiredWithoutCreatedProductRecordsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedProductRecordsInput, UserUncheckedCreateWithoutCreatedProductRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProductRecordsInput
    upsert?: UserUpsertWithoutCreatedProductRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedProductRecordsInput, UserUpdateWithoutCreatedProductRecordsInput>, UserUncheckedUpdateWithoutCreatedProductRecordsInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedProductRecordsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedProductRecordsInput, UserUncheckedCreateWithoutUpdatedProductRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedProductRecordsInput
    upsert?: UserUpsertWithoutUpdatedProductRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedProductRecordsInput, UserUpdateWithoutUpdatedProductRecordsInput>, UserUncheckedUpdateWithoutUpdatedProductRecordsInput>
  }

  export type ProductUpdateOneRequiredWithoutRecordsNestedInput = {
    create?: XOR<ProductCreateWithoutRecordsInput, ProductUncheckedCreateWithoutRecordsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutRecordsInput
    upsert?: ProductUpsertWithoutRecordsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutRecordsInput, ProductUpdateWithoutRecordsInput>, ProductUncheckedUpdateWithoutRecordsInput>
  }

  export type ProductRecordErrorUpdateManyWithoutRecordNestedInput = {
    create?: XOR<ProductRecordErrorCreateWithoutRecordInput, ProductRecordErrorUncheckedCreateWithoutRecordInput> | ProductRecordErrorCreateWithoutRecordInput[] | ProductRecordErrorUncheckedCreateWithoutRecordInput[]
    connectOrCreate?: ProductRecordErrorCreateOrConnectWithoutRecordInput | ProductRecordErrorCreateOrConnectWithoutRecordInput[]
    upsert?: ProductRecordErrorUpsertWithWhereUniqueWithoutRecordInput | ProductRecordErrorUpsertWithWhereUniqueWithoutRecordInput[]
    createMany?: ProductRecordErrorCreateManyRecordInputEnvelope
    set?: ProductRecordErrorWhereUniqueInput | ProductRecordErrorWhereUniqueInput[]
    disconnect?: ProductRecordErrorWhereUniqueInput | ProductRecordErrorWhereUniqueInput[]
    delete?: ProductRecordErrorWhereUniqueInput | ProductRecordErrorWhereUniqueInput[]
    connect?: ProductRecordErrorWhereUniqueInput | ProductRecordErrorWhereUniqueInput[]
    update?: ProductRecordErrorUpdateWithWhereUniqueWithoutRecordInput | ProductRecordErrorUpdateWithWhereUniqueWithoutRecordInput[]
    updateMany?: ProductRecordErrorUpdateManyWithWhereWithoutRecordInput | ProductRecordErrorUpdateManyWithWhereWithoutRecordInput[]
    deleteMany?: ProductRecordErrorScalarWhereInput | ProductRecordErrorScalarWhereInput[]
  }

  export type StatusChangeNotificationUpdateManyWithoutProductRecordNestedInput = {
    create?: XOR<StatusChangeNotificationCreateWithoutProductRecordInput, StatusChangeNotificationUncheckedCreateWithoutProductRecordInput> | StatusChangeNotificationCreateWithoutProductRecordInput[] | StatusChangeNotificationUncheckedCreateWithoutProductRecordInput[]
    connectOrCreate?: StatusChangeNotificationCreateOrConnectWithoutProductRecordInput | StatusChangeNotificationCreateOrConnectWithoutProductRecordInput[]
    upsert?: StatusChangeNotificationUpsertWithWhereUniqueWithoutProductRecordInput | StatusChangeNotificationUpsertWithWhereUniqueWithoutProductRecordInput[]
    createMany?: StatusChangeNotificationCreateManyProductRecordInputEnvelope
    set?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
    disconnect?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
    delete?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
    connect?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
    update?: StatusChangeNotificationUpdateWithWhereUniqueWithoutProductRecordInput | StatusChangeNotificationUpdateWithWhereUniqueWithoutProductRecordInput[]
    updateMany?: StatusChangeNotificationUpdateManyWithWhereWithoutProductRecordInput | StatusChangeNotificationUpdateManyWithWhereWithoutProductRecordInput[]
    deleteMany?: StatusChangeNotificationScalarWhereInput | StatusChangeNotificationScalarWhereInput[]
  }

  export type PriceChangeNotificationUpdateManyWithoutProductRecordNestedInput = {
    create?: XOR<PriceChangeNotificationCreateWithoutProductRecordInput, PriceChangeNotificationUncheckedCreateWithoutProductRecordInput> | PriceChangeNotificationCreateWithoutProductRecordInput[] | PriceChangeNotificationUncheckedCreateWithoutProductRecordInput[]
    connectOrCreate?: PriceChangeNotificationCreateOrConnectWithoutProductRecordInput | PriceChangeNotificationCreateOrConnectWithoutProductRecordInput[]
    upsert?: PriceChangeNotificationUpsertWithWhereUniqueWithoutProductRecordInput | PriceChangeNotificationUpsertWithWhereUniqueWithoutProductRecordInput[]
    createMany?: PriceChangeNotificationCreateManyProductRecordInputEnvelope
    set?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
    disconnect?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
    delete?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
    connect?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
    update?: PriceChangeNotificationUpdateWithWhereUniqueWithoutProductRecordInput | PriceChangeNotificationUpdateWithWhereUniqueWithoutProductRecordInput[]
    updateMany?: PriceChangeNotificationUpdateManyWithWhereWithoutProductRecordInput | PriceChangeNotificationUpdateManyWithWhereWithoutProductRecordInput[]
    deleteMany?: PriceChangeNotificationScalarWhereInput | PriceChangeNotificationScalarWhereInput[]
  }

  export type ProcessedProductRecordUpdateManyWithoutRecordNestedInput = {
    create?: XOR<ProcessedProductRecordCreateWithoutRecordInput, ProcessedProductRecordUncheckedCreateWithoutRecordInput> | ProcessedProductRecordCreateWithoutRecordInput[] | ProcessedProductRecordUncheckedCreateWithoutRecordInput[]
    connectOrCreate?: ProcessedProductRecordCreateOrConnectWithoutRecordInput | ProcessedProductRecordCreateOrConnectWithoutRecordInput[]
    upsert?: ProcessedProductRecordUpsertWithWhereUniqueWithoutRecordInput | ProcessedProductRecordUpsertWithWhereUniqueWithoutRecordInput[]
    createMany?: ProcessedProductRecordCreateManyRecordInputEnvelope
    set?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    disconnect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    delete?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    connect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    update?: ProcessedProductRecordUpdateWithWhereUniqueWithoutRecordInput | ProcessedProductRecordUpdateWithWhereUniqueWithoutRecordInput[]
    updateMany?: ProcessedProductRecordUpdateManyWithWhereWithoutRecordInput | ProcessedProductRecordUpdateManyWithWhereWithoutRecordInput[]
    deleteMany?: ProcessedProductRecordScalarWhereInput | ProcessedProductRecordScalarWhereInput[]
  }

  export type ProductRecordErrorUncheckedUpdateManyWithoutRecordNestedInput = {
    create?: XOR<ProductRecordErrorCreateWithoutRecordInput, ProductRecordErrorUncheckedCreateWithoutRecordInput> | ProductRecordErrorCreateWithoutRecordInput[] | ProductRecordErrorUncheckedCreateWithoutRecordInput[]
    connectOrCreate?: ProductRecordErrorCreateOrConnectWithoutRecordInput | ProductRecordErrorCreateOrConnectWithoutRecordInput[]
    upsert?: ProductRecordErrorUpsertWithWhereUniqueWithoutRecordInput | ProductRecordErrorUpsertWithWhereUniqueWithoutRecordInput[]
    createMany?: ProductRecordErrorCreateManyRecordInputEnvelope
    set?: ProductRecordErrorWhereUniqueInput | ProductRecordErrorWhereUniqueInput[]
    disconnect?: ProductRecordErrorWhereUniqueInput | ProductRecordErrorWhereUniqueInput[]
    delete?: ProductRecordErrorWhereUniqueInput | ProductRecordErrorWhereUniqueInput[]
    connect?: ProductRecordErrorWhereUniqueInput | ProductRecordErrorWhereUniqueInput[]
    update?: ProductRecordErrorUpdateWithWhereUniqueWithoutRecordInput | ProductRecordErrorUpdateWithWhereUniqueWithoutRecordInput[]
    updateMany?: ProductRecordErrorUpdateManyWithWhereWithoutRecordInput | ProductRecordErrorUpdateManyWithWhereWithoutRecordInput[]
    deleteMany?: ProductRecordErrorScalarWhereInput | ProductRecordErrorScalarWhereInput[]
  }

  export type StatusChangeNotificationUncheckedUpdateManyWithoutProductRecordNestedInput = {
    create?: XOR<StatusChangeNotificationCreateWithoutProductRecordInput, StatusChangeNotificationUncheckedCreateWithoutProductRecordInput> | StatusChangeNotificationCreateWithoutProductRecordInput[] | StatusChangeNotificationUncheckedCreateWithoutProductRecordInput[]
    connectOrCreate?: StatusChangeNotificationCreateOrConnectWithoutProductRecordInput | StatusChangeNotificationCreateOrConnectWithoutProductRecordInput[]
    upsert?: StatusChangeNotificationUpsertWithWhereUniqueWithoutProductRecordInput | StatusChangeNotificationUpsertWithWhereUniqueWithoutProductRecordInput[]
    createMany?: StatusChangeNotificationCreateManyProductRecordInputEnvelope
    set?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
    disconnect?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
    delete?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
    connect?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
    update?: StatusChangeNotificationUpdateWithWhereUniqueWithoutProductRecordInput | StatusChangeNotificationUpdateWithWhereUniqueWithoutProductRecordInput[]
    updateMany?: StatusChangeNotificationUpdateManyWithWhereWithoutProductRecordInput | StatusChangeNotificationUpdateManyWithWhereWithoutProductRecordInput[]
    deleteMany?: StatusChangeNotificationScalarWhereInput | StatusChangeNotificationScalarWhereInput[]
  }

  export type PriceChangeNotificationUncheckedUpdateManyWithoutProductRecordNestedInput = {
    create?: XOR<PriceChangeNotificationCreateWithoutProductRecordInput, PriceChangeNotificationUncheckedCreateWithoutProductRecordInput> | PriceChangeNotificationCreateWithoutProductRecordInput[] | PriceChangeNotificationUncheckedCreateWithoutProductRecordInput[]
    connectOrCreate?: PriceChangeNotificationCreateOrConnectWithoutProductRecordInput | PriceChangeNotificationCreateOrConnectWithoutProductRecordInput[]
    upsert?: PriceChangeNotificationUpsertWithWhereUniqueWithoutProductRecordInput | PriceChangeNotificationUpsertWithWhereUniqueWithoutProductRecordInput[]
    createMany?: PriceChangeNotificationCreateManyProductRecordInputEnvelope
    set?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
    disconnect?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
    delete?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
    connect?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
    update?: PriceChangeNotificationUpdateWithWhereUniqueWithoutProductRecordInput | PriceChangeNotificationUpdateWithWhereUniqueWithoutProductRecordInput[]
    updateMany?: PriceChangeNotificationUpdateManyWithWhereWithoutProductRecordInput | PriceChangeNotificationUpdateManyWithWhereWithoutProductRecordInput[]
    deleteMany?: PriceChangeNotificationScalarWhereInput | PriceChangeNotificationScalarWhereInput[]
  }

  export type ProcessedProductRecordUncheckedUpdateManyWithoutRecordNestedInput = {
    create?: XOR<ProcessedProductRecordCreateWithoutRecordInput, ProcessedProductRecordUncheckedCreateWithoutRecordInput> | ProcessedProductRecordCreateWithoutRecordInput[] | ProcessedProductRecordUncheckedCreateWithoutRecordInput[]
    connectOrCreate?: ProcessedProductRecordCreateOrConnectWithoutRecordInput | ProcessedProductRecordCreateOrConnectWithoutRecordInput[]
    upsert?: ProcessedProductRecordUpsertWithWhereUniqueWithoutRecordInput | ProcessedProductRecordUpsertWithWhereUniqueWithoutRecordInput[]
    createMany?: ProcessedProductRecordCreateManyRecordInputEnvelope
    set?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    disconnect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    delete?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    connect?: ProcessedProductRecordWhereUniqueInput | ProcessedProductRecordWhereUniqueInput[]
    update?: ProcessedProductRecordUpdateWithWhereUniqueWithoutRecordInput | ProcessedProductRecordUpdateWithWhereUniqueWithoutRecordInput[]
    updateMany?: ProcessedProductRecordUpdateManyWithWhereWithoutRecordInput | ProcessedProductRecordUpdateManyWithWhereWithoutRecordInput[]
    deleteMany?: ProcessedProductRecordScalarWhereInput | ProcessedProductRecordScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedProcessedProductRecordsInput = {
    create?: XOR<UserCreateWithoutCreatedProcessedProductRecordsInput, UserUncheckedCreateWithoutCreatedProcessedProductRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProcessedProductRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedProcessedProductRecordsInput = {
    create?: XOR<UserCreateWithoutUpdatedProcessedProductRecordsInput, UserUncheckedCreateWithoutUpdatedProcessedProductRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedProcessedProductRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type ProductRecordCreateNestedOneWithoutProcessedRecordsInput = {
    create?: XOR<ProductRecordCreateWithoutProcessedRecordsInput, ProductRecordUncheckedCreateWithoutProcessedRecordsInput>
    connectOrCreate?: ProductRecordCreateOrConnectWithoutProcessedRecordsInput
    connect?: ProductRecordWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProcessedProductRecordsInput = {
    create?: XOR<UserCreateWithoutProcessedProductRecordsInput, UserUncheckedCreateWithoutProcessedProductRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProcessedProductRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCreatedProcessedProductRecordsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedProcessedProductRecordsInput, UserUncheckedCreateWithoutCreatedProcessedProductRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProcessedProductRecordsInput
    upsert?: UserUpsertWithoutCreatedProcessedProductRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedProcessedProductRecordsInput, UserUpdateWithoutCreatedProcessedProductRecordsInput>, UserUncheckedUpdateWithoutCreatedProcessedProductRecordsInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedProcessedProductRecordsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedProcessedProductRecordsInput, UserUncheckedCreateWithoutUpdatedProcessedProductRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedProcessedProductRecordsInput
    upsert?: UserUpsertWithoutUpdatedProcessedProductRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedProcessedProductRecordsInput, UserUpdateWithoutUpdatedProcessedProductRecordsInput>, UserUncheckedUpdateWithoutUpdatedProcessedProductRecordsInput>
  }

  export type ProductRecordUpdateOneRequiredWithoutProcessedRecordsNestedInput = {
    create?: XOR<ProductRecordCreateWithoutProcessedRecordsInput, ProductRecordUncheckedCreateWithoutProcessedRecordsInput>
    connectOrCreate?: ProductRecordCreateOrConnectWithoutProcessedRecordsInput
    upsert?: ProductRecordUpsertWithoutProcessedRecordsInput
    connect?: ProductRecordWhereUniqueInput
    update?: XOR<XOR<ProductRecordUpdateToOneWithWhereWithoutProcessedRecordsInput, ProductRecordUpdateWithoutProcessedRecordsInput>, ProductRecordUncheckedUpdateWithoutProcessedRecordsInput>
  }

  export type UserUpdateOneRequiredWithoutProcessedProductRecordsNestedInput = {
    create?: XOR<UserCreateWithoutProcessedProductRecordsInput, UserUncheckedCreateWithoutProcessedProductRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProcessedProductRecordsInput
    upsert?: UserUpsertWithoutProcessedProductRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProcessedProductRecordsInput, UserUpdateWithoutProcessedProductRecordsInput>, UserUncheckedUpdateWithoutProcessedProductRecordsInput>
  }

  export type ProductCreatesubCategoriesInput = {
    set: $Enums.ProductSubCategory[]
  }

  export type UserCreateNestedOneWithoutCreatedProductsInput = {
    create?: XOR<UserCreateWithoutCreatedProductsInput, UserUncheckedCreateWithoutCreatedProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProductsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedProductsInput = {
    create?: XOR<UserCreateWithoutUpdatedProductsInput, UserUncheckedCreateWithoutUpdatedProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedProductsInput
    connect?: UserWhereUniqueInput
  }

  export type ProductRecordCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductRecordCreateWithoutProductInput, ProductRecordUncheckedCreateWithoutProductInput> | ProductRecordCreateWithoutProductInput[] | ProductRecordUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductRecordCreateOrConnectWithoutProductInput | ProductRecordCreateOrConnectWithoutProductInput[]
    createMany?: ProductRecordCreateManyProductInputEnvelope
    connect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
  }

  export type ProductSubscriptionCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductSubscriptionCreateWithoutProductInput, ProductSubscriptionUncheckedCreateWithoutProductInput> | ProductSubscriptionCreateWithoutProductInput[] | ProductSubscriptionUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutProductInput | ProductSubscriptionCreateOrConnectWithoutProductInput[]
    createMany?: ProductSubscriptionCreateManyProductInputEnvelope
    connect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
  }

  export type NewProductNotificationCreateNestedManyWithoutProductInput = {
    create?: XOR<NewProductNotificationCreateWithoutProductInput, NewProductNotificationUncheckedCreateWithoutProductInput> | NewProductNotificationCreateWithoutProductInput[] | NewProductNotificationUncheckedCreateWithoutProductInput[]
    connectOrCreate?: NewProductNotificationCreateOrConnectWithoutProductInput | NewProductNotificationCreateOrConnectWithoutProductInput[]
    createMany?: NewProductNotificationCreateManyProductInputEnvelope
    connect?: NewProductNotificationWhereUniqueInput | NewProductNotificationWhereUniqueInput[]
  }

  export type ProductRecordUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductRecordCreateWithoutProductInput, ProductRecordUncheckedCreateWithoutProductInput> | ProductRecordCreateWithoutProductInput[] | ProductRecordUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductRecordCreateOrConnectWithoutProductInput | ProductRecordCreateOrConnectWithoutProductInput[]
    createMany?: ProductRecordCreateManyProductInputEnvelope
    connect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
  }

  export type ProductSubscriptionUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductSubscriptionCreateWithoutProductInput, ProductSubscriptionUncheckedCreateWithoutProductInput> | ProductSubscriptionCreateWithoutProductInput[] | ProductSubscriptionUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutProductInput | ProductSubscriptionCreateOrConnectWithoutProductInput[]
    createMany?: ProductSubscriptionCreateManyProductInputEnvelope
    connect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
  }

  export type NewProductNotificationUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<NewProductNotificationCreateWithoutProductInput, NewProductNotificationUncheckedCreateWithoutProductInput> | NewProductNotificationCreateWithoutProductInput[] | NewProductNotificationUncheckedCreateWithoutProductInput[]
    connectOrCreate?: NewProductNotificationCreateOrConnectWithoutProductInput | NewProductNotificationCreateOrConnectWithoutProductInput[]
    createMany?: NewProductNotificationCreateManyProductInputEnvelope
    connect?: NewProductNotificationWhereUniqueInput | NewProductNotificationWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumProductCategoryFieldUpdateOperationsInput = {
    set?: $Enums.ProductCategory
  }

  export type ProductUpdatesubCategoriesInput = {
    set?: $Enums.ProductSubCategory[]
    push?: $Enums.ProductSubCategory | $Enums.ProductSubCategory[]
  }

  export type UserUpdateOneRequiredWithoutCreatedProductsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedProductsInput, UserUncheckedCreateWithoutCreatedProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProductsInput
    upsert?: UserUpsertWithoutCreatedProductsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedProductsInput, UserUpdateWithoutCreatedProductsInput>, UserUncheckedUpdateWithoutCreatedProductsInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedProductsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedProductsInput, UserUncheckedCreateWithoutUpdatedProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedProductsInput
    upsert?: UserUpsertWithoutUpdatedProductsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedProductsInput, UserUpdateWithoutUpdatedProductsInput>, UserUncheckedUpdateWithoutUpdatedProductsInput>
  }

  export type ProductRecordUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductRecordCreateWithoutProductInput, ProductRecordUncheckedCreateWithoutProductInput> | ProductRecordCreateWithoutProductInput[] | ProductRecordUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductRecordCreateOrConnectWithoutProductInput | ProductRecordCreateOrConnectWithoutProductInput[]
    upsert?: ProductRecordUpsertWithWhereUniqueWithoutProductInput | ProductRecordUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductRecordCreateManyProductInputEnvelope
    set?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    disconnect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    delete?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    connect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    update?: ProductRecordUpdateWithWhereUniqueWithoutProductInput | ProductRecordUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductRecordUpdateManyWithWhereWithoutProductInput | ProductRecordUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductRecordScalarWhereInput | ProductRecordScalarWhereInput[]
  }

  export type ProductSubscriptionUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductSubscriptionCreateWithoutProductInput, ProductSubscriptionUncheckedCreateWithoutProductInput> | ProductSubscriptionCreateWithoutProductInput[] | ProductSubscriptionUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutProductInput | ProductSubscriptionCreateOrConnectWithoutProductInput[]
    upsert?: ProductSubscriptionUpsertWithWhereUniqueWithoutProductInput | ProductSubscriptionUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductSubscriptionCreateManyProductInputEnvelope
    set?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    disconnect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    delete?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    connect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    update?: ProductSubscriptionUpdateWithWhereUniqueWithoutProductInput | ProductSubscriptionUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductSubscriptionUpdateManyWithWhereWithoutProductInput | ProductSubscriptionUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductSubscriptionScalarWhereInput | ProductSubscriptionScalarWhereInput[]
  }

  export type NewProductNotificationUpdateManyWithoutProductNestedInput = {
    create?: XOR<NewProductNotificationCreateWithoutProductInput, NewProductNotificationUncheckedCreateWithoutProductInput> | NewProductNotificationCreateWithoutProductInput[] | NewProductNotificationUncheckedCreateWithoutProductInput[]
    connectOrCreate?: NewProductNotificationCreateOrConnectWithoutProductInput | NewProductNotificationCreateOrConnectWithoutProductInput[]
    upsert?: NewProductNotificationUpsertWithWhereUniqueWithoutProductInput | NewProductNotificationUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: NewProductNotificationCreateManyProductInputEnvelope
    set?: NewProductNotificationWhereUniqueInput | NewProductNotificationWhereUniqueInput[]
    disconnect?: NewProductNotificationWhereUniqueInput | NewProductNotificationWhereUniqueInput[]
    delete?: NewProductNotificationWhereUniqueInput | NewProductNotificationWhereUniqueInput[]
    connect?: NewProductNotificationWhereUniqueInput | NewProductNotificationWhereUniqueInput[]
    update?: NewProductNotificationUpdateWithWhereUniqueWithoutProductInput | NewProductNotificationUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: NewProductNotificationUpdateManyWithWhereWithoutProductInput | NewProductNotificationUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: NewProductNotificationScalarWhereInput | NewProductNotificationScalarWhereInput[]
  }

  export type ProductRecordUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductRecordCreateWithoutProductInput, ProductRecordUncheckedCreateWithoutProductInput> | ProductRecordCreateWithoutProductInput[] | ProductRecordUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductRecordCreateOrConnectWithoutProductInput | ProductRecordCreateOrConnectWithoutProductInput[]
    upsert?: ProductRecordUpsertWithWhereUniqueWithoutProductInput | ProductRecordUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductRecordCreateManyProductInputEnvelope
    set?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    disconnect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    delete?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    connect?: ProductRecordWhereUniqueInput | ProductRecordWhereUniqueInput[]
    update?: ProductRecordUpdateWithWhereUniqueWithoutProductInput | ProductRecordUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductRecordUpdateManyWithWhereWithoutProductInput | ProductRecordUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductRecordScalarWhereInput | ProductRecordScalarWhereInput[]
  }

  export type ProductSubscriptionUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductSubscriptionCreateWithoutProductInput, ProductSubscriptionUncheckedCreateWithoutProductInput> | ProductSubscriptionCreateWithoutProductInput[] | ProductSubscriptionUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutProductInput | ProductSubscriptionCreateOrConnectWithoutProductInput[]
    upsert?: ProductSubscriptionUpsertWithWhereUniqueWithoutProductInput | ProductSubscriptionUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductSubscriptionCreateManyProductInputEnvelope
    set?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    disconnect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    delete?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    connect?: ProductSubscriptionWhereUniqueInput | ProductSubscriptionWhereUniqueInput[]
    update?: ProductSubscriptionUpdateWithWhereUniqueWithoutProductInput | ProductSubscriptionUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductSubscriptionUpdateManyWithWhereWithoutProductInput | ProductSubscriptionUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductSubscriptionScalarWhereInput | ProductSubscriptionScalarWhereInput[]
  }

  export type NewProductNotificationUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<NewProductNotificationCreateWithoutProductInput, NewProductNotificationUncheckedCreateWithoutProductInput> | NewProductNotificationCreateWithoutProductInput[] | NewProductNotificationUncheckedCreateWithoutProductInput[]
    connectOrCreate?: NewProductNotificationCreateOrConnectWithoutProductInput | NewProductNotificationCreateOrConnectWithoutProductInput[]
    upsert?: NewProductNotificationUpsertWithWhereUniqueWithoutProductInput | NewProductNotificationUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: NewProductNotificationCreateManyProductInputEnvelope
    set?: NewProductNotificationWhereUniqueInput | NewProductNotificationWhereUniqueInput[]
    disconnect?: NewProductNotificationWhereUniqueInput | NewProductNotificationWhereUniqueInput[]
    delete?: NewProductNotificationWhereUniqueInput | NewProductNotificationWhereUniqueInput[]
    connect?: NewProductNotificationWhereUniqueInput | NewProductNotificationWhereUniqueInput[]
    update?: NewProductNotificationUpdateWithWhereUniqueWithoutProductInput | NewProductNotificationUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: NewProductNotificationUpdateManyWithWhereWithoutProductInput | NewProductNotificationUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: NewProductNotificationScalarWhereInput | NewProductNotificationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedProductSubscriptionsInput = {
    create?: XOR<UserCreateWithoutCreatedProductSubscriptionsInput, UserUncheckedCreateWithoutCreatedProductSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProductSubscriptionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedProductSubscriptionsInput = {
    create?: XOR<UserCreateWithoutUpdatedProductSubscriptionsInput, UserUncheckedCreateWithoutUpdatedProductSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedProductSubscriptionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProductSubscriptionsInput = {
    create?: XOR<UserCreateWithoutProductSubscriptionsInput, UserUncheckedCreateWithoutProductSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductSubscriptionsInput
    connect?: UserWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<ProductCreateWithoutSubscriptionsInput, ProductUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSubscriptionsInput
    connect?: ProductWhereUniqueInput
  }

  export type StatusChangeSubscriptionCreateNestedOneWithoutDelegate_aux_productSubscriptionInput = {
    create?: XOR<StatusChangeSubscriptionCreateWithoutDelegate_aux_productSubscriptionInput, StatusChangeSubscriptionUncheckedCreateWithoutDelegate_aux_productSubscriptionInput>
    connectOrCreate?: StatusChangeSubscriptionCreateOrConnectWithoutDelegate_aux_productSubscriptionInput
    connect?: StatusChangeSubscriptionWhereUniqueInput
  }

  export type PriceChangeSubscriptionCreateNestedOneWithoutDelegate_aux_productSubscriptionInput = {
    create?: XOR<PriceChangeSubscriptionCreateWithoutDelegate_aux_productSubscriptionInput, PriceChangeSubscriptionUncheckedCreateWithoutDelegate_aux_productSubscriptionInput>
    connectOrCreate?: PriceChangeSubscriptionCreateOrConnectWithoutDelegate_aux_productSubscriptionInput
    connect?: PriceChangeSubscriptionWhereUniqueInput
  }

  export type StatusChangeSubscriptionUncheckedCreateNestedOneWithoutDelegate_aux_productSubscriptionInput = {
    create?: XOR<StatusChangeSubscriptionCreateWithoutDelegate_aux_productSubscriptionInput, StatusChangeSubscriptionUncheckedCreateWithoutDelegate_aux_productSubscriptionInput>
    connectOrCreate?: StatusChangeSubscriptionCreateOrConnectWithoutDelegate_aux_productSubscriptionInput
    connect?: StatusChangeSubscriptionWhereUniqueInput
  }

  export type PriceChangeSubscriptionUncheckedCreateNestedOneWithoutDelegate_aux_productSubscriptionInput = {
    create?: XOR<PriceChangeSubscriptionCreateWithoutDelegate_aux_productSubscriptionInput, PriceChangeSubscriptionUncheckedCreateWithoutDelegate_aux_productSubscriptionInput>
    connectOrCreate?: PriceChangeSubscriptionCreateOrConnectWithoutDelegate_aux_productSubscriptionInput
    connect?: PriceChangeSubscriptionWhereUniqueInput
  }

  export type EnumSubscriptionTypeFieldUpdateOperationsInput = {
    set?: $Enums.SubscriptionType
  }

  export type UserUpdateOneRequiredWithoutCreatedProductSubscriptionsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedProductSubscriptionsInput, UserUncheckedCreateWithoutCreatedProductSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProductSubscriptionsInput
    upsert?: UserUpsertWithoutCreatedProductSubscriptionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedProductSubscriptionsInput, UserUpdateWithoutCreatedProductSubscriptionsInput>, UserUncheckedUpdateWithoutCreatedProductSubscriptionsInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedProductSubscriptionsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedProductSubscriptionsInput, UserUncheckedCreateWithoutUpdatedProductSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedProductSubscriptionsInput
    upsert?: UserUpsertWithoutUpdatedProductSubscriptionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedProductSubscriptionsInput, UserUpdateWithoutUpdatedProductSubscriptionsInput>, UserUncheckedUpdateWithoutUpdatedProductSubscriptionsInput>
  }

  export type UserUpdateOneRequiredWithoutProductSubscriptionsNestedInput = {
    create?: XOR<UserCreateWithoutProductSubscriptionsInput, UserUncheckedCreateWithoutProductSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductSubscriptionsInput
    upsert?: UserUpsertWithoutProductSubscriptionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProductSubscriptionsInput, UserUpdateWithoutProductSubscriptionsInput>, UserUncheckedUpdateWithoutProductSubscriptionsInput>
  }

  export type ProductUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<ProductCreateWithoutSubscriptionsInput, ProductUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSubscriptionsInput
    upsert?: ProductUpsertWithoutSubscriptionsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutSubscriptionsInput, ProductUpdateWithoutSubscriptionsInput>, ProductUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type StatusChangeSubscriptionUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput = {
    create?: XOR<StatusChangeSubscriptionCreateWithoutDelegate_aux_productSubscriptionInput, StatusChangeSubscriptionUncheckedCreateWithoutDelegate_aux_productSubscriptionInput>
    connectOrCreate?: StatusChangeSubscriptionCreateOrConnectWithoutDelegate_aux_productSubscriptionInput
    upsert?: StatusChangeSubscriptionUpsertWithoutDelegate_aux_productSubscriptionInput
    disconnect?: StatusChangeSubscriptionWhereInput | boolean
    delete?: StatusChangeSubscriptionWhereInput | boolean
    connect?: StatusChangeSubscriptionWhereUniqueInput
    update?: XOR<XOR<StatusChangeSubscriptionUpdateToOneWithWhereWithoutDelegate_aux_productSubscriptionInput, StatusChangeSubscriptionUpdateWithoutDelegate_aux_productSubscriptionInput>, StatusChangeSubscriptionUncheckedUpdateWithoutDelegate_aux_productSubscriptionInput>
  }

  export type PriceChangeSubscriptionUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput = {
    create?: XOR<PriceChangeSubscriptionCreateWithoutDelegate_aux_productSubscriptionInput, PriceChangeSubscriptionUncheckedCreateWithoutDelegate_aux_productSubscriptionInput>
    connectOrCreate?: PriceChangeSubscriptionCreateOrConnectWithoutDelegate_aux_productSubscriptionInput
    upsert?: PriceChangeSubscriptionUpsertWithoutDelegate_aux_productSubscriptionInput
    disconnect?: PriceChangeSubscriptionWhereInput | boolean
    delete?: PriceChangeSubscriptionWhereInput | boolean
    connect?: PriceChangeSubscriptionWhereUniqueInput
    update?: XOR<XOR<PriceChangeSubscriptionUpdateToOneWithWhereWithoutDelegate_aux_productSubscriptionInput, PriceChangeSubscriptionUpdateWithoutDelegate_aux_productSubscriptionInput>, PriceChangeSubscriptionUncheckedUpdateWithoutDelegate_aux_productSubscriptionInput>
  }

  export type StatusChangeSubscriptionUncheckedUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput = {
    create?: XOR<StatusChangeSubscriptionCreateWithoutDelegate_aux_productSubscriptionInput, StatusChangeSubscriptionUncheckedCreateWithoutDelegate_aux_productSubscriptionInput>
    connectOrCreate?: StatusChangeSubscriptionCreateOrConnectWithoutDelegate_aux_productSubscriptionInput
    upsert?: StatusChangeSubscriptionUpsertWithoutDelegate_aux_productSubscriptionInput
    disconnect?: StatusChangeSubscriptionWhereInput | boolean
    delete?: StatusChangeSubscriptionWhereInput | boolean
    connect?: StatusChangeSubscriptionWhereUniqueInput
    update?: XOR<XOR<StatusChangeSubscriptionUpdateToOneWithWhereWithoutDelegate_aux_productSubscriptionInput, StatusChangeSubscriptionUpdateWithoutDelegate_aux_productSubscriptionInput>, StatusChangeSubscriptionUncheckedUpdateWithoutDelegate_aux_productSubscriptionInput>
  }

  export type PriceChangeSubscriptionUncheckedUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput = {
    create?: XOR<PriceChangeSubscriptionCreateWithoutDelegate_aux_productSubscriptionInput, PriceChangeSubscriptionUncheckedCreateWithoutDelegate_aux_productSubscriptionInput>
    connectOrCreate?: PriceChangeSubscriptionCreateOrConnectWithoutDelegate_aux_productSubscriptionInput
    upsert?: PriceChangeSubscriptionUpsertWithoutDelegate_aux_productSubscriptionInput
    disconnect?: PriceChangeSubscriptionWhereInput | boolean
    delete?: PriceChangeSubscriptionWhereInput | boolean
    connect?: PriceChangeSubscriptionWhereUniqueInput
    update?: XOR<XOR<PriceChangeSubscriptionUpdateToOneWithWhereWithoutDelegate_aux_productSubscriptionInput, PriceChangeSubscriptionUpdateWithoutDelegate_aux_productSubscriptionInput>, PriceChangeSubscriptionUncheckedUpdateWithoutDelegate_aux_productSubscriptionInput>
  }

  export type StatusChangeSubscriptionConditionCreatefromStatusInput = {
    set: $Enums.ProductStatus[]
  }

  export type StatusChangeSubscriptionConditionCreatetoStatusInput = {
    set: $Enums.ProductStatus[]
  }

  export type StatusChangeSubscriptionCreateNestedOneWithoutConditionsInput = {
    create?: XOR<StatusChangeSubscriptionCreateWithoutConditionsInput, StatusChangeSubscriptionUncheckedCreateWithoutConditionsInput>
    connectOrCreate?: StatusChangeSubscriptionCreateOrConnectWithoutConditionsInput
    connect?: StatusChangeSubscriptionWhereUniqueInput
  }

  export type StatusChangeSubscriptionConditionUpdatefromStatusInput = {
    set?: $Enums.ProductStatus[]
    push?: $Enums.ProductStatus | $Enums.ProductStatus[]
  }

  export type StatusChangeSubscriptionConditionUpdatetoStatusInput = {
    set?: $Enums.ProductStatus[]
    push?: $Enums.ProductStatus | $Enums.ProductStatus[]
  }

  export type StatusChangeSubscriptionUpdateOneRequiredWithoutConditionsNestedInput = {
    create?: XOR<StatusChangeSubscriptionCreateWithoutConditionsInput, StatusChangeSubscriptionUncheckedCreateWithoutConditionsInput>
    connectOrCreate?: StatusChangeSubscriptionCreateOrConnectWithoutConditionsInput
    upsert?: StatusChangeSubscriptionUpsertWithoutConditionsInput
    connect?: StatusChangeSubscriptionWhereUniqueInput
    update?: XOR<XOR<StatusChangeSubscriptionUpdateToOneWithWhereWithoutConditionsInput, StatusChangeSubscriptionUpdateWithoutConditionsInput>, StatusChangeSubscriptionUncheckedUpdateWithoutConditionsInput>
  }

  export type StatusChangeSubscriptionConditionCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<StatusChangeSubscriptionConditionCreateWithoutSubscriptionInput, StatusChangeSubscriptionConditionUncheckedCreateWithoutSubscriptionInput> | StatusChangeSubscriptionConditionCreateWithoutSubscriptionInput[] | StatusChangeSubscriptionConditionUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: StatusChangeSubscriptionConditionCreateOrConnectWithoutSubscriptionInput | StatusChangeSubscriptionConditionCreateOrConnectWithoutSubscriptionInput[]
    createMany?: StatusChangeSubscriptionConditionCreateManySubscriptionInputEnvelope
    connect?: StatusChangeSubscriptionConditionWhereUniqueInput | StatusChangeSubscriptionConditionWhereUniqueInput[]
  }

  export type StatusChangeNotificationCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<StatusChangeNotificationCreateWithoutSubscriptionInput, StatusChangeNotificationUncheckedCreateWithoutSubscriptionInput> | StatusChangeNotificationCreateWithoutSubscriptionInput[] | StatusChangeNotificationUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: StatusChangeNotificationCreateOrConnectWithoutSubscriptionInput | StatusChangeNotificationCreateOrConnectWithoutSubscriptionInput[]
    createMany?: StatusChangeNotificationCreateManySubscriptionInputEnvelope
    connect?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
  }

  export type ProductSubscriptionCreateNestedOneWithoutDelegate_aux_statusChangeSubscriptionInput = {
    create?: XOR<ProductSubscriptionCreateWithoutDelegate_aux_statusChangeSubscriptionInput, ProductSubscriptionUncheckedCreateWithoutDelegate_aux_statusChangeSubscriptionInput>
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutDelegate_aux_statusChangeSubscriptionInput
    connect?: ProductSubscriptionWhereUniqueInput
  }

  export type StatusChangeSubscriptionConditionUncheckedCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<StatusChangeSubscriptionConditionCreateWithoutSubscriptionInput, StatusChangeSubscriptionConditionUncheckedCreateWithoutSubscriptionInput> | StatusChangeSubscriptionConditionCreateWithoutSubscriptionInput[] | StatusChangeSubscriptionConditionUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: StatusChangeSubscriptionConditionCreateOrConnectWithoutSubscriptionInput | StatusChangeSubscriptionConditionCreateOrConnectWithoutSubscriptionInput[]
    createMany?: StatusChangeSubscriptionConditionCreateManySubscriptionInputEnvelope
    connect?: StatusChangeSubscriptionConditionWhereUniqueInput | StatusChangeSubscriptionConditionWhereUniqueInput[]
  }

  export type StatusChangeNotificationUncheckedCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<StatusChangeNotificationCreateWithoutSubscriptionInput, StatusChangeNotificationUncheckedCreateWithoutSubscriptionInput> | StatusChangeNotificationCreateWithoutSubscriptionInput[] | StatusChangeNotificationUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: StatusChangeNotificationCreateOrConnectWithoutSubscriptionInput | StatusChangeNotificationCreateOrConnectWithoutSubscriptionInput[]
    createMany?: StatusChangeNotificationCreateManySubscriptionInputEnvelope
    connect?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
  }

  export type StatusChangeSubscriptionConditionUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<StatusChangeSubscriptionConditionCreateWithoutSubscriptionInput, StatusChangeSubscriptionConditionUncheckedCreateWithoutSubscriptionInput> | StatusChangeSubscriptionConditionCreateWithoutSubscriptionInput[] | StatusChangeSubscriptionConditionUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: StatusChangeSubscriptionConditionCreateOrConnectWithoutSubscriptionInput | StatusChangeSubscriptionConditionCreateOrConnectWithoutSubscriptionInput[]
    upsert?: StatusChangeSubscriptionConditionUpsertWithWhereUniqueWithoutSubscriptionInput | StatusChangeSubscriptionConditionUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: StatusChangeSubscriptionConditionCreateManySubscriptionInputEnvelope
    set?: StatusChangeSubscriptionConditionWhereUniqueInput | StatusChangeSubscriptionConditionWhereUniqueInput[]
    disconnect?: StatusChangeSubscriptionConditionWhereUniqueInput | StatusChangeSubscriptionConditionWhereUniqueInput[]
    delete?: StatusChangeSubscriptionConditionWhereUniqueInput | StatusChangeSubscriptionConditionWhereUniqueInput[]
    connect?: StatusChangeSubscriptionConditionWhereUniqueInput | StatusChangeSubscriptionConditionWhereUniqueInput[]
    update?: StatusChangeSubscriptionConditionUpdateWithWhereUniqueWithoutSubscriptionInput | StatusChangeSubscriptionConditionUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: StatusChangeSubscriptionConditionUpdateManyWithWhereWithoutSubscriptionInput | StatusChangeSubscriptionConditionUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: StatusChangeSubscriptionConditionScalarWhereInput | StatusChangeSubscriptionConditionScalarWhereInput[]
  }

  export type StatusChangeNotificationUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<StatusChangeNotificationCreateWithoutSubscriptionInput, StatusChangeNotificationUncheckedCreateWithoutSubscriptionInput> | StatusChangeNotificationCreateWithoutSubscriptionInput[] | StatusChangeNotificationUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: StatusChangeNotificationCreateOrConnectWithoutSubscriptionInput | StatusChangeNotificationCreateOrConnectWithoutSubscriptionInput[]
    upsert?: StatusChangeNotificationUpsertWithWhereUniqueWithoutSubscriptionInput | StatusChangeNotificationUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: StatusChangeNotificationCreateManySubscriptionInputEnvelope
    set?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
    disconnect?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
    delete?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
    connect?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
    update?: StatusChangeNotificationUpdateWithWhereUniqueWithoutSubscriptionInput | StatusChangeNotificationUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: StatusChangeNotificationUpdateManyWithWhereWithoutSubscriptionInput | StatusChangeNotificationUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: StatusChangeNotificationScalarWhereInput | StatusChangeNotificationScalarWhereInput[]
  }

  export type ProductSubscriptionUpdateOneRequiredWithoutDelegate_aux_statusChangeSubscriptionNestedInput = {
    create?: XOR<ProductSubscriptionCreateWithoutDelegate_aux_statusChangeSubscriptionInput, ProductSubscriptionUncheckedCreateWithoutDelegate_aux_statusChangeSubscriptionInput>
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutDelegate_aux_statusChangeSubscriptionInput
    upsert?: ProductSubscriptionUpsertWithoutDelegate_aux_statusChangeSubscriptionInput
    connect?: ProductSubscriptionWhereUniqueInput
    update?: XOR<XOR<ProductSubscriptionUpdateToOneWithWhereWithoutDelegate_aux_statusChangeSubscriptionInput, ProductSubscriptionUpdateWithoutDelegate_aux_statusChangeSubscriptionInput>, ProductSubscriptionUncheckedUpdateWithoutDelegate_aux_statusChangeSubscriptionInput>
  }

  export type StatusChangeSubscriptionConditionUncheckedUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<StatusChangeSubscriptionConditionCreateWithoutSubscriptionInput, StatusChangeSubscriptionConditionUncheckedCreateWithoutSubscriptionInput> | StatusChangeSubscriptionConditionCreateWithoutSubscriptionInput[] | StatusChangeSubscriptionConditionUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: StatusChangeSubscriptionConditionCreateOrConnectWithoutSubscriptionInput | StatusChangeSubscriptionConditionCreateOrConnectWithoutSubscriptionInput[]
    upsert?: StatusChangeSubscriptionConditionUpsertWithWhereUniqueWithoutSubscriptionInput | StatusChangeSubscriptionConditionUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: StatusChangeSubscriptionConditionCreateManySubscriptionInputEnvelope
    set?: StatusChangeSubscriptionConditionWhereUniqueInput | StatusChangeSubscriptionConditionWhereUniqueInput[]
    disconnect?: StatusChangeSubscriptionConditionWhereUniqueInput | StatusChangeSubscriptionConditionWhereUniqueInput[]
    delete?: StatusChangeSubscriptionConditionWhereUniqueInput | StatusChangeSubscriptionConditionWhereUniqueInput[]
    connect?: StatusChangeSubscriptionConditionWhereUniqueInput | StatusChangeSubscriptionConditionWhereUniqueInput[]
    update?: StatusChangeSubscriptionConditionUpdateWithWhereUniqueWithoutSubscriptionInput | StatusChangeSubscriptionConditionUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: StatusChangeSubscriptionConditionUpdateManyWithWhereWithoutSubscriptionInput | StatusChangeSubscriptionConditionUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: StatusChangeSubscriptionConditionScalarWhereInput | StatusChangeSubscriptionConditionScalarWhereInput[]
  }

  export type StatusChangeNotificationUncheckedUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<StatusChangeNotificationCreateWithoutSubscriptionInput, StatusChangeNotificationUncheckedCreateWithoutSubscriptionInput> | StatusChangeNotificationCreateWithoutSubscriptionInput[] | StatusChangeNotificationUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: StatusChangeNotificationCreateOrConnectWithoutSubscriptionInput | StatusChangeNotificationCreateOrConnectWithoutSubscriptionInput[]
    upsert?: StatusChangeNotificationUpsertWithWhereUniqueWithoutSubscriptionInput | StatusChangeNotificationUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: StatusChangeNotificationCreateManySubscriptionInputEnvelope
    set?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
    disconnect?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
    delete?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
    connect?: StatusChangeNotificationWhereUniqueInput | StatusChangeNotificationWhereUniqueInput[]
    update?: StatusChangeNotificationUpdateWithWhereUniqueWithoutSubscriptionInput | StatusChangeNotificationUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: StatusChangeNotificationUpdateManyWithWhereWithoutSubscriptionInput | StatusChangeNotificationUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: StatusChangeNotificationScalarWhereInput | StatusChangeNotificationScalarWhereInput[]
  }

  export type PriceChangeSubscriptionCreateconditionsInput = {
    set: $Enums.PriceChangeSubscriptionCondition[]
  }

  export type PriceChangeNotificationCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<PriceChangeNotificationCreateWithoutSubscriptionInput, PriceChangeNotificationUncheckedCreateWithoutSubscriptionInput> | PriceChangeNotificationCreateWithoutSubscriptionInput[] | PriceChangeNotificationUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: PriceChangeNotificationCreateOrConnectWithoutSubscriptionInput | PriceChangeNotificationCreateOrConnectWithoutSubscriptionInput[]
    createMany?: PriceChangeNotificationCreateManySubscriptionInputEnvelope
    connect?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
  }

  export type ProductSubscriptionCreateNestedOneWithoutDelegate_aux_priceChangeSubscriptionInput = {
    create?: XOR<ProductSubscriptionCreateWithoutDelegate_aux_priceChangeSubscriptionInput, ProductSubscriptionUncheckedCreateWithoutDelegate_aux_priceChangeSubscriptionInput>
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutDelegate_aux_priceChangeSubscriptionInput
    connect?: ProductSubscriptionWhereUniqueInput
  }

  export type PriceChangeNotificationUncheckedCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<PriceChangeNotificationCreateWithoutSubscriptionInput, PriceChangeNotificationUncheckedCreateWithoutSubscriptionInput> | PriceChangeNotificationCreateWithoutSubscriptionInput[] | PriceChangeNotificationUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: PriceChangeNotificationCreateOrConnectWithoutSubscriptionInput | PriceChangeNotificationCreateOrConnectWithoutSubscriptionInput[]
    createMany?: PriceChangeNotificationCreateManySubscriptionInputEnvelope
    connect?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
  }

  export type PriceChangeSubscriptionUpdateconditionsInput = {
    set?: $Enums.PriceChangeSubscriptionCondition[]
    push?: $Enums.PriceChangeSubscriptionCondition | $Enums.PriceChangeSubscriptionCondition[]
  }

  export type PriceChangeNotificationUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<PriceChangeNotificationCreateWithoutSubscriptionInput, PriceChangeNotificationUncheckedCreateWithoutSubscriptionInput> | PriceChangeNotificationCreateWithoutSubscriptionInput[] | PriceChangeNotificationUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: PriceChangeNotificationCreateOrConnectWithoutSubscriptionInput | PriceChangeNotificationCreateOrConnectWithoutSubscriptionInput[]
    upsert?: PriceChangeNotificationUpsertWithWhereUniqueWithoutSubscriptionInput | PriceChangeNotificationUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: PriceChangeNotificationCreateManySubscriptionInputEnvelope
    set?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
    disconnect?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
    delete?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
    connect?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
    update?: PriceChangeNotificationUpdateWithWhereUniqueWithoutSubscriptionInput | PriceChangeNotificationUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: PriceChangeNotificationUpdateManyWithWhereWithoutSubscriptionInput | PriceChangeNotificationUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: PriceChangeNotificationScalarWhereInput | PriceChangeNotificationScalarWhereInput[]
  }

  export type ProductSubscriptionUpdateOneRequiredWithoutDelegate_aux_priceChangeSubscriptionNestedInput = {
    create?: XOR<ProductSubscriptionCreateWithoutDelegate_aux_priceChangeSubscriptionInput, ProductSubscriptionUncheckedCreateWithoutDelegate_aux_priceChangeSubscriptionInput>
    connectOrCreate?: ProductSubscriptionCreateOrConnectWithoutDelegate_aux_priceChangeSubscriptionInput
    upsert?: ProductSubscriptionUpsertWithoutDelegate_aux_priceChangeSubscriptionInput
    connect?: ProductSubscriptionWhereUniqueInput
    update?: XOR<XOR<ProductSubscriptionUpdateToOneWithWhereWithoutDelegate_aux_priceChangeSubscriptionInput, ProductSubscriptionUpdateWithoutDelegate_aux_priceChangeSubscriptionInput>, ProductSubscriptionUncheckedUpdateWithoutDelegate_aux_priceChangeSubscriptionInput>
  }

  export type PriceChangeNotificationUncheckedUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<PriceChangeNotificationCreateWithoutSubscriptionInput, PriceChangeNotificationUncheckedCreateWithoutSubscriptionInput> | PriceChangeNotificationCreateWithoutSubscriptionInput[] | PriceChangeNotificationUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: PriceChangeNotificationCreateOrConnectWithoutSubscriptionInput | PriceChangeNotificationCreateOrConnectWithoutSubscriptionInput[]
    upsert?: PriceChangeNotificationUpsertWithWhereUniqueWithoutSubscriptionInput | PriceChangeNotificationUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: PriceChangeNotificationCreateManySubscriptionInputEnvelope
    set?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
    disconnect?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
    delete?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
    connect?: PriceChangeNotificationWhereUniqueInput | PriceChangeNotificationWhereUniqueInput[]
    update?: PriceChangeNotificationUpdateWithWhereUniqueWithoutSubscriptionInput | PriceChangeNotificationUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: PriceChangeNotificationUpdateManyWithWhereWithoutSubscriptionInput | PriceChangeNotificationUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: PriceChangeNotificationScalarWhereInput | PriceChangeNotificationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedNotificationsInput = {
    create?: XOR<UserCreateWithoutCreatedNotificationsInput, UserUncheckedCreateWithoutCreatedNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedNotificationsInput = {
    create?: XOR<UserCreateWithoutUpdatedNotificationsInput, UserUncheckedCreateWithoutUpdatedNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type PriceChangeNotificationCreateNestedOneWithoutDelegate_aux_notificationInput = {
    create?: XOR<PriceChangeNotificationCreateWithoutDelegate_aux_notificationInput, PriceChangeNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
    connectOrCreate?: PriceChangeNotificationCreateOrConnectWithoutDelegate_aux_notificationInput
    connect?: PriceChangeNotificationWhereUniqueInput
  }

  export type StatusChangeNotificationCreateNestedOneWithoutDelegate_aux_notificationInput = {
    create?: XOR<StatusChangeNotificationCreateWithoutDelegate_aux_notificationInput, StatusChangeNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
    connectOrCreate?: StatusChangeNotificationCreateOrConnectWithoutDelegate_aux_notificationInput
    connect?: StatusChangeNotificationWhereUniqueInput
  }

  export type NewProductNotificationCreateNestedOneWithoutDelegate_aux_notificationInput = {
    create?: XOR<NewProductNotificationCreateWithoutDelegate_aux_notificationInput, NewProductNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
    connectOrCreate?: NewProductNotificationCreateOrConnectWithoutDelegate_aux_notificationInput
    connect?: NewProductNotificationWhereUniqueInput
  }

  export type PriceChangeNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput = {
    create?: XOR<PriceChangeNotificationCreateWithoutDelegate_aux_notificationInput, PriceChangeNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
    connectOrCreate?: PriceChangeNotificationCreateOrConnectWithoutDelegate_aux_notificationInput
    connect?: PriceChangeNotificationWhereUniqueInput
  }

  export type StatusChangeNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput = {
    create?: XOR<StatusChangeNotificationCreateWithoutDelegate_aux_notificationInput, StatusChangeNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
    connectOrCreate?: StatusChangeNotificationCreateOrConnectWithoutDelegate_aux_notificationInput
    connect?: StatusChangeNotificationWhereUniqueInput
  }

  export type NewProductNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput = {
    create?: XOR<NewProductNotificationCreateWithoutDelegate_aux_notificationInput, NewProductNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
    connectOrCreate?: NewProductNotificationCreateOrConnectWithoutDelegate_aux_notificationInput
    connect?: NewProductNotificationWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type EnumNotificationStateFieldUpdateOperationsInput = {
    set?: $Enums.NotificationState
  }

  export type UserUpdateOneRequiredWithoutCreatedNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedNotificationsInput, UserUncheckedCreateWithoutCreatedNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedNotificationsInput
    upsert?: UserUpsertWithoutCreatedNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedNotificationsInput, UserUpdateWithoutCreatedNotificationsInput>, UserUncheckedUpdateWithoutCreatedNotificationsInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedNotificationsInput, UserUncheckedCreateWithoutUpdatedNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedNotificationsInput
    upsert?: UserUpsertWithoutUpdatedNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedNotificationsInput, UserUpdateWithoutUpdatedNotificationsInput>, UserUncheckedUpdateWithoutUpdatedNotificationsInput>
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type PriceChangeNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput = {
    create?: XOR<PriceChangeNotificationCreateWithoutDelegate_aux_notificationInput, PriceChangeNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
    connectOrCreate?: PriceChangeNotificationCreateOrConnectWithoutDelegate_aux_notificationInput
    upsert?: PriceChangeNotificationUpsertWithoutDelegate_aux_notificationInput
    disconnect?: PriceChangeNotificationWhereInput | boolean
    delete?: PriceChangeNotificationWhereInput | boolean
    connect?: PriceChangeNotificationWhereUniqueInput
    update?: XOR<XOR<PriceChangeNotificationUpdateToOneWithWhereWithoutDelegate_aux_notificationInput, PriceChangeNotificationUpdateWithoutDelegate_aux_notificationInput>, PriceChangeNotificationUncheckedUpdateWithoutDelegate_aux_notificationInput>
  }

  export type StatusChangeNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput = {
    create?: XOR<StatusChangeNotificationCreateWithoutDelegate_aux_notificationInput, StatusChangeNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
    connectOrCreate?: StatusChangeNotificationCreateOrConnectWithoutDelegate_aux_notificationInput
    upsert?: StatusChangeNotificationUpsertWithoutDelegate_aux_notificationInput
    disconnect?: StatusChangeNotificationWhereInput | boolean
    delete?: StatusChangeNotificationWhereInput | boolean
    connect?: StatusChangeNotificationWhereUniqueInput
    update?: XOR<XOR<StatusChangeNotificationUpdateToOneWithWhereWithoutDelegate_aux_notificationInput, StatusChangeNotificationUpdateWithoutDelegate_aux_notificationInput>, StatusChangeNotificationUncheckedUpdateWithoutDelegate_aux_notificationInput>
  }

  export type NewProductNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput = {
    create?: XOR<NewProductNotificationCreateWithoutDelegate_aux_notificationInput, NewProductNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
    connectOrCreate?: NewProductNotificationCreateOrConnectWithoutDelegate_aux_notificationInput
    upsert?: NewProductNotificationUpsertWithoutDelegate_aux_notificationInput
    disconnect?: NewProductNotificationWhereInput | boolean
    delete?: NewProductNotificationWhereInput | boolean
    connect?: NewProductNotificationWhereUniqueInput
    update?: XOR<XOR<NewProductNotificationUpdateToOneWithWhereWithoutDelegate_aux_notificationInput, NewProductNotificationUpdateWithoutDelegate_aux_notificationInput>, NewProductNotificationUncheckedUpdateWithoutDelegate_aux_notificationInput>
  }

  export type PriceChangeNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput = {
    create?: XOR<PriceChangeNotificationCreateWithoutDelegate_aux_notificationInput, PriceChangeNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
    connectOrCreate?: PriceChangeNotificationCreateOrConnectWithoutDelegate_aux_notificationInput
    upsert?: PriceChangeNotificationUpsertWithoutDelegate_aux_notificationInput
    disconnect?: PriceChangeNotificationWhereInput | boolean
    delete?: PriceChangeNotificationWhereInput | boolean
    connect?: PriceChangeNotificationWhereUniqueInput
    update?: XOR<XOR<PriceChangeNotificationUpdateToOneWithWhereWithoutDelegate_aux_notificationInput, PriceChangeNotificationUpdateWithoutDelegate_aux_notificationInput>, PriceChangeNotificationUncheckedUpdateWithoutDelegate_aux_notificationInput>
  }

  export type StatusChangeNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput = {
    create?: XOR<StatusChangeNotificationCreateWithoutDelegate_aux_notificationInput, StatusChangeNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
    connectOrCreate?: StatusChangeNotificationCreateOrConnectWithoutDelegate_aux_notificationInput
    upsert?: StatusChangeNotificationUpsertWithoutDelegate_aux_notificationInput
    disconnect?: StatusChangeNotificationWhereInput | boolean
    delete?: StatusChangeNotificationWhereInput | boolean
    connect?: StatusChangeNotificationWhereUniqueInput
    update?: XOR<XOR<StatusChangeNotificationUpdateToOneWithWhereWithoutDelegate_aux_notificationInput, StatusChangeNotificationUpdateWithoutDelegate_aux_notificationInput>, StatusChangeNotificationUncheckedUpdateWithoutDelegate_aux_notificationInput>
  }

  export type NewProductNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput = {
    create?: XOR<NewProductNotificationCreateWithoutDelegate_aux_notificationInput, NewProductNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
    connectOrCreate?: NewProductNotificationCreateOrConnectWithoutDelegate_aux_notificationInput
    upsert?: NewProductNotificationUpsertWithoutDelegate_aux_notificationInput
    disconnect?: NewProductNotificationWhereInput | boolean
    delete?: NewProductNotificationWhereInput | boolean
    connect?: NewProductNotificationWhereUniqueInput
    update?: XOR<XOR<NewProductNotificationUpdateToOneWithWhereWithoutDelegate_aux_notificationInput, NewProductNotificationUpdateWithoutDelegate_aux_notificationInput>, NewProductNotificationUncheckedUpdateWithoutDelegate_aux_notificationInput>
  }

  export type ProductRecordCreateNestedOneWithoutPriceChangeNotificationsInput = {
    create?: XOR<ProductRecordCreateWithoutPriceChangeNotificationsInput, ProductRecordUncheckedCreateWithoutPriceChangeNotificationsInput>
    connectOrCreate?: ProductRecordCreateOrConnectWithoutPriceChangeNotificationsInput
    connect?: ProductRecordWhereUniqueInput
  }

  export type PriceChangeSubscriptionCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<PriceChangeSubscriptionCreateWithoutNotificationsInput, PriceChangeSubscriptionUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: PriceChangeSubscriptionCreateOrConnectWithoutNotificationsInput
    connect?: PriceChangeSubscriptionWhereUniqueInput
  }

  export type NotificationCreateNestedOneWithoutDelegate_aux_priceChangeNotificationInput = {
    create?: XOR<NotificationCreateWithoutDelegate_aux_priceChangeNotificationInput, NotificationUncheckedCreateWithoutDelegate_aux_priceChangeNotificationInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutDelegate_aux_priceChangeNotificationInput
    connect?: NotificationWhereUniqueInput
  }

  export type EnumPriceChangeSubscriptionConditionFieldUpdateOperationsInput = {
    set?: $Enums.PriceChangeSubscriptionCondition
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductRecordUpdateOneRequiredWithoutPriceChangeNotificationsNestedInput = {
    create?: XOR<ProductRecordCreateWithoutPriceChangeNotificationsInput, ProductRecordUncheckedCreateWithoutPriceChangeNotificationsInput>
    connectOrCreate?: ProductRecordCreateOrConnectWithoutPriceChangeNotificationsInput
    upsert?: ProductRecordUpsertWithoutPriceChangeNotificationsInput
    connect?: ProductRecordWhereUniqueInput
    update?: XOR<XOR<ProductRecordUpdateToOneWithWhereWithoutPriceChangeNotificationsInput, ProductRecordUpdateWithoutPriceChangeNotificationsInput>, ProductRecordUncheckedUpdateWithoutPriceChangeNotificationsInput>
  }

  export type PriceChangeSubscriptionUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<PriceChangeSubscriptionCreateWithoutNotificationsInput, PriceChangeSubscriptionUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: PriceChangeSubscriptionCreateOrConnectWithoutNotificationsInput
    upsert?: PriceChangeSubscriptionUpsertWithoutNotificationsInput
    connect?: PriceChangeSubscriptionWhereUniqueInput
    update?: XOR<XOR<PriceChangeSubscriptionUpdateToOneWithWhereWithoutNotificationsInput, PriceChangeSubscriptionUpdateWithoutNotificationsInput>, PriceChangeSubscriptionUncheckedUpdateWithoutNotificationsInput>
  }

  export type NotificationUpdateOneRequiredWithoutDelegate_aux_priceChangeNotificationNestedInput = {
    create?: XOR<NotificationCreateWithoutDelegate_aux_priceChangeNotificationInput, NotificationUncheckedCreateWithoutDelegate_aux_priceChangeNotificationInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutDelegate_aux_priceChangeNotificationInput
    upsert?: NotificationUpsertWithoutDelegate_aux_priceChangeNotificationInput
    connect?: NotificationWhereUniqueInput
    update?: XOR<XOR<NotificationUpdateToOneWithWhereWithoutDelegate_aux_priceChangeNotificationInput, NotificationUpdateWithoutDelegate_aux_priceChangeNotificationInput>, NotificationUncheckedUpdateWithoutDelegate_aux_priceChangeNotificationInput>
  }

  export type ProductRecordCreateNestedOneWithoutStatusChangeNotificationsInput = {
    create?: XOR<ProductRecordCreateWithoutStatusChangeNotificationsInput, ProductRecordUncheckedCreateWithoutStatusChangeNotificationsInput>
    connectOrCreate?: ProductRecordCreateOrConnectWithoutStatusChangeNotificationsInput
    connect?: ProductRecordWhereUniqueInput
  }

  export type StatusChangeSubscriptionCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<StatusChangeSubscriptionCreateWithoutNotificationsInput, StatusChangeSubscriptionUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: StatusChangeSubscriptionCreateOrConnectWithoutNotificationsInput
    connect?: StatusChangeSubscriptionWhereUniqueInput
  }

  export type NotificationCreateNestedOneWithoutDelegate_aux_statusChangeNotificationInput = {
    create?: XOR<NotificationCreateWithoutDelegate_aux_statusChangeNotificationInput, NotificationUncheckedCreateWithoutDelegate_aux_statusChangeNotificationInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutDelegate_aux_statusChangeNotificationInput
    connect?: NotificationWhereUniqueInput
  }

  export type EnumProductStatusFieldUpdateOperationsInput = {
    set?: $Enums.ProductStatus
  }

  export type ProductRecordUpdateOneRequiredWithoutStatusChangeNotificationsNestedInput = {
    create?: XOR<ProductRecordCreateWithoutStatusChangeNotificationsInput, ProductRecordUncheckedCreateWithoutStatusChangeNotificationsInput>
    connectOrCreate?: ProductRecordCreateOrConnectWithoutStatusChangeNotificationsInput
    upsert?: ProductRecordUpsertWithoutStatusChangeNotificationsInput
    connect?: ProductRecordWhereUniqueInput
    update?: XOR<XOR<ProductRecordUpdateToOneWithWhereWithoutStatusChangeNotificationsInput, ProductRecordUpdateWithoutStatusChangeNotificationsInput>, ProductRecordUncheckedUpdateWithoutStatusChangeNotificationsInput>
  }

  export type StatusChangeSubscriptionUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<StatusChangeSubscriptionCreateWithoutNotificationsInput, StatusChangeSubscriptionUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: StatusChangeSubscriptionCreateOrConnectWithoutNotificationsInput
    upsert?: StatusChangeSubscriptionUpsertWithoutNotificationsInput
    connect?: StatusChangeSubscriptionWhereUniqueInput
    update?: XOR<XOR<StatusChangeSubscriptionUpdateToOneWithWhereWithoutNotificationsInput, StatusChangeSubscriptionUpdateWithoutNotificationsInput>, StatusChangeSubscriptionUncheckedUpdateWithoutNotificationsInput>
  }

  export type NotificationUpdateOneRequiredWithoutDelegate_aux_statusChangeNotificationNestedInput = {
    create?: XOR<NotificationCreateWithoutDelegate_aux_statusChangeNotificationInput, NotificationUncheckedCreateWithoutDelegate_aux_statusChangeNotificationInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutDelegate_aux_statusChangeNotificationInput
    upsert?: NotificationUpsertWithoutDelegate_aux_statusChangeNotificationInput
    connect?: NotificationWhereUniqueInput
    update?: XOR<XOR<NotificationUpdateToOneWithWhereWithoutDelegate_aux_statusChangeNotificationInput, NotificationUpdateWithoutDelegate_aux_statusChangeNotificationInput>, NotificationUncheckedUpdateWithoutDelegate_aux_statusChangeNotificationInput>
  }

  export type ProductCreateNestedOneWithoutNewProductNotificationsInput = {
    create?: XOR<ProductCreateWithoutNewProductNotificationsInput, ProductUncheckedCreateWithoutNewProductNotificationsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutNewProductNotificationsInput
    connect?: ProductWhereUniqueInput
  }

  export type NotificationCreateNestedOneWithoutDelegate_aux_newProductNotificationInput = {
    create?: XOR<NotificationCreateWithoutDelegate_aux_newProductNotificationInput, NotificationUncheckedCreateWithoutDelegate_aux_newProductNotificationInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutDelegate_aux_newProductNotificationInput
    connect?: NotificationWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutNewProductNotificationsNestedInput = {
    create?: XOR<ProductCreateWithoutNewProductNotificationsInput, ProductUncheckedCreateWithoutNewProductNotificationsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutNewProductNotificationsInput
    upsert?: ProductUpsertWithoutNewProductNotificationsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutNewProductNotificationsInput, ProductUpdateWithoutNewProductNotificationsInput>, ProductUncheckedUpdateWithoutNewProductNotificationsInput>
  }

  export type NotificationUpdateOneRequiredWithoutDelegate_aux_newProductNotificationNestedInput = {
    create?: XOR<NotificationCreateWithoutDelegate_aux_newProductNotificationInput, NotificationUncheckedCreateWithoutDelegate_aux_newProductNotificationInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutDelegate_aux_newProductNotificationInput
    upsert?: NotificationUpsertWithoutDelegate_aux_newProductNotificationInput
    connect?: NotificationWhereUniqueInput
    update?: XOR<XOR<NotificationUpdateToOneWithWhereWithoutDelegate_aux_newProductNotificationInput, NotificationUpdateWithoutDelegate_aux_newProductNotificationInput>, NotificationUncheckedUpdateWithoutDelegate_aux_newProductNotificationInput>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumElementAttributeFilter<$PrismaModel = never> = {
    equals?: $Enums.ElementAttribute | EnumElementAttributeFieldRefInput<$PrismaModel>
    in?: $Enums.ElementAttribute[] | ListEnumElementAttributeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ElementAttribute[] | ListEnumElementAttributeFieldRefInput<$PrismaModel>
    not?: NestedEnumElementAttributeFilter<$PrismaModel> | $Enums.ElementAttribute
  }

  export type NestedEnumElementAttributeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ElementAttribute | EnumElementAttributeFieldRefInput<$PrismaModel>
    in?: $Enums.ElementAttribute[] | ListEnumElementAttributeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ElementAttribute[] | ListEnumElementAttributeFieldRefInput<$PrismaModel>
    not?: NestedEnumElementAttributeWithAggregatesFilter<$PrismaModel> | $Enums.ElementAttribute
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumElementAttributeFilter<$PrismaModel>
    _max?: NestedEnumElementAttributeFilter<$PrismaModel>
  }

  export type NestedEnumScrapingErrorCodeFilter<$PrismaModel = never> = {
    equals?: $Enums.ScrapingErrorCode | EnumScrapingErrorCodeFieldRefInput<$PrismaModel>
    in?: $Enums.ScrapingErrorCode[] | ListEnumScrapingErrorCodeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScrapingErrorCode[] | ListEnumScrapingErrorCodeFieldRefInput<$PrismaModel>
    not?: NestedEnumScrapingErrorCodeFilter<$PrismaModel> | $Enums.ScrapingErrorCode
  }

  export type NestedEnumProductRecordDataFieldFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductRecordDataField | EnumProductRecordDataFieldFieldRefInput<$PrismaModel>
    in?: $Enums.ProductRecordDataField[] | ListEnumProductRecordDataFieldFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductRecordDataField[] | ListEnumProductRecordDataFieldFieldRefInput<$PrismaModel>
    not?: NestedEnumProductRecordDataFieldFilter<$PrismaModel> | $Enums.ProductRecordDataField
  }

  export type NestedEnumScrapingErrorCodeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ScrapingErrorCode | EnumScrapingErrorCodeFieldRefInput<$PrismaModel>
    in?: $Enums.ScrapingErrorCode[] | ListEnumScrapingErrorCodeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ScrapingErrorCode[] | ListEnumScrapingErrorCodeFieldRefInput<$PrismaModel>
    not?: NestedEnumScrapingErrorCodeWithAggregatesFilter<$PrismaModel> | $Enums.ScrapingErrorCode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScrapingErrorCodeFilter<$PrismaModel>
    _max?: NestedEnumScrapingErrorCodeFilter<$PrismaModel>
  }

  export type NestedEnumProductRecordDataFieldWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductRecordDataField | EnumProductRecordDataFieldFieldRefInput<$PrismaModel>
    in?: $Enums.ProductRecordDataField[] | ListEnumProductRecordDataFieldFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductRecordDataField[] | ListEnumProductRecordDataFieldFieldRefInput<$PrismaModel>
    not?: NestedEnumProductRecordDataFieldWithAggregatesFilter<$PrismaModel> | $Enums.ProductRecordDataField
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductRecordDataFieldFilter<$PrismaModel>
    _max?: NestedEnumProductRecordDataFieldFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumProductStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductStatus | EnumProductStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProductStatusNullableFilter<$PrismaModel> | $Enums.ProductStatus | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumProductStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductStatus | EnumProductStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProductStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.ProductStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumProductStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumProductStatusNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumProductCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductCategory | EnumProductCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ProductCategory[] | ListEnumProductCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductCategory[] | ListEnumProductCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumProductCategoryFilter<$PrismaModel> | $Enums.ProductCategory
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumProductCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductCategory | EnumProductCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ProductCategory[] | ListEnumProductCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductCategory[] | ListEnumProductCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumProductCategoryWithAggregatesFilter<$PrismaModel> | $Enums.ProductCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductCategoryFilter<$PrismaModel>
    _max?: NestedEnumProductCategoryFilter<$PrismaModel>
  }

  export type NestedEnumSubscriptionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionType | EnumSubscriptionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionType[] | ListEnumSubscriptionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionType[] | ListEnumSubscriptionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionTypeFilter<$PrismaModel> | $Enums.SubscriptionType
  }

  export type NestedEnumSubscriptionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionType | EnumSubscriptionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionType[] | ListEnumSubscriptionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionType[] | ListEnumSubscriptionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionTypeWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionTypeFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionTypeFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationStateFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationState | EnumNotificationStateFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationState[] | ListEnumNotificationStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationState[] | ListEnumNotificationStateFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStateFilter<$PrismaModel> | $Enums.NotificationState
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumNotificationStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationState | EnumNotificationStateFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationState[] | ListEnumNotificationStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationState[] | ListEnumNotificationStateFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStateWithAggregatesFilter<$PrismaModel> | $Enums.NotificationState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationStateFilter<$PrismaModel>
    _max?: NestedEnumNotificationStateFilter<$PrismaModel>
  }

  export type NestedEnumPriceChangeSubscriptionConditionFilter<$PrismaModel = never> = {
    equals?: $Enums.PriceChangeSubscriptionCondition | EnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel>
    in?: $Enums.PriceChangeSubscriptionCondition[] | ListEnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel>
    notIn?: $Enums.PriceChangeSubscriptionCondition[] | ListEnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel>
    not?: NestedEnumPriceChangeSubscriptionConditionFilter<$PrismaModel> | $Enums.PriceChangeSubscriptionCondition
  }

  export type NestedEnumPriceChangeSubscriptionConditionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PriceChangeSubscriptionCondition | EnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel>
    in?: $Enums.PriceChangeSubscriptionCondition[] | ListEnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel>
    notIn?: $Enums.PriceChangeSubscriptionCondition[] | ListEnumPriceChangeSubscriptionConditionFieldRefInput<$PrismaModel>
    not?: NestedEnumPriceChangeSubscriptionConditionWithAggregatesFilter<$PrismaModel> | $Enums.PriceChangeSubscriptionCondition
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriceChangeSubscriptionConditionFilter<$PrismaModel>
    _max?: NestedEnumPriceChangeSubscriptionConditionFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumProductStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductStatus | EnumProductStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProductStatusFilter<$PrismaModel> | $Enums.ProductStatus
  }

  export type NestedEnumProductStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductStatus | EnumProductStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductStatus[] | ListEnumProductStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProductStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProductStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductStatusFilter<$PrismaModel>
    _max?: NestedEnumProductStatusFilter<$PrismaModel>
  }

  export type ProductCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name?: string | null
    slug: string
    code?: string | null
    imageSrc?: string | null
    status?: $Enums.ProductStatus | null
    statusLastUpdatedAt?: Date | string | null
    statusAsOf?: Date | string | null
    price?: number | null
    priceLastUpdatedAt?: Date | string | null
    priceAsOf?: Date | string | null
    category: $Enums.ProductCategory
    subCategories?: ProductCreatesubCategoriesInput | $Enums.ProductSubCategory[]
    updatedBy: UserCreateNestedOneWithoutUpdatedProductsInput
    records?: ProductRecordCreateNestedManyWithoutProductInput
    subscriptions?: ProductSubscriptionCreateNestedManyWithoutProductInput
    newProductNotifications?: NewProductNotificationCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    name?: string | null
    slug: string
    code?: string | null
    imageSrc?: string | null
    status?: $Enums.ProductStatus | null
    statusLastUpdatedAt?: Date | string | null
    statusAsOf?: Date | string | null
    price?: number | null
    priceLastUpdatedAt?: Date | string | null
    priceAsOf?: Date | string | null
    category: $Enums.ProductCategory
    subCategories?: ProductCreatesubCategoriesInput | $Enums.ProductSubCategory[]
    records?: ProductRecordUncheckedCreateNestedManyWithoutProductInput
    subscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutProductInput
    newProductNotifications?: NewProductNotificationUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCreatedByInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput>
  }

  export type ProductCreateManyCreatedByInputEnvelope = {
    data: ProductCreateManyCreatedByInput | ProductCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProductCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name?: string | null
    slug: string
    code?: string | null
    imageSrc?: string | null
    status?: $Enums.ProductStatus | null
    statusLastUpdatedAt?: Date | string | null
    statusAsOf?: Date | string | null
    price?: number | null
    priceLastUpdatedAt?: Date | string | null
    priceAsOf?: Date | string | null
    category: $Enums.ProductCategory
    subCategories?: ProductCreatesubCategoriesInput | $Enums.ProductSubCategory[]
    createdBy: UserCreateNestedOneWithoutCreatedProductsInput
    records?: ProductRecordCreateNestedManyWithoutProductInput
    subscriptions?: ProductSubscriptionCreateNestedManyWithoutProductInput
    newProductNotifications?: NewProductNotificationCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    name?: string | null
    slug: string
    code?: string | null
    imageSrc?: string | null
    status?: $Enums.ProductStatus | null
    statusLastUpdatedAt?: Date | string | null
    statusAsOf?: Date | string | null
    price?: number | null
    priceLastUpdatedAt?: Date | string | null
    priceAsOf?: Date | string | null
    category: $Enums.ProductCategory
    subCategories?: ProductCreatesubCategoriesInput | $Enums.ProductSubCategory[]
    records?: ProductRecordUncheckedCreateNestedManyWithoutProductInput
    subscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutProductInput
    newProductNotifications?: NewProductNotificationUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutUpdatedByInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutUpdatedByInput, ProductUncheckedCreateWithoutUpdatedByInput>
  }

  export type ProductCreateManyUpdatedByInputEnvelope = {
    data: ProductCreateManyUpdatedByInput | ProductCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProductRecordCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timestamp?: Date | string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    updatedBy: UserCreateNestedOneWithoutUpdatedProductRecordsInput
    product: ProductCreateNestedOneWithoutRecordsInput
    errors?: ProductRecordErrorCreateNestedManyWithoutRecordInput
    statusChangeNotifications?: StatusChangeNotificationCreateNestedManyWithoutProductRecordInput
    priceChangeNotifications?: PriceChangeNotificationCreateNestedManyWithoutProductRecordInput
    processedRecords?: ProcessedProductRecordCreateNestedManyWithoutRecordInput
  }

  export type ProductRecordUncheckedCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    timestamp?: Date | string
    productId: string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    errors?: ProductRecordErrorUncheckedCreateNestedManyWithoutRecordInput
    statusChangeNotifications?: StatusChangeNotificationUncheckedCreateNestedManyWithoutProductRecordInput
    priceChangeNotifications?: PriceChangeNotificationUncheckedCreateNestedManyWithoutProductRecordInput
    processedRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutRecordInput
  }

  export type ProductRecordCreateOrConnectWithoutCreatedByInput = {
    where: ProductRecordWhereUniqueInput
    create: XOR<ProductRecordCreateWithoutCreatedByInput, ProductRecordUncheckedCreateWithoutCreatedByInput>
  }

  export type ProductRecordCreateManyCreatedByInputEnvelope = {
    data: ProductRecordCreateManyCreatedByInput | ProductRecordCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProductRecordCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timestamp?: Date | string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    createdBy: UserCreateNestedOneWithoutCreatedProductRecordsInput
    product: ProductCreateNestedOneWithoutRecordsInput
    errors?: ProductRecordErrorCreateNestedManyWithoutRecordInput
    statusChangeNotifications?: StatusChangeNotificationCreateNestedManyWithoutProductRecordInput
    priceChangeNotifications?: PriceChangeNotificationCreateNestedManyWithoutProductRecordInput
    processedRecords?: ProcessedProductRecordCreateNestedManyWithoutRecordInput
  }

  export type ProductRecordUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    timestamp?: Date | string
    productId: string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    errors?: ProductRecordErrorUncheckedCreateNestedManyWithoutRecordInput
    statusChangeNotifications?: StatusChangeNotificationUncheckedCreateNestedManyWithoutProductRecordInput
    priceChangeNotifications?: PriceChangeNotificationUncheckedCreateNestedManyWithoutProductRecordInput
    processedRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutRecordInput
  }

  export type ProductRecordCreateOrConnectWithoutUpdatedByInput = {
    where: ProductRecordWhereUniqueInput
    create: XOR<ProductRecordCreateWithoutUpdatedByInput, ProductRecordUncheckedCreateWithoutUpdatedByInput>
  }

  export type ProductRecordCreateManyUpdatedByInputEnvelope = {
    data: ProductRecordCreateManyUpdatedByInput | ProductRecordCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProductSubscriptionCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionType: $Enums.SubscriptionType
    enabled?: boolean
    updatedBy: UserCreateNestedOneWithoutUpdatedProductSubscriptionsInput
    user: UserCreateNestedOneWithoutProductSubscriptionsInput
    product: ProductCreateNestedOneWithoutSubscriptionsInput
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
  }

  export type ProductSubscriptionUncheckedCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    subscriptionType: $Enums.SubscriptionType
    userId: string
    productId: string
    enabled?: boolean
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUncheckedCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUncheckedCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
  }

  export type ProductSubscriptionCreateOrConnectWithoutCreatedByInput = {
    where: ProductSubscriptionWhereUniqueInput
    create: XOR<ProductSubscriptionCreateWithoutCreatedByInput, ProductSubscriptionUncheckedCreateWithoutCreatedByInput>
  }

  export type ProductSubscriptionCreateManyCreatedByInputEnvelope = {
    data: ProductSubscriptionCreateManyCreatedByInput | ProductSubscriptionCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProductSubscriptionCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionType: $Enums.SubscriptionType
    enabled?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedProductSubscriptionsInput
    user: UserCreateNestedOneWithoutProductSubscriptionsInput
    product: ProductCreateNestedOneWithoutSubscriptionsInput
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
  }

  export type ProductSubscriptionUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    subscriptionType: $Enums.SubscriptionType
    userId: string
    productId: string
    enabled?: boolean
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUncheckedCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUncheckedCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
  }

  export type ProductSubscriptionCreateOrConnectWithoutUpdatedByInput = {
    where: ProductSubscriptionWhereUniqueInput
    create: XOR<ProductSubscriptionCreateWithoutUpdatedByInput, ProductSubscriptionUncheckedCreateWithoutUpdatedByInput>
  }

  export type ProductSubscriptionCreateManyUpdatedByInputEnvelope = {
    data: ProductSubscriptionCreateManyUpdatedByInput | ProductSubscriptionCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProductSubscriptionCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionType: $Enums.SubscriptionType
    enabled?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedProductSubscriptionsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProductSubscriptionsInput
    product: ProductCreateNestedOneWithoutSubscriptionsInput
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
  }

  export type ProductSubscriptionUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    subscriptionType: $Enums.SubscriptionType
    productId: string
    enabled?: boolean
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUncheckedCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUncheckedCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
  }

  export type ProductSubscriptionCreateOrConnectWithoutUserInput = {
    where: ProductSubscriptionWhereUniqueInput
    create: XOR<ProductSubscriptionCreateWithoutUserInput, ProductSubscriptionUncheckedCreateWithoutUserInput>
  }

  export type ProductSubscriptionCreateManyUserInputEnvelope = {
    data: ProductSubscriptionCreateManyUserInput | ProductSubscriptionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
    updatedBy: UserCreateNestedOneWithoutUpdatedNotificationsInput
    user: UserCreateNestedOneWithoutNotificationsInput
    delegate_aux_priceChangeNotification?: PriceChangeNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_newProductNotification?: NewProductNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
  }

  export type NotificationUncheckedCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    userId: string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_newProductNotification?: NewProductNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
  }

  export type NotificationCreateOrConnectWithoutCreatedByInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutCreatedByInput, NotificationUncheckedCreateWithoutCreatedByInput>
  }

  export type NotificationCreateManyCreatedByInputEnvelope = {
    data: NotificationCreateManyCreatedByInput | NotificationCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedNotificationsInput
    user: UserCreateNestedOneWithoutNotificationsInput
    delegate_aux_priceChangeNotification?: PriceChangeNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_newProductNotification?: NewProductNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
  }

  export type NotificationUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    userId: string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_newProductNotification?: NewProductNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
  }

  export type NotificationCreateOrConnectWithoutUpdatedByInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUpdatedByInput, NotificationUncheckedCreateWithoutUpdatedByInput>
  }

  export type NotificationCreateManyUpdatedByInputEnvelope = {
    data: NotificationCreateManyUpdatedByInput | NotificationCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedNotificationsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedNotificationsInput
    delegate_aux_priceChangeNotification?: PriceChangeNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_newProductNotification?: NewProductNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_newProductNotification?: NewProductNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProcessedProductRecordCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedBy: UserCreateNestedOneWithoutUpdatedProcessedProductRecordsInput
    record: ProductRecordCreateNestedOneWithoutProcessedRecordsInput
    user: UserCreateNestedOneWithoutProcessedProductRecordsInput
  }

  export type ProcessedProductRecordUncheckedCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    recordId: string
    userId: string
  }

  export type ProcessedProductRecordCreateOrConnectWithoutCreatedByInput = {
    where: ProcessedProductRecordWhereUniqueInput
    create: XOR<ProcessedProductRecordCreateWithoutCreatedByInput, ProcessedProductRecordUncheckedCreateWithoutCreatedByInput>
  }

  export type ProcessedProductRecordCreateManyCreatedByInputEnvelope = {
    data: ProcessedProductRecordCreateManyCreatedByInput | ProcessedProductRecordCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProcessedProductRecordCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedProcessedProductRecordsInput
    record: ProductRecordCreateNestedOneWithoutProcessedRecordsInput
    user: UserCreateNestedOneWithoutProcessedProductRecordsInput
  }

  export type ProcessedProductRecordUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    recordId: string
    userId: string
  }

  export type ProcessedProductRecordCreateOrConnectWithoutUpdatedByInput = {
    where: ProcessedProductRecordWhereUniqueInput
    create: XOR<ProcessedProductRecordCreateWithoutUpdatedByInput, ProcessedProductRecordUncheckedCreateWithoutUpdatedByInput>
  }

  export type ProcessedProductRecordCreateManyUpdatedByInputEnvelope = {
    data: ProcessedProductRecordCreateManyUpdatedByInput | ProcessedProductRecordCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProcessedProductRecordCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedProcessedProductRecordsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProcessedProductRecordsInput
    record: ProductRecordCreateNestedOneWithoutProcessedRecordsInput
  }

  export type ProcessedProductRecordUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    recordId: string
  }

  export type ProcessedProductRecordCreateOrConnectWithoutUserInput = {
    where: ProcessedProductRecordWhereUniqueInput
    create: XOR<ProcessedProductRecordCreateWithoutUserInput, ProcessedProductRecordUncheckedCreateWithoutUserInput>
  }

  export type ProcessedProductRecordCreateManyUserInputEnvelope = {
    data: ProcessedProductRecordCreateManyUserInput | ProcessedProductRecordCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutCreatedByInput, ProductUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutCreatedByInput, ProductUncheckedUpdateWithoutCreatedByInput>
  }

  export type ProductUpdateManyWithWhereWithoutCreatedByInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: UuidFilter<"Product"> | string
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    createdById?: UuidFilter<"Product"> | string
    updatedById?: UuidFilter<"Product"> | string
    name?: StringNullableFilter<"Product"> | string | null
    slug?: StringFilter<"Product"> | string
    code?: StringNullableFilter<"Product"> | string | null
    imageSrc?: StringNullableFilter<"Product"> | string | null
    status?: EnumProductStatusNullableFilter<"Product"> | $Enums.ProductStatus | null
    statusLastUpdatedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    statusAsOf?: DateTimeNullableFilter<"Product"> | Date | string | null
    price?: FloatNullableFilter<"Product"> | number | null
    priceLastUpdatedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    priceAsOf?: DateTimeNullableFilter<"Product"> | Date | string | null
    category?: EnumProductCategoryFilter<"Product"> | $Enums.ProductCategory
    subCategories?: EnumProductSubCategoryNullableListFilter<"Product">
  }

  export type ProductUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutUpdatedByInput, ProductUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<ProductCreateWithoutUpdatedByInput, ProductUncheckedCreateWithoutUpdatedByInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutUpdatedByInput, ProductUncheckedUpdateWithoutUpdatedByInput>
  }

  export type ProductUpdateManyWithWhereWithoutUpdatedByInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ProductRecordUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ProductRecordWhereUniqueInput
    update: XOR<ProductRecordUpdateWithoutCreatedByInput, ProductRecordUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ProductRecordCreateWithoutCreatedByInput, ProductRecordUncheckedCreateWithoutCreatedByInput>
  }

  export type ProductRecordUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ProductRecordWhereUniqueInput
    data: XOR<ProductRecordUpdateWithoutCreatedByInput, ProductRecordUncheckedUpdateWithoutCreatedByInput>
  }

  export type ProductRecordUpdateManyWithWhereWithoutCreatedByInput = {
    where: ProductRecordScalarWhereInput
    data: XOR<ProductRecordUpdateManyMutationInput, ProductRecordUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ProductRecordScalarWhereInput = {
    AND?: ProductRecordScalarWhereInput | ProductRecordScalarWhereInput[]
    OR?: ProductRecordScalarWhereInput[]
    NOT?: ProductRecordScalarWhereInput | ProductRecordScalarWhereInput[]
    id?: UuidFilter<"ProductRecord"> | string
    createdAt?: DateTimeFilter<"ProductRecord"> | Date | string
    updatedAt?: DateTimeFilter<"ProductRecord"> | Date | string
    createdById?: UuidFilter<"ProductRecord"> | string
    updatedById?: UuidFilter<"ProductRecord"> | string
    timestamp?: DateTimeFilter<"ProductRecord"> | Date | string
    productId?: UuidFilter<"ProductRecord"> | string
    price?: FloatNullableFilter<"ProductRecord"> | number | null
    rawPrice?: StringNullableFilter<"ProductRecord"> | string | null
    status?: EnumProductStatusNullableFilter<"ProductRecord"> | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFilter<"ProductRecord"> | boolean
    manuallyChangedFields?: EnumProductRecordDataFieldNullableListFilter<"ProductRecord">
  }

  export type ProductRecordUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: ProductRecordWhereUniqueInput
    update: XOR<ProductRecordUpdateWithoutUpdatedByInput, ProductRecordUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<ProductRecordCreateWithoutUpdatedByInput, ProductRecordUncheckedCreateWithoutUpdatedByInput>
  }

  export type ProductRecordUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: ProductRecordWhereUniqueInput
    data: XOR<ProductRecordUpdateWithoutUpdatedByInput, ProductRecordUncheckedUpdateWithoutUpdatedByInput>
  }

  export type ProductRecordUpdateManyWithWhereWithoutUpdatedByInput = {
    where: ProductRecordScalarWhereInput
    data: XOR<ProductRecordUpdateManyMutationInput, ProductRecordUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ProductSubscriptionUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ProductSubscriptionWhereUniqueInput
    update: XOR<ProductSubscriptionUpdateWithoutCreatedByInput, ProductSubscriptionUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ProductSubscriptionCreateWithoutCreatedByInput, ProductSubscriptionUncheckedCreateWithoutCreatedByInput>
  }

  export type ProductSubscriptionUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ProductSubscriptionWhereUniqueInput
    data: XOR<ProductSubscriptionUpdateWithoutCreatedByInput, ProductSubscriptionUncheckedUpdateWithoutCreatedByInput>
  }

  export type ProductSubscriptionUpdateManyWithWhereWithoutCreatedByInput = {
    where: ProductSubscriptionScalarWhereInput
    data: XOR<ProductSubscriptionUpdateManyMutationInput, ProductSubscriptionUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ProductSubscriptionScalarWhereInput = {
    AND?: ProductSubscriptionScalarWhereInput | ProductSubscriptionScalarWhereInput[]
    OR?: ProductSubscriptionScalarWhereInput[]
    NOT?: ProductSubscriptionScalarWhereInput | ProductSubscriptionScalarWhereInput[]
    id?: UuidFilter<"ProductSubscription"> | string
    createdAt?: DateTimeFilter<"ProductSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"ProductSubscription"> | Date | string
    createdById?: UuidFilter<"ProductSubscription"> | string
    updatedById?: UuidFilter<"ProductSubscription"> | string
    subscriptionType?: EnumSubscriptionTypeFilter<"ProductSubscription"> | $Enums.SubscriptionType
    userId?: UuidFilter<"ProductSubscription"> | string
    productId?: UuidFilter<"ProductSubscription"> | string
    enabled?: BoolFilter<"ProductSubscription"> | boolean
  }

  export type ProductSubscriptionUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: ProductSubscriptionWhereUniqueInput
    update: XOR<ProductSubscriptionUpdateWithoutUpdatedByInput, ProductSubscriptionUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<ProductSubscriptionCreateWithoutUpdatedByInput, ProductSubscriptionUncheckedCreateWithoutUpdatedByInput>
  }

  export type ProductSubscriptionUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: ProductSubscriptionWhereUniqueInput
    data: XOR<ProductSubscriptionUpdateWithoutUpdatedByInput, ProductSubscriptionUncheckedUpdateWithoutUpdatedByInput>
  }

  export type ProductSubscriptionUpdateManyWithWhereWithoutUpdatedByInput = {
    where: ProductSubscriptionScalarWhereInput
    data: XOR<ProductSubscriptionUpdateManyMutationInput, ProductSubscriptionUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ProductSubscriptionUpsertWithWhereUniqueWithoutUserInput = {
    where: ProductSubscriptionWhereUniqueInput
    update: XOR<ProductSubscriptionUpdateWithoutUserInput, ProductSubscriptionUncheckedUpdateWithoutUserInput>
    create: XOR<ProductSubscriptionCreateWithoutUserInput, ProductSubscriptionUncheckedCreateWithoutUserInput>
  }

  export type ProductSubscriptionUpdateWithWhereUniqueWithoutUserInput = {
    where: ProductSubscriptionWhereUniqueInput
    data: XOR<ProductSubscriptionUpdateWithoutUserInput, ProductSubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type ProductSubscriptionUpdateManyWithWhereWithoutUserInput = {
    where: ProductSubscriptionScalarWhereInput
    data: XOR<ProductSubscriptionUpdateManyMutationInput, ProductSubscriptionUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutCreatedByInput, NotificationUncheckedUpdateWithoutCreatedByInput>
    create: XOR<NotificationCreateWithoutCreatedByInput, NotificationUncheckedCreateWithoutCreatedByInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutCreatedByInput, NotificationUncheckedUpdateWithoutCreatedByInput>
  }

  export type NotificationUpdateManyWithWhereWithoutCreatedByInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: UuidFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    createdById?: UuidFilter<"Notification"> | string
    updatedById?: UuidFilter<"Notification"> | string
    userId?: UuidFilter<"Notification"> | string
    notificationType?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    state?: EnumNotificationStateFilter<"Notification"> | $Enums.NotificationState
    stateAsOf?: DateTimeFilter<"Notification"> | Date | string
    failedAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
  }

  export type NotificationUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUpdatedByInput, NotificationUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<NotificationCreateWithoutUpdatedByInput, NotificationUncheckedCreateWithoutUpdatedByInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUpdatedByInput, NotificationUncheckedUpdateWithoutUpdatedByInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUpdatedByInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type ProcessedProductRecordUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ProcessedProductRecordWhereUniqueInput
    update: XOR<ProcessedProductRecordUpdateWithoutCreatedByInput, ProcessedProductRecordUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ProcessedProductRecordCreateWithoutCreatedByInput, ProcessedProductRecordUncheckedCreateWithoutCreatedByInput>
  }

  export type ProcessedProductRecordUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ProcessedProductRecordWhereUniqueInput
    data: XOR<ProcessedProductRecordUpdateWithoutCreatedByInput, ProcessedProductRecordUncheckedUpdateWithoutCreatedByInput>
  }

  export type ProcessedProductRecordUpdateManyWithWhereWithoutCreatedByInput = {
    where: ProcessedProductRecordScalarWhereInput
    data: XOR<ProcessedProductRecordUpdateManyMutationInput, ProcessedProductRecordUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ProcessedProductRecordScalarWhereInput = {
    AND?: ProcessedProductRecordScalarWhereInput | ProcessedProductRecordScalarWhereInput[]
    OR?: ProcessedProductRecordScalarWhereInput[]
    NOT?: ProcessedProductRecordScalarWhereInput | ProcessedProductRecordScalarWhereInput[]
    id?: UuidFilter<"ProcessedProductRecord"> | string
    createdAt?: DateTimeFilter<"ProcessedProductRecord"> | Date | string
    updatedAt?: DateTimeFilter<"ProcessedProductRecord"> | Date | string
    createdById?: UuidFilter<"ProcessedProductRecord"> | string
    updatedById?: UuidFilter<"ProcessedProductRecord"> | string
    recordId?: UuidFilter<"ProcessedProductRecord"> | string
    userId?: UuidFilter<"ProcessedProductRecord"> | string
  }

  export type ProcessedProductRecordUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: ProcessedProductRecordWhereUniqueInput
    update: XOR<ProcessedProductRecordUpdateWithoutUpdatedByInput, ProcessedProductRecordUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<ProcessedProductRecordCreateWithoutUpdatedByInput, ProcessedProductRecordUncheckedCreateWithoutUpdatedByInput>
  }

  export type ProcessedProductRecordUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: ProcessedProductRecordWhereUniqueInput
    data: XOR<ProcessedProductRecordUpdateWithoutUpdatedByInput, ProcessedProductRecordUncheckedUpdateWithoutUpdatedByInput>
  }

  export type ProcessedProductRecordUpdateManyWithWhereWithoutUpdatedByInput = {
    where: ProcessedProductRecordScalarWhereInput
    data: XOR<ProcessedProductRecordUpdateManyMutationInput, ProcessedProductRecordUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ProcessedProductRecordUpsertWithWhereUniqueWithoutUserInput = {
    where: ProcessedProductRecordWhereUniqueInput
    update: XOR<ProcessedProductRecordUpdateWithoutUserInput, ProcessedProductRecordUncheckedUpdateWithoutUserInput>
    create: XOR<ProcessedProductRecordCreateWithoutUserInput, ProcessedProductRecordUncheckedCreateWithoutUserInput>
  }

  export type ProcessedProductRecordUpdateWithWhereUniqueWithoutUserInput = {
    where: ProcessedProductRecordWhereUniqueInput
    data: XOR<ProcessedProductRecordUpdateWithoutUserInput, ProcessedProductRecordUncheckedUpdateWithoutUserInput>
  }

  export type ProcessedProductRecordUpdateManyWithWhereWithoutUserInput = {
    where: ProcessedProductRecordScalarWhereInput
    data: XOR<ProcessedProductRecordUpdateManyMutationInput, ProcessedProductRecordUncheckedUpdateManyWithoutUserInput>
  }

  export type ProductRecordCreateWithoutErrorsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timestamp?: Date | string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    createdBy: UserCreateNestedOneWithoutCreatedProductRecordsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProductRecordsInput
    product: ProductCreateNestedOneWithoutRecordsInput
    statusChangeNotifications?: StatusChangeNotificationCreateNestedManyWithoutProductRecordInput
    priceChangeNotifications?: PriceChangeNotificationCreateNestedManyWithoutProductRecordInput
    processedRecords?: ProcessedProductRecordCreateNestedManyWithoutRecordInput
  }

  export type ProductRecordUncheckedCreateWithoutErrorsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    timestamp?: Date | string
    productId: string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    statusChangeNotifications?: StatusChangeNotificationUncheckedCreateNestedManyWithoutProductRecordInput
    priceChangeNotifications?: PriceChangeNotificationUncheckedCreateNestedManyWithoutProductRecordInput
    processedRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutRecordInput
  }

  export type ProductRecordCreateOrConnectWithoutErrorsInput = {
    where: ProductRecordWhereUniqueInput
    create: XOR<ProductRecordCreateWithoutErrorsInput, ProductRecordUncheckedCreateWithoutErrorsInput>
  }

  export type ProductRecordUpsertWithoutErrorsInput = {
    update: XOR<ProductRecordUpdateWithoutErrorsInput, ProductRecordUncheckedUpdateWithoutErrorsInput>
    create: XOR<ProductRecordCreateWithoutErrorsInput, ProductRecordUncheckedCreateWithoutErrorsInput>
    where?: ProductRecordWhereInput
  }

  export type ProductRecordUpdateToOneWithWhereWithoutErrorsInput = {
    where?: ProductRecordWhereInput
    data: XOR<ProductRecordUpdateWithoutErrorsInput, ProductRecordUncheckedUpdateWithoutErrorsInput>
  }

  export type ProductRecordUpdateWithoutErrorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductRecordsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductRecordsNestedInput
    product?: ProductUpdateOneRequiredWithoutRecordsNestedInput
    statusChangeNotifications?: StatusChangeNotificationUpdateManyWithoutProductRecordNestedInput
    priceChangeNotifications?: PriceChangeNotificationUpdateManyWithoutProductRecordNestedInput
    processedRecords?: ProcessedProductRecordUpdateManyWithoutRecordNestedInput
  }

  export type ProductRecordUncheckedUpdateWithoutErrorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    statusChangeNotifications?: StatusChangeNotificationUncheckedUpdateManyWithoutProductRecordNestedInput
    priceChangeNotifications?: PriceChangeNotificationUncheckedUpdateManyWithoutProductRecordNestedInput
    processedRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutRecordNestedInput
  }

  export type UserCreateWithoutCreatedProductRecordsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    updatedProductRecords?: ProductRecordCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedProductRecordsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationUncheckedCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedProductRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedProductRecordsInput, UserUncheckedCreateWithoutCreatedProductRecordsInput>
  }

  export type UserCreateWithoutUpdatedProductRecordsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordCreateNestedManyWithoutCreatedByInput
    createdProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedProductRecordsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationUncheckedCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedProductRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedProductRecordsInput, UserUncheckedCreateWithoutUpdatedProductRecordsInput>
  }

  export type ProductCreateWithoutRecordsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name?: string | null
    slug: string
    code?: string | null
    imageSrc?: string | null
    status?: $Enums.ProductStatus | null
    statusLastUpdatedAt?: Date | string | null
    statusAsOf?: Date | string | null
    price?: number | null
    priceLastUpdatedAt?: Date | string | null
    priceAsOf?: Date | string | null
    category: $Enums.ProductCategory
    subCategories?: ProductCreatesubCategoriesInput | $Enums.ProductSubCategory[]
    createdBy: UserCreateNestedOneWithoutCreatedProductsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProductsInput
    subscriptions?: ProductSubscriptionCreateNestedManyWithoutProductInput
    newProductNotifications?: NewProductNotificationCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutRecordsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    name?: string | null
    slug: string
    code?: string | null
    imageSrc?: string | null
    status?: $Enums.ProductStatus | null
    statusLastUpdatedAt?: Date | string | null
    statusAsOf?: Date | string | null
    price?: number | null
    priceLastUpdatedAt?: Date | string | null
    priceAsOf?: Date | string | null
    category: $Enums.ProductCategory
    subCategories?: ProductCreatesubCategoriesInput | $Enums.ProductSubCategory[]
    subscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutProductInput
    newProductNotifications?: NewProductNotificationUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutRecordsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutRecordsInput, ProductUncheckedCreateWithoutRecordsInput>
  }

  export type ProductRecordErrorCreateWithoutRecordInput = {
    id?: string
    errorId: string
    errorCode: $Enums.ScrapingErrorCode
    field: $Enums.ProductRecordDataField
    message: string
  }

  export type ProductRecordErrorUncheckedCreateWithoutRecordInput = {
    id?: string
    errorId: string
    errorCode: $Enums.ScrapingErrorCode
    field: $Enums.ProductRecordDataField
    message: string
  }

  export type ProductRecordErrorCreateOrConnectWithoutRecordInput = {
    where: ProductRecordErrorWhereUniqueInput
    create: XOR<ProductRecordErrorCreateWithoutRecordInput, ProductRecordErrorUncheckedCreateWithoutRecordInput>
  }

  export type ProductRecordErrorCreateManyRecordInputEnvelope = {
    data: ProductRecordErrorCreateManyRecordInput | ProductRecordErrorCreateManyRecordInput[]
    skipDuplicates?: boolean
  }

  export type StatusChangeNotificationCreateWithoutProductRecordInput = {
    previousStatus: $Enums.ProductStatus
    newStatus: $Enums.ProductStatus
    subscription: StatusChangeSubscriptionCreateNestedOneWithoutNotificationsInput
    delegate_aux_notification?: NotificationCreateNestedOneWithoutDelegate_aux_statusChangeNotificationInput
  }

  export type StatusChangeNotificationUncheckedCreateWithoutProductRecordInput = {
    id?: string
    subscriptionId: string
    previousStatus: $Enums.ProductStatus
    newStatus: $Enums.ProductStatus
  }

  export type StatusChangeNotificationCreateOrConnectWithoutProductRecordInput = {
    where: StatusChangeNotificationWhereUniqueInput
    create: XOR<StatusChangeNotificationCreateWithoutProductRecordInput, StatusChangeNotificationUncheckedCreateWithoutProductRecordInput>
  }

  export type StatusChangeNotificationCreateManyProductRecordInputEnvelope = {
    data: StatusChangeNotificationCreateManyProductRecordInput | StatusChangeNotificationCreateManyProductRecordInput[]
    skipDuplicates?: boolean
  }

  export type PriceChangeNotificationCreateWithoutProductRecordInput = {
    condition: $Enums.PriceChangeSubscriptionCondition
    previousPrice: number
    newPrice: number
    subscription: PriceChangeSubscriptionCreateNestedOneWithoutNotificationsInput
    delegate_aux_notification?: NotificationCreateNestedOneWithoutDelegate_aux_priceChangeNotificationInput
  }

  export type PriceChangeNotificationUncheckedCreateWithoutProductRecordInput = {
    id?: string
    subscriptionId: string
    condition: $Enums.PriceChangeSubscriptionCondition
    previousPrice: number
    newPrice: number
  }

  export type PriceChangeNotificationCreateOrConnectWithoutProductRecordInput = {
    where: PriceChangeNotificationWhereUniqueInput
    create: XOR<PriceChangeNotificationCreateWithoutProductRecordInput, PriceChangeNotificationUncheckedCreateWithoutProductRecordInput>
  }

  export type PriceChangeNotificationCreateManyProductRecordInputEnvelope = {
    data: PriceChangeNotificationCreateManyProductRecordInput | PriceChangeNotificationCreateManyProductRecordInput[]
    skipDuplicates?: boolean
  }

  export type ProcessedProductRecordCreateWithoutRecordInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedProcessedProductRecordsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProcessedProductRecordsInput
    user: UserCreateNestedOneWithoutProcessedProductRecordsInput
  }

  export type ProcessedProductRecordUncheckedCreateWithoutRecordInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    userId: string
  }

  export type ProcessedProductRecordCreateOrConnectWithoutRecordInput = {
    where: ProcessedProductRecordWhereUniqueInput
    create: XOR<ProcessedProductRecordCreateWithoutRecordInput, ProcessedProductRecordUncheckedCreateWithoutRecordInput>
  }

  export type ProcessedProductRecordCreateManyRecordInputEnvelope = {
    data: ProcessedProductRecordCreateManyRecordInput | ProcessedProductRecordCreateManyRecordInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedProductRecordsInput = {
    update: XOR<UserUpdateWithoutCreatedProductRecordsInput, UserUncheckedUpdateWithoutCreatedProductRecordsInput>
    create: XOR<UserCreateWithoutCreatedProductRecordsInput, UserUncheckedCreateWithoutCreatedProductRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedProductRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedProductRecordsInput, UserUncheckedUpdateWithoutCreatedProductRecordsInput>
  }

  export type UserUpdateWithoutCreatedProductRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    updatedProductRecords?: ProductRecordUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedProductRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedProductRecords?: ProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUncheckedUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutUpdatedProductRecordsInput = {
    update: XOR<UserUpdateWithoutUpdatedProductRecordsInput, UserUncheckedUpdateWithoutUpdatedProductRecordsInput>
    create: XOR<UserCreateWithoutUpdatedProductRecordsInput, UserUncheckedCreateWithoutUpdatedProductRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedProductRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedProductRecordsInput, UserUncheckedUpdateWithoutUpdatedProductRecordsInput>
  }

  export type UserUpdateWithoutUpdatedProductRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUpdateManyWithoutCreatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedProductRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUncheckedUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductUpsertWithoutRecordsInput = {
    update: XOR<ProductUpdateWithoutRecordsInput, ProductUncheckedUpdateWithoutRecordsInput>
    create: XOR<ProductCreateWithoutRecordsInput, ProductUncheckedCreateWithoutRecordsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutRecordsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutRecordsInput, ProductUncheckedUpdateWithoutRecordsInput>
  }

  export type ProductUpdateWithoutRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    imageSrc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    statusLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    priceLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priceAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    subCategories?: ProductUpdatesubCategoriesInput | $Enums.ProductSubCategory[]
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductsNestedInput
    subscriptions?: ProductSubscriptionUpdateManyWithoutProductNestedInput
    newProductNotifications?: NewProductNotificationUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    imageSrc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    statusLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    priceLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priceAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    subCategories?: ProductUpdatesubCategoriesInput | $Enums.ProductSubCategory[]
    subscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutProductNestedInput
    newProductNotifications?: NewProductNotificationUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductRecordErrorUpsertWithWhereUniqueWithoutRecordInput = {
    where: ProductRecordErrorWhereUniqueInput
    update: XOR<ProductRecordErrorUpdateWithoutRecordInput, ProductRecordErrorUncheckedUpdateWithoutRecordInput>
    create: XOR<ProductRecordErrorCreateWithoutRecordInput, ProductRecordErrorUncheckedCreateWithoutRecordInput>
  }

  export type ProductRecordErrorUpdateWithWhereUniqueWithoutRecordInput = {
    where: ProductRecordErrorWhereUniqueInput
    data: XOR<ProductRecordErrorUpdateWithoutRecordInput, ProductRecordErrorUncheckedUpdateWithoutRecordInput>
  }

  export type ProductRecordErrorUpdateManyWithWhereWithoutRecordInput = {
    where: ProductRecordErrorScalarWhereInput
    data: XOR<ProductRecordErrorUpdateManyMutationInput, ProductRecordErrorUncheckedUpdateManyWithoutRecordInput>
  }

  export type ProductRecordErrorScalarWhereInput = {
    AND?: ProductRecordErrorScalarWhereInput | ProductRecordErrorScalarWhereInput[]
    OR?: ProductRecordErrorScalarWhereInput[]
    NOT?: ProductRecordErrorScalarWhereInput | ProductRecordErrorScalarWhereInput[]
    id?: UuidFilter<"ProductRecordError"> | string
    errorId?: UuidFilter<"ProductRecordError"> | string
    errorCode?: EnumScrapingErrorCodeFilter<"ProductRecordError"> | $Enums.ScrapingErrorCode
    recordId?: UuidFilter<"ProductRecordError"> | string
    field?: EnumProductRecordDataFieldFilter<"ProductRecordError"> | $Enums.ProductRecordDataField
    message?: StringFilter<"ProductRecordError"> | string
  }

  export type StatusChangeNotificationUpsertWithWhereUniqueWithoutProductRecordInput = {
    where: StatusChangeNotificationWhereUniqueInput
    update: XOR<StatusChangeNotificationUpdateWithoutProductRecordInput, StatusChangeNotificationUncheckedUpdateWithoutProductRecordInput>
    create: XOR<StatusChangeNotificationCreateWithoutProductRecordInput, StatusChangeNotificationUncheckedCreateWithoutProductRecordInput>
  }

  export type StatusChangeNotificationUpdateWithWhereUniqueWithoutProductRecordInput = {
    where: StatusChangeNotificationWhereUniqueInput
    data: XOR<StatusChangeNotificationUpdateWithoutProductRecordInput, StatusChangeNotificationUncheckedUpdateWithoutProductRecordInput>
  }

  export type StatusChangeNotificationUpdateManyWithWhereWithoutProductRecordInput = {
    where: StatusChangeNotificationScalarWhereInput
    data: XOR<StatusChangeNotificationUpdateManyMutationInput, StatusChangeNotificationUncheckedUpdateManyWithoutProductRecordInput>
  }

  export type StatusChangeNotificationScalarWhereInput = {
    AND?: StatusChangeNotificationScalarWhereInput | StatusChangeNotificationScalarWhereInput[]
    OR?: StatusChangeNotificationScalarWhereInput[]
    NOT?: StatusChangeNotificationScalarWhereInput | StatusChangeNotificationScalarWhereInput[]
    id?: UuidFilter<"StatusChangeNotification"> | string
    productRecordId?: UuidFilter<"StatusChangeNotification"> | string
    subscriptionId?: UuidFilter<"StatusChangeNotification"> | string
    previousStatus?: EnumProductStatusFilter<"StatusChangeNotification"> | $Enums.ProductStatus
    newStatus?: EnumProductStatusFilter<"StatusChangeNotification"> | $Enums.ProductStatus
  }

  export type PriceChangeNotificationUpsertWithWhereUniqueWithoutProductRecordInput = {
    where: PriceChangeNotificationWhereUniqueInput
    update: XOR<PriceChangeNotificationUpdateWithoutProductRecordInput, PriceChangeNotificationUncheckedUpdateWithoutProductRecordInput>
    create: XOR<PriceChangeNotificationCreateWithoutProductRecordInput, PriceChangeNotificationUncheckedCreateWithoutProductRecordInput>
  }

  export type PriceChangeNotificationUpdateWithWhereUniqueWithoutProductRecordInput = {
    where: PriceChangeNotificationWhereUniqueInput
    data: XOR<PriceChangeNotificationUpdateWithoutProductRecordInput, PriceChangeNotificationUncheckedUpdateWithoutProductRecordInput>
  }

  export type PriceChangeNotificationUpdateManyWithWhereWithoutProductRecordInput = {
    where: PriceChangeNotificationScalarWhereInput
    data: XOR<PriceChangeNotificationUpdateManyMutationInput, PriceChangeNotificationUncheckedUpdateManyWithoutProductRecordInput>
  }

  export type PriceChangeNotificationScalarWhereInput = {
    AND?: PriceChangeNotificationScalarWhereInput | PriceChangeNotificationScalarWhereInput[]
    OR?: PriceChangeNotificationScalarWhereInput[]
    NOT?: PriceChangeNotificationScalarWhereInput | PriceChangeNotificationScalarWhereInput[]
    id?: UuidFilter<"PriceChangeNotification"> | string
    productRecordId?: UuidFilter<"PriceChangeNotification"> | string
    subscriptionId?: UuidFilter<"PriceChangeNotification"> | string
    condition?: EnumPriceChangeSubscriptionConditionFilter<"PriceChangeNotification"> | $Enums.PriceChangeSubscriptionCondition
    previousPrice?: FloatFilter<"PriceChangeNotification"> | number
    newPrice?: FloatFilter<"PriceChangeNotification"> | number
  }

  export type ProcessedProductRecordUpsertWithWhereUniqueWithoutRecordInput = {
    where: ProcessedProductRecordWhereUniqueInput
    update: XOR<ProcessedProductRecordUpdateWithoutRecordInput, ProcessedProductRecordUncheckedUpdateWithoutRecordInput>
    create: XOR<ProcessedProductRecordCreateWithoutRecordInput, ProcessedProductRecordUncheckedCreateWithoutRecordInput>
  }

  export type ProcessedProductRecordUpdateWithWhereUniqueWithoutRecordInput = {
    where: ProcessedProductRecordWhereUniqueInput
    data: XOR<ProcessedProductRecordUpdateWithoutRecordInput, ProcessedProductRecordUncheckedUpdateWithoutRecordInput>
  }

  export type ProcessedProductRecordUpdateManyWithWhereWithoutRecordInput = {
    where: ProcessedProductRecordScalarWhereInput
    data: XOR<ProcessedProductRecordUpdateManyMutationInput, ProcessedProductRecordUncheckedUpdateManyWithoutRecordInput>
  }

  export type UserCreateWithoutCreatedProcessedProductRecordsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    updatedProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedProcessedProductRecordsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationUncheckedCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedProcessedProductRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedProcessedProductRecordsInput, UserUncheckedCreateWithoutCreatedProcessedProductRecordsInput>
  }

  export type UserCreateWithoutUpdatedProcessedProductRecordsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutCreatedByInput
    processedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedProcessedProductRecordsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationUncheckedCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    processedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedProcessedProductRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedProcessedProductRecordsInput, UserUncheckedCreateWithoutUpdatedProcessedProductRecordsInput>
  }

  export type ProductRecordCreateWithoutProcessedRecordsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timestamp?: Date | string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    createdBy: UserCreateNestedOneWithoutCreatedProductRecordsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProductRecordsInput
    product: ProductCreateNestedOneWithoutRecordsInput
    errors?: ProductRecordErrorCreateNestedManyWithoutRecordInput
    statusChangeNotifications?: StatusChangeNotificationCreateNestedManyWithoutProductRecordInput
    priceChangeNotifications?: PriceChangeNotificationCreateNestedManyWithoutProductRecordInput
  }

  export type ProductRecordUncheckedCreateWithoutProcessedRecordsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    timestamp?: Date | string
    productId: string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    errors?: ProductRecordErrorUncheckedCreateNestedManyWithoutRecordInput
    statusChangeNotifications?: StatusChangeNotificationUncheckedCreateNestedManyWithoutProductRecordInput
    priceChangeNotifications?: PriceChangeNotificationUncheckedCreateNestedManyWithoutProductRecordInput
  }

  export type ProductRecordCreateOrConnectWithoutProcessedRecordsInput = {
    where: ProductRecordWhereUniqueInput
    create: XOR<ProductRecordCreateWithoutProcessedRecordsInput, ProductRecordUncheckedCreateWithoutProcessedRecordsInput>
  }

  export type UserCreateWithoutProcessedProductRecordsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutProcessedProductRecordsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationUncheckedCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutProcessedProductRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProcessedProductRecordsInput, UserUncheckedCreateWithoutProcessedProductRecordsInput>
  }

  export type UserUpsertWithoutCreatedProcessedProductRecordsInput = {
    update: XOR<UserUpdateWithoutCreatedProcessedProductRecordsInput, UserUncheckedUpdateWithoutCreatedProcessedProductRecordsInput>
    create: XOR<UserCreateWithoutCreatedProcessedProductRecordsInput, UserUncheckedCreateWithoutCreatedProcessedProductRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedProcessedProductRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedProcessedProductRecordsInput, UserUncheckedUpdateWithoutCreatedProcessedProductRecordsInput>
  }

  export type UserUpdateWithoutCreatedProcessedProductRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedProcessedProductRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUncheckedUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutUpdatedProcessedProductRecordsInput = {
    update: XOR<UserUpdateWithoutUpdatedProcessedProductRecordsInput, UserUncheckedUpdateWithoutUpdatedProcessedProductRecordsInput>
    create: XOR<UserCreateWithoutUpdatedProcessedProductRecordsInput, UserUncheckedCreateWithoutUpdatedProcessedProductRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedProcessedProductRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedProcessedProductRecordsInput, UserUncheckedUpdateWithoutUpdatedProcessedProductRecordsInput>
  }

  export type UserUpdateWithoutUpdatedProcessedProductRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutCreatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedProcessedProductRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUncheckedUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductRecordUpsertWithoutProcessedRecordsInput = {
    update: XOR<ProductRecordUpdateWithoutProcessedRecordsInput, ProductRecordUncheckedUpdateWithoutProcessedRecordsInput>
    create: XOR<ProductRecordCreateWithoutProcessedRecordsInput, ProductRecordUncheckedCreateWithoutProcessedRecordsInput>
    where?: ProductRecordWhereInput
  }

  export type ProductRecordUpdateToOneWithWhereWithoutProcessedRecordsInput = {
    where?: ProductRecordWhereInput
    data: XOR<ProductRecordUpdateWithoutProcessedRecordsInput, ProductRecordUncheckedUpdateWithoutProcessedRecordsInput>
  }

  export type ProductRecordUpdateWithoutProcessedRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductRecordsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductRecordsNestedInput
    product?: ProductUpdateOneRequiredWithoutRecordsNestedInput
    errors?: ProductRecordErrorUpdateManyWithoutRecordNestedInput
    statusChangeNotifications?: StatusChangeNotificationUpdateManyWithoutProductRecordNestedInput
    priceChangeNotifications?: PriceChangeNotificationUpdateManyWithoutProductRecordNestedInput
  }

  export type ProductRecordUncheckedUpdateWithoutProcessedRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    errors?: ProductRecordErrorUncheckedUpdateManyWithoutRecordNestedInput
    statusChangeNotifications?: StatusChangeNotificationUncheckedUpdateManyWithoutProductRecordNestedInput
    priceChangeNotifications?: PriceChangeNotificationUncheckedUpdateManyWithoutProductRecordNestedInput
  }

  export type UserUpsertWithoutProcessedProductRecordsInput = {
    update: XOR<UserUpdateWithoutProcessedProductRecordsInput, UserUncheckedUpdateWithoutProcessedProductRecordsInput>
    create: XOR<UserCreateWithoutProcessedProductRecordsInput, UserUncheckedCreateWithoutProcessedProductRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProcessedProductRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProcessedProductRecordsInput, UserUncheckedUpdateWithoutProcessedProductRecordsInput>
  }

  export type UserUpdateWithoutProcessedProductRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutProcessedProductRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUncheckedUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserCreateWithoutCreatedProductsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedProductsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationUncheckedCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedProductsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedProductsInput, UserUncheckedCreateWithoutCreatedProductsInput>
  }

  export type UserCreateWithoutUpdatedProductsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    createdProductRecords?: ProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedProductsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    createdProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationUncheckedCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedProductsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedProductsInput, UserUncheckedCreateWithoutUpdatedProductsInput>
  }

  export type ProductRecordCreateWithoutProductInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timestamp?: Date | string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    createdBy: UserCreateNestedOneWithoutCreatedProductRecordsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProductRecordsInput
    errors?: ProductRecordErrorCreateNestedManyWithoutRecordInput
    statusChangeNotifications?: StatusChangeNotificationCreateNestedManyWithoutProductRecordInput
    priceChangeNotifications?: PriceChangeNotificationCreateNestedManyWithoutProductRecordInput
    processedRecords?: ProcessedProductRecordCreateNestedManyWithoutRecordInput
  }

  export type ProductRecordUncheckedCreateWithoutProductInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    timestamp?: Date | string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    errors?: ProductRecordErrorUncheckedCreateNestedManyWithoutRecordInput
    statusChangeNotifications?: StatusChangeNotificationUncheckedCreateNestedManyWithoutProductRecordInput
    priceChangeNotifications?: PriceChangeNotificationUncheckedCreateNestedManyWithoutProductRecordInput
    processedRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutRecordInput
  }

  export type ProductRecordCreateOrConnectWithoutProductInput = {
    where: ProductRecordWhereUniqueInput
    create: XOR<ProductRecordCreateWithoutProductInput, ProductRecordUncheckedCreateWithoutProductInput>
  }

  export type ProductRecordCreateManyProductInputEnvelope = {
    data: ProductRecordCreateManyProductInput | ProductRecordCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ProductSubscriptionCreateWithoutProductInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionType: $Enums.SubscriptionType
    enabled?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedProductSubscriptionsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProductSubscriptionsInput
    user: UserCreateNestedOneWithoutProductSubscriptionsInput
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
  }

  export type ProductSubscriptionUncheckedCreateWithoutProductInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    subscriptionType: $Enums.SubscriptionType
    userId: string
    enabled?: boolean
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUncheckedCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUncheckedCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
  }

  export type ProductSubscriptionCreateOrConnectWithoutProductInput = {
    where: ProductSubscriptionWhereUniqueInput
    create: XOR<ProductSubscriptionCreateWithoutProductInput, ProductSubscriptionUncheckedCreateWithoutProductInput>
  }

  export type ProductSubscriptionCreateManyProductInputEnvelope = {
    data: ProductSubscriptionCreateManyProductInput | ProductSubscriptionCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type NewProductNotificationCreateWithoutProductInput = {
    delegate_aux_notification?: NotificationCreateNestedOneWithoutDelegate_aux_newProductNotificationInput
  }

  export type NewProductNotificationUncheckedCreateWithoutProductInput = {
    id?: string
  }

  export type NewProductNotificationCreateOrConnectWithoutProductInput = {
    where: NewProductNotificationWhereUniqueInput
    create: XOR<NewProductNotificationCreateWithoutProductInput, NewProductNotificationUncheckedCreateWithoutProductInput>
  }

  export type NewProductNotificationCreateManyProductInputEnvelope = {
    data: NewProductNotificationCreateManyProductInput | NewProductNotificationCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedProductsInput = {
    update: XOR<UserUpdateWithoutCreatedProductsInput, UserUncheckedUpdateWithoutCreatedProductsInput>
    create: XOR<UserCreateWithoutCreatedProductsInput, UserUncheckedCreateWithoutCreatedProductsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedProductsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedProductsInput, UserUncheckedUpdateWithoutCreatedProductsInput>
  }

  export type UserUpdateWithoutCreatedProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUncheckedUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutUpdatedProductsInput = {
    update: XOR<UserUpdateWithoutUpdatedProductsInput, UserUncheckedUpdateWithoutUpdatedProductsInput>
    create: XOR<UserCreateWithoutUpdatedProductsInput, UserUncheckedCreateWithoutUpdatedProductsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedProductsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedProductsInput, UserUncheckedUpdateWithoutUpdatedProductsInput>
  }

  export type UserUpdateWithoutUpdatedProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    createdProductRecords?: ProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    createdProductRecords?: ProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUncheckedUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductRecordUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductRecordWhereUniqueInput
    update: XOR<ProductRecordUpdateWithoutProductInput, ProductRecordUncheckedUpdateWithoutProductInput>
    create: XOR<ProductRecordCreateWithoutProductInput, ProductRecordUncheckedCreateWithoutProductInput>
  }

  export type ProductRecordUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductRecordWhereUniqueInput
    data: XOR<ProductRecordUpdateWithoutProductInput, ProductRecordUncheckedUpdateWithoutProductInput>
  }

  export type ProductRecordUpdateManyWithWhereWithoutProductInput = {
    where: ProductRecordScalarWhereInput
    data: XOR<ProductRecordUpdateManyMutationInput, ProductRecordUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductSubscriptionUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductSubscriptionWhereUniqueInput
    update: XOR<ProductSubscriptionUpdateWithoutProductInput, ProductSubscriptionUncheckedUpdateWithoutProductInput>
    create: XOR<ProductSubscriptionCreateWithoutProductInput, ProductSubscriptionUncheckedCreateWithoutProductInput>
  }

  export type ProductSubscriptionUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductSubscriptionWhereUniqueInput
    data: XOR<ProductSubscriptionUpdateWithoutProductInput, ProductSubscriptionUncheckedUpdateWithoutProductInput>
  }

  export type ProductSubscriptionUpdateManyWithWhereWithoutProductInput = {
    where: ProductSubscriptionScalarWhereInput
    data: XOR<ProductSubscriptionUpdateManyMutationInput, ProductSubscriptionUncheckedUpdateManyWithoutProductInput>
  }

  export type NewProductNotificationUpsertWithWhereUniqueWithoutProductInput = {
    where: NewProductNotificationWhereUniqueInput
    update: XOR<NewProductNotificationUpdateWithoutProductInput, NewProductNotificationUncheckedUpdateWithoutProductInput>
    create: XOR<NewProductNotificationCreateWithoutProductInput, NewProductNotificationUncheckedCreateWithoutProductInput>
  }

  export type NewProductNotificationUpdateWithWhereUniqueWithoutProductInput = {
    where: NewProductNotificationWhereUniqueInput
    data: XOR<NewProductNotificationUpdateWithoutProductInput, NewProductNotificationUncheckedUpdateWithoutProductInput>
  }

  export type NewProductNotificationUpdateManyWithWhereWithoutProductInput = {
    where: NewProductNotificationScalarWhereInput
    data: XOR<NewProductNotificationUpdateManyMutationInput, NewProductNotificationUncheckedUpdateManyWithoutProductInput>
  }

  export type NewProductNotificationScalarWhereInput = {
    AND?: NewProductNotificationScalarWhereInput | NewProductNotificationScalarWhereInput[]
    OR?: NewProductNotificationScalarWhereInput[]
    NOT?: NewProductNotificationScalarWhereInput | NewProductNotificationScalarWhereInput[]
    id?: UuidFilter<"NewProductNotification"> | string
    productId?: UuidFilter<"NewProductNotification"> | string
  }

  export type UserCreateWithoutCreatedProductSubscriptionsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordCreateNestedManyWithoutUpdatedByInput
    updatedProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedProductSubscriptionsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationUncheckedCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedProductSubscriptionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedProductSubscriptionsInput, UserUncheckedCreateWithoutCreatedProductSubscriptionsInput>
  }

  export type UserCreateWithoutUpdatedProductSubscriptionsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutCreatedByInput
    productSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedProductSubscriptionsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutCreatedByInput
    productSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationUncheckedCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedProductSubscriptionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedProductSubscriptionsInput, UserUncheckedCreateWithoutUpdatedProductSubscriptionsInput>
  }

  export type UserCreateWithoutProductSubscriptionsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUpdatedByInput
    createdNotifications?: NotificationCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProductSubscriptionsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationUncheckedCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProductSubscriptionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProductSubscriptionsInput, UserUncheckedCreateWithoutProductSubscriptionsInput>
  }

  export type ProductCreateWithoutSubscriptionsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name?: string | null
    slug: string
    code?: string | null
    imageSrc?: string | null
    status?: $Enums.ProductStatus | null
    statusLastUpdatedAt?: Date | string | null
    statusAsOf?: Date | string | null
    price?: number | null
    priceLastUpdatedAt?: Date | string | null
    priceAsOf?: Date | string | null
    category: $Enums.ProductCategory
    subCategories?: ProductCreatesubCategoriesInput | $Enums.ProductSubCategory[]
    createdBy: UserCreateNestedOneWithoutCreatedProductsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProductsInput
    records?: ProductRecordCreateNestedManyWithoutProductInput
    newProductNotifications?: NewProductNotificationCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutSubscriptionsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    name?: string | null
    slug: string
    code?: string | null
    imageSrc?: string | null
    status?: $Enums.ProductStatus | null
    statusLastUpdatedAt?: Date | string | null
    statusAsOf?: Date | string | null
    price?: number | null
    priceLastUpdatedAt?: Date | string | null
    priceAsOf?: Date | string | null
    category: $Enums.ProductCategory
    subCategories?: ProductCreatesubCategoriesInput | $Enums.ProductSubCategory[]
    records?: ProductRecordUncheckedCreateNestedManyWithoutProductInput
    newProductNotifications?: NewProductNotificationUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutSubscriptionsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutSubscriptionsInput, ProductUncheckedCreateWithoutSubscriptionsInput>
  }

  export type StatusChangeSubscriptionCreateWithoutDelegate_aux_productSubscriptionInput = {
    conditions?: StatusChangeSubscriptionConditionCreateNestedManyWithoutSubscriptionInput
    notifications?: StatusChangeNotificationCreateNestedManyWithoutSubscriptionInput
  }

  export type StatusChangeSubscriptionUncheckedCreateWithoutDelegate_aux_productSubscriptionInput = {
    conditions?: StatusChangeSubscriptionConditionUncheckedCreateNestedManyWithoutSubscriptionInput
    notifications?: StatusChangeNotificationUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type StatusChangeSubscriptionCreateOrConnectWithoutDelegate_aux_productSubscriptionInput = {
    where: StatusChangeSubscriptionWhereUniqueInput
    create: XOR<StatusChangeSubscriptionCreateWithoutDelegate_aux_productSubscriptionInput, StatusChangeSubscriptionUncheckedCreateWithoutDelegate_aux_productSubscriptionInput>
  }

  export type PriceChangeSubscriptionCreateWithoutDelegate_aux_productSubscriptionInput = {
    conditions?: PriceChangeSubscriptionCreateconditionsInput | $Enums.PriceChangeSubscriptionCondition[]
    notifications?: PriceChangeNotificationCreateNestedManyWithoutSubscriptionInput
  }

  export type PriceChangeSubscriptionUncheckedCreateWithoutDelegate_aux_productSubscriptionInput = {
    conditions?: PriceChangeSubscriptionCreateconditionsInput | $Enums.PriceChangeSubscriptionCondition[]
    notifications?: PriceChangeNotificationUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type PriceChangeSubscriptionCreateOrConnectWithoutDelegate_aux_productSubscriptionInput = {
    where: PriceChangeSubscriptionWhereUniqueInput
    create: XOR<PriceChangeSubscriptionCreateWithoutDelegate_aux_productSubscriptionInput, PriceChangeSubscriptionUncheckedCreateWithoutDelegate_aux_productSubscriptionInput>
  }

  export type UserUpsertWithoutCreatedProductSubscriptionsInput = {
    update: XOR<UserUpdateWithoutCreatedProductSubscriptionsInput, UserUncheckedUpdateWithoutCreatedProductSubscriptionsInput>
    create: XOR<UserCreateWithoutCreatedProductSubscriptionsInput, UserUncheckedCreateWithoutCreatedProductSubscriptionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedProductSubscriptionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedProductSubscriptionsInput, UserUncheckedUpdateWithoutCreatedProductSubscriptionsInput>
  }

  export type UserUpdateWithoutCreatedProductSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUpdateManyWithoutUpdatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedProductSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUncheckedUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutUpdatedProductSubscriptionsInput = {
    update: XOR<UserUpdateWithoutUpdatedProductSubscriptionsInput, UserUncheckedUpdateWithoutUpdatedProductSubscriptionsInput>
    create: XOR<UserCreateWithoutUpdatedProductSubscriptionsInput, UserUncheckedCreateWithoutUpdatedProductSubscriptionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedProductSubscriptionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedProductSubscriptionsInput, UserUncheckedUpdateWithoutUpdatedProductSubscriptionsInput>
  }

  export type UserUpdateWithoutUpdatedProductSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUpdateManyWithoutCreatedByNestedInput
    productSubscriptions?: ProductSubscriptionUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedProductSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutCreatedByNestedInput
    productSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUncheckedUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutProductSubscriptionsInput = {
    update: XOR<UserUpdateWithoutProductSubscriptionsInput, UserUncheckedUpdateWithoutProductSubscriptionsInput>
    create: XOR<UserCreateWithoutProductSubscriptionsInput, UserUncheckedCreateWithoutProductSubscriptionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProductSubscriptionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProductSubscriptionsInput, UserUncheckedUpdateWithoutProductSubscriptionsInput>
  }

  export type UserUpdateWithoutProductSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUpdateManyWithoutUpdatedByNestedInput
    createdNotifications?: NotificationUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProductSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUncheckedUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductUpsertWithoutSubscriptionsInput = {
    update: XOR<ProductUpdateWithoutSubscriptionsInput, ProductUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<ProductCreateWithoutSubscriptionsInput, ProductUncheckedCreateWithoutSubscriptionsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutSubscriptionsInput, ProductUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type ProductUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    imageSrc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    statusLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    priceLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priceAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    subCategories?: ProductUpdatesubCategoriesInput | $Enums.ProductSubCategory[]
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductsNestedInput
    records?: ProductRecordUpdateManyWithoutProductNestedInput
    newProductNotifications?: NewProductNotificationUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    imageSrc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    statusLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    priceLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priceAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    subCategories?: ProductUpdatesubCategoriesInput | $Enums.ProductSubCategory[]
    records?: ProductRecordUncheckedUpdateManyWithoutProductNestedInput
    newProductNotifications?: NewProductNotificationUncheckedUpdateManyWithoutProductNestedInput
  }

  export type StatusChangeSubscriptionUpsertWithoutDelegate_aux_productSubscriptionInput = {
    update: XOR<StatusChangeSubscriptionUpdateWithoutDelegate_aux_productSubscriptionInput, StatusChangeSubscriptionUncheckedUpdateWithoutDelegate_aux_productSubscriptionInput>
    create: XOR<StatusChangeSubscriptionCreateWithoutDelegate_aux_productSubscriptionInput, StatusChangeSubscriptionUncheckedCreateWithoutDelegate_aux_productSubscriptionInput>
    where?: StatusChangeSubscriptionWhereInput
  }

  export type StatusChangeSubscriptionUpdateToOneWithWhereWithoutDelegate_aux_productSubscriptionInput = {
    where?: StatusChangeSubscriptionWhereInput
    data: XOR<StatusChangeSubscriptionUpdateWithoutDelegate_aux_productSubscriptionInput, StatusChangeSubscriptionUncheckedUpdateWithoutDelegate_aux_productSubscriptionInput>
  }

  export type StatusChangeSubscriptionUpdateWithoutDelegate_aux_productSubscriptionInput = {
    conditions?: StatusChangeSubscriptionConditionUpdateManyWithoutSubscriptionNestedInput
    notifications?: StatusChangeNotificationUpdateManyWithoutSubscriptionNestedInput
  }

  export type StatusChangeSubscriptionUncheckedUpdateWithoutDelegate_aux_productSubscriptionInput = {
    conditions?: StatusChangeSubscriptionConditionUncheckedUpdateManyWithoutSubscriptionNestedInput
    notifications?: StatusChangeNotificationUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type PriceChangeSubscriptionUpsertWithoutDelegate_aux_productSubscriptionInput = {
    update: XOR<PriceChangeSubscriptionUpdateWithoutDelegate_aux_productSubscriptionInput, PriceChangeSubscriptionUncheckedUpdateWithoutDelegate_aux_productSubscriptionInput>
    create: XOR<PriceChangeSubscriptionCreateWithoutDelegate_aux_productSubscriptionInput, PriceChangeSubscriptionUncheckedCreateWithoutDelegate_aux_productSubscriptionInput>
    where?: PriceChangeSubscriptionWhereInput
  }

  export type PriceChangeSubscriptionUpdateToOneWithWhereWithoutDelegate_aux_productSubscriptionInput = {
    where?: PriceChangeSubscriptionWhereInput
    data: XOR<PriceChangeSubscriptionUpdateWithoutDelegate_aux_productSubscriptionInput, PriceChangeSubscriptionUncheckedUpdateWithoutDelegate_aux_productSubscriptionInput>
  }

  export type PriceChangeSubscriptionUpdateWithoutDelegate_aux_productSubscriptionInput = {
    conditions?: PriceChangeSubscriptionUpdateconditionsInput | $Enums.PriceChangeSubscriptionCondition[]
    notifications?: PriceChangeNotificationUpdateManyWithoutSubscriptionNestedInput
  }

  export type PriceChangeSubscriptionUncheckedUpdateWithoutDelegate_aux_productSubscriptionInput = {
    conditions?: PriceChangeSubscriptionUpdateconditionsInput | $Enums.PriceChangeSubscriptionCondition[]
    notifications?: PriceChangeNotificationUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type StatusChangeSubscriptionCreateWithoutConditionsInput = {
    notifications?: StatusChangeNotificationCreateNestedManyWithoutSubscriptionInput
    delegate_aux_productSubscription?: ProductSubscriptionCreateNestedOneWithoutDelegate_aux_statusChangeSubscriptionInput
  }

  export type StatusChangeSubscriptionUncheckedCreateWithoutConditionsInput = {
    id?: string
    notifications?: StatusChangeNotificationUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type StatusChangeSubscriptionCreateOrConnectWithoutConditionsInput = {
    where: StatusChangeSubscriptionWhereUniqueInput
    create: XOR<StatusChangeSubscriptionCreateWithoutConditionsInput, StatusChangeSubscriptionUncheckedCreateWithoutConditionsInput>
  }

  export type StatusChangeSubscriptionUpsertWithoutConditionsInput = {
    update: XOR<StatusChangeSubscriptionUpdateWithoutConditionsInput, StatusChangeSubscriptionUncheckedUpdateWithoutConditionsInput>
    create: XOR<StatusChangeSubscriptionCreateWithoutConditionsInput, StatusChangeSubscriptionUncheckedCreateWithoutConditionsInput>
    where?: StatusChangeSubscriptionWhereInput
  }

  export type StatusChangeSubscriptionUpdateToOneWithWhereWithoutConditionsInput = {
    where?: StatusChangeSubscriptionWhereInput
    data: XOR<StatusChangeSubscriptionUpdateWithoutConditionsInput, StatusChangeSubscriptionUncheckedUpdateWithoutConditionsInput>
  }

  export type StatusChangeSubscriptionUpdateWithoutConditionsInput = {
    notifications?: StatusChangeNotificationUpdateManyWithoutSubscriptionNestedInput
    delegate_aux_productSubscription?: ProductSubscriptionUpdateOneRequiredWithoutDelegate_aux_statusChangeSubscriptionNestedInput
  }

  export type StatusChangeSubscriptionUncheckedUpdateWithoutConditionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    notifications?: StatusChangeNotificationUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type StatusChangeSubscriptionConditionCreateWithoutSubscriptionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromStatus?: StatusChangeSubscriptionConditionCreatefromStatusInput | $Enums.ProductStatus[]
    toStatus?: StatusChangeSubscriptionConditionCreatetoStatusInput | $Enums.ProductStatus[]
  }

  export type StatusChangeSubscriptionConditionUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromStatus?: StatusChangeSubscriptionConditionCreatefromStatusInput | $Enums.ProductStatus[]
    toStatus?: StatusChangeSubscriptionConditionCreatetoStatusInput | $Enums.ProductStatus[]
  }

  export type StatusChangeSubscriptionConditionCreateOrConnectWithoutSubscriptionInput = {
    where: StatusChangeSubscriptionConditionWhereUniqueInput
    create: XOR<StatusChangeSubscriptionConditionCreateWithoutSubscriptionInput, StatusChangeSubscriptionConditionUncheckedCreateWithoutSubscriptionInput>
  }

  export type StatusChangeSubscriptionConditionCreateManySubscriptionInputEnvelope = {
    data: StatusChangeSubscriptionConditionCreateManySubscriptionInput | StatusChangeSubscriptionConditionCreateManySubscriptionInput[]
    skipDuplicates?: boolean
  }

  export type StatusChangeNotificationCreateWithoutSubscriptionInput = {
    previousStatus: $Enums.ProductStatus
    newStatus: $Enums.ProductStatus
    productRecord: ProductRecordCreateNestedOneWithoutStatusChangeNotificationsInput
    delegate_aux_notification?: NotificationCreateNestedOneWithoutDelegate_aux_statusChangeNotificationInput
  }

  export type StatusChangeNotificationUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    productRecordId: string
    previousStatus: $Enums.ProductStatus
    newStatus: $Enums.ProductStatus
  }

  export type StatusChangeNotificationCreateOrConnectWithoutSubscriptionInput = {
    where: StatusChangeNotificationWhereUniqueInput
    create: XOR<StatusChangeNotificationCreateWithoutSubscriptionInput, StatusChangeNotificationUncheckedCreateWithoutSubscriptionInput>
  }

  export type StatusChangeNotificationCreateManySubscriptionInputEnvelope = {
    data: StatusChangeNotificationCreateManySubscriptionInput | StatusChangeNotificationCreateManySubscriptionInput[]
    skipDuplicates?: boolean
  }

  export type ProductSubscriptionCreateWithoutDelegate_aux_statusChangeSubscriptionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionType: $Enums.SubscriptionType
    enabled?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedProductSubscriptionsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProductSubscriptionsInput
    user: UserCreateNestedOneWithoutProductSubscriptionsInput
    product: ProductCreateNestedOneWithoutSubscriptionsInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
  }

  export type ProductSubscriptionUncheckedCreateWithoutDelegate_aux_statusChangeSubscriptionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    subscriptionType: $Enums.SubscriptionType
    userId: string
    productId: string
    enabled?: boolean
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUncheckedCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
  }

  export type ProductSubscriptionCreateOrConnectWithoutDelegate_aux_statusChangeSubscriptionInput = {
    where: ProductSubscriptionWhereUniqueInput
    create: XOR<ProductSubscriptionCreateWithoutDelegate_aux_statusChangeSubscriptionInput, ProductSubscriptionUncheckedCreateWithoutDelegate_aux_statusChangeSubscriptionInput>
  }

  export type StatusChangeSubscriptionConditionUpsertWithWhereUniqueWithoutSubscriptionInput = {
    where: StatusChangeSubscriptionConditionWhereUniqueInput
    update: XOR<StatusChangeSubscriptionConditionUpdateWithoutSubscriptionInput, StatusChangeSubscriptionConditionUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<StatusChangeSubscriptionConditionCreateWithoutSubscriptionInput, StatusChangeSubscriptionConditionUncheckedCreateWithoutSubscriptionInput>
  }

  export type StatusChangeSubscriptionConditionUpdateWithWhereUniqueWithoutSubscriptionInput = {
    where: StatusChangeSubscriptionConditionWhereUniqueInput
    data: XOR<StatusChangeSubscriptionConditionUpdateWithoutSubscriptionInput, StatusChangeSubscriptionConditionUncheckedUpdateWithoutSubscriptionInput>
  }

  export type StatusChangeSubscriptionConditionUpdateManyWithWhereWithoutSubscriptionInput = {
    where: StatusChangeSubscriptionConditionScalarWhereInput
    data: XOR<StatusChangeSubscriptionConditionUpdateManyMutationInput, StatusChangeSubscriptionConditionUncheckedUpdateManyWithoutSubscriptionInput>
  }

  export type StatusChangeSubscriptionConditionScalarWhereInput = {
    AND?: StatusChangeSubscriptionConditionScalarWhereInput | StatusChangeSubscriptionConditionScalarWhereInput[]
    OR?: StatusChangeSubscriptionConditionScalarWhereInput[]
    NOT?: StatusChangeSubscriptionConditionScalarWhereInput | StatusChangeSubscriptionConditionScalarWhereInput[]
    id?: UuidFilter<"StatusChangeSubscriptionCondition"> | string
    createdAt?: DateTimeFilter<"StatusChangeSubscriptionCondition"> | Date | string
    updatedAt?: DateTimeFilter<"StatusChangeSubscriptionCondition"> | Date | string
    fromStatus?: EnumProductStatusNullableListFilter<"StatusChangeSubscriptionCondition">
    toStatus?: EnumProductStatusNullableListFilter<"StatusChangeSubscriptionCondition">
    subscriptionId?: UuidFilter<"StatusChangeSubscriptionCondition"> | string
  }

  export type StatusChangeNotificationUpsertWithWhereUniqueWithoutSubscriptionInput = {
    where: StatusChangeNotificationWhereUniqueInput
    update: XOR<StatusChangeNotificationUpdateWithoutSubscriptionInput, StatusChangeNotificationUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<StatusChangeNotificationCreateWithoutSubscriptionInput, StatusChangeNotificationUncheckedCreateWithoutSubscriptionInput>
  }

  export type StatusChangeNotificationUpdateWithWhereUniqueWithoutSubscriptionInput = {
    where: StatusChangeNotificationWhereUniqueInput
    data: XOR<StatusChangeNotificationUpdateWithoutSubscriptionInput, StatusChangeNotificationUncheckedUpdateWithoutSubscriptionInput>
  }

  export type StatusChangeNotificationUpdateManyWithWhereWithoutSubscriptionInput = {
    where: StatusChangeNotificationScalarWhereInput
    data: XOR<StatusChangeNotificationUpdateManyMutationInput, StatusChangeNotificationUncheckedUpdateManyWithoutSubscriptionInput>
  }

  export type ProductSubscriptionUpsertWithoutDelegate_aux_statusChangeSubscriptionInput = {
    update: XOR<ProductSubscriptionUpdateWithoutDelegate_aux_statusChangeSubscriptionInput, ProductSubscriptionUncheckedUpdateWithoutDelegate_aux_statusChangeSubscriptionInput>
    create: XOR<ProductSubscriptionCreateWithoutDelegate_aux_statusChangeSubscriptionInput, ProductSubscriptionUncheckedCreateWithoutDelegate_aux_statusChangeSubscriptionInput>
    where?: ProductSubscriptionWhereInput
  }

  export type ProductSubscriptionUpdateToOneWithWhereWithoutDelegate_aux_statusChangeSubscriptionInput = {
    where?: ProductSubscriptionWhereInput
    data: XOR<ProductSubscriptionUpdateWithoutDelegate_aux_statusChangeSubscriptionInput, ProductSubscriptionUncheckedUpdateWithoutDelegate_aux_statusChangeSubscriptionInput>
  }

  export type ProductSubscriptionUpdateWithoutDelegate_aux_statusChangeSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductSubscriptionsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductSubscriptionsNestedInput
    user?: UserUpdateOneRequiredWithoutProductSubscriptionsNestedInput
    product?: ProductUpdateOneRequiredWithoutSubscriptionsNestedInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
  }

  export type ProductSubscriptionUncheckedUpdateWithoutDelegate_aux_statusChangeSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUncheckedUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
  }

  export type PriceChangeNotificationCreateWithoutSubscriptionInput = {
    condition: $Enums.PriceChangeSubscriptionCondition
    previousPrice: number
    newPrice: number
    productRecord: ProductRecordCreateNestedOneWithoutPriceChangeNotificationsInput
    delegate_aux_notification?: NotificationCreateNestedOneWithoutDelegate_aux_priceChangeNotificationInput
  }

  export type PriceChangeNotificationUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    productRecordId: string
    condition: $Enums.PriceChangeSubscriptionCondition
    previousPrice: number
    newPrice: number
  }

  export type PriceChangeNotificationCreateOrConnectWithoutSubscriptionInput = {
    where: PriceChangeNotificationWhereUniqueInput
    create: XOR<PriceChangeNotificationCreateWithoutSubscriptionInput, PriceChangeNotificationUncheckedCreateWithoutSubscriptionInput>
  }

  export type PriceChangeNotificationCreateManySubscriptionInputEnvelope = {
    data: PriceChangeNotificationCreateManySubscriptionInput | PriceChangeNotificationCreateManySubscriptionInput[]
    skipDuplicates?: boolean
  }

  export type ProductSubscriptionCreateWithoutDelegate_aux_priceChangeSubscriptionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionType: $Enums.SubscriptionType
    enabled?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedProductSubscriptionsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProductSubscriptionsInput
    user: UserCreateNestedOneWithoutProductSubscriptionsInput
    product: ProductCreateNestedOneWithoutSubscriptionsInput
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
  }

  export type ProductSubscriptionUncheckedCreateWithoutDelegate_aux_priceChangeSubscriptionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    subscriptionType: $Enums.SubscriptionType
    userId: string
    productId: string
    enabled?: boolean
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUncheckedCreateNestedOneWithoutDelegate_aux_productSubscriptionInput
  }

  export type ProductSubscriptionCreateOrConnectWithoutDelegate_aux_priceChangeSubscriptionInput = {
    where: ProductSubscriptionWhereUniqueInput
    create: XOR<ProductSubscriptionCreateWithoutDelegate_aux_priceChangeSubscriptionInput, ProductSubscriptionUncheckedCreateWithoutDelegate_aux_priceChangeSubscriptionInput>
  }

  export type PriceChangeNotificationUpsertWithWhereUniqueWithoutSubscriptionInput = {
    where: PriceChangeNotificationWhereUniqueInput
    update: XOR<PriceChangeNotificationUpdateWithoutSubscriptionInput, PriceChangeNotificationUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<PriceChangeNotificationCreateWithoutSubscriptionInput, PriceChangeNotificationUncheckedCreateWithoutSubscriptionInput>
  }

  export type PriceChangeNotificationUpdateWithWhereUniqueWithoutSubscriptionInput = {
    where: PriceChangeNotificationWhereUniqueInput
    data: XOR<PriceChangeNotificationUpdateWithoutSubscriptionInput, PriceChangeNotificationUncheckedUpdateWithoutSubscriptionInput>
  }

  export type PriceChangeNotificationUpdateManyWithWhereWithoutSubscriptionInput = {
    where: PriceChangeNotificationScalarWhereInput
    data: XOR<PriceChangeNotificationUpdateManyMutationInput, PriceChangeNotificationUncheckedUpdateManyWithoutSubscriptionInput>
  }

  export type ProductSubscriptionUpsertWithoutDelegate_aux_priceChangeSubscriptionInput = {
    update: XOR<ProductSubscriptionUpdateWithoutDelegate_aux_priceChangeSubscriptionInput, ProductSubscriptionUncheckedUpdateWithoutDelegate_aux_priceChangeSubscriptionInput>
    create: XOR<ProductSubscriptionCreateWithoutDelegate_aux_priceChangeSubscriptionInput, ProductSubscriptionUncheckedCreateWithoutDelegate_aux_priceChangeSubscriptionInput>
    where?: ProductSubscriptionWhereInput
  }

  export type ProductSubscriptionUpdateToOneWithWhereWithoutDelegate_aux_priceChangeSubscriptionInput = {
    where?: ProductSubscriptionWhereInput
    data: XOR<ProductSubscriptionUpdateWithoutDelegate_aux_priceChangeSubscriptionInput, ProductSubscriptionUncheckedUpdateWithoutDelegate_aux_priceChangeSubscriptionInput>
  }

  export type ProductSubscriptionUpdateWithoutDelegate_aux_priceChangeSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductSubscriptionsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductSubscriptionsNestedInput
    user?: UserUpdateOneRequiredWithoutProductSubscriptionsNestedInput
    product?: ProductUpdateOneRequiredWithoutSubscriptionsNestedInput
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
  }

  export type ProductSubscriptionUncheckedUpdateWithoutDelegate_aux_priceChangeSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUncheckedUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
  }

  export type UserCreateWithoutCreatedNotificationsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUserInput
    updatedNotifications?: NotificationCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedNotificationsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUserInput
    updatedNotifications?: NotificationUncheckedCreateNestedManyWithoutUpdatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedNotificationsInput, UserUncheckedCreateWithoutCreatedNotificationsInput>
  }

  export type UserCreateWithoutUpdatedNotificationsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedNotificationsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedNotificationsInput, UserUncheckedCreateWithoutUpdatedNotificationsInput>
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationCreateNestedManyWithoutUpdatedByInput
    createdProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProducts?: ProductUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductRecords?: ProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUpdatedByInput
    productSubscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotifications?: NotificationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUpdatedByInput
    processedProductRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type PriceChangeNotificationCreateWithoutDelegate_aux_notificationInput = {
    condition: $Enums.PriceChangeSubscriptionCondition
    previousPrice: number
    newPrice: number
    productRecord: ProductRecordCreateNestedOneWithoutPriceChangeNotificationsInput
    subscription: PriceChangeSubscriptionCreateNestedOneWithoutNotificationsInput
  }

  export type PriceChangeNotificationUncheckedCreateWithoutDelegate_aux_notificationInput = {
    productRecordId: string
    subscriptionId: string
    condition: $Enums.PriceChangeSubscriptionCondition
    previousPrice: number
    newPrice: number
  }

  export type PriceChangeNotificationCreateOrConnectWithoutDelegate_aux_notificationInput = {
    where: PriceChangeNotificationWhereUniqueInput
    create: XOR<PriceChangeNotificationCreateWithoutDelegate_aux_notificationInput, PriceChangeNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
  }

  export type StatusChangeNotificationCreateWithoutDelegate_aux_notificationInput = {
    previousStatus: $Enums.ProductStatus
    newStatus: $Enums.ProductStatus
    productRecord: ProductRecordCreateNestedOneWithoutStatusChangeNotificationsInput
    subscription: StatusChangeSubscriptionCreateNestedOneWithoutNotificationsInput
  }

  export type StatusChangeNotificationUncheckedCreateWithoutDelegate_aux_notificationInput = {
    productRecordId: string
    subscriptionId: string
    previousStatus: $Enums.ProductStatus
    newStatus: $Enums.ProductStatus
  }

  export type StatusChangeNotificationCreateOrConnectWithoutDelegate_aux_notificationInput = {
    where: StatusChangeNotificationWhereUniqueInput
    create: XOR<StatusChangeNotificationCreateWithoutDelegate_aux_notificationInput, StatusChangeNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
  }

  export type NewProductNotificationCreateWithoutDelegate_aux_notificationInput = {
    product: ProductCreateNestedOneWithoutNewProductNotificationsInput
  }

  export type NewProductNotificationUncheckedCreateWithoutDelegate_aux_notificationInput = {
    productId: string
  }

  export type NewProductNotificationCreateOrConnectWithoutDelegate_aux_notificationInput = {
    where: NewProductNotificationWhereUniqueInput
    create: XOR<NewProductNotificationCreateWithoutDelegate_aux_notificationInput, NewProductNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
  }

  export type UserUpsertWithoutCreatedNotificationsInput = {
    update: XOR<UserUpdateWithoutCreatedNotificationsInput, UserUncheckedUpdateWithoutCreatedNotificationsInput>
    create: XOR<UserCreateWithoutCreatedNotificationsInput, UserUncheckedCreateWithoutCreatedNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedNotificationsInput, UserUncheckedUpdateWithoutCreatedNotificationsInput>
  }

  export type UserUpdateWithoutCreatedNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUpdateManyWithoutUserNestedInput
    updatedNotifications?: NotificationUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    updatedNotifications?: NotificationUncheckedUpdateManyWithoutUpdatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutUpdatedNotificationsInput = {
    update: XOR<UserUpdateWithoutUpdatedNotificationsInput, UserUncheckedUpdateWithoutUpdatedNotificationsInput>
    create: XOR<UserCreateWithoutUpdatedNotificationsInput, UserUncheckedCreateWithoutUpdatedNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedNotificationsInput, UserUncheckedUpdateWithoutUpdatedNotificationsInput>
  }

  export type UserUpdateWithoutUpdatedNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUpdateManyWithoutUpdatedByNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProducts?: ProductUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductRecords?: ProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductRecords?: ProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProductSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUpdatedByNestedInput
    productSubscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotifications?: NotificationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProcessedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUpdatedByNestedInput
    processedProductRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PriceChangeNotificationUpsertWithoutDelegate_aux_notificationInput = {
    update: XOR<PriceChangeNotificationUpdateWithoutDelegate_aux_notificationInput, PriceChangeNotificationUncheckedUpdateWithoutDelegate_aux_notificationInput>
    create: XOR<PriceChangeNotificationCreateWithoutDelegate_aux_notificationInput, PriceChangeNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
    where?: PriceChangeNotificationWhereInput
  }

  export type PriceChangeNotificationUpdateToOneWithWhereWithoutDelegate_aux_notificationInput = {
    where?: PriceChangeNotificationWhereInput
    data: XOR<PriceChangeNotificationUpdateWithoutDelegate_aux_notificationInput, PriceChangeNotificationUncheckedUpdateWithoutDelegate_aux_notificationInput>
  }

  export type PriceChangeNotificationUpdateWithoutDelegate_aux_notificationInput = {
    condition?: EnumPriceChangeSubscriptionConditionFieldUpdateOperationsInput | $Enums.PriceChangeSubscriptionCondition
    previousPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
    productRecord?: ProductRecordUpdateOneRequiredWithoutPriceChangeNotificationsNestedInput
    subscription?: PriceChangeSubscriptionUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type PriceChangeNotificationUncheckedUpdateWithoutDelegate_aux_notificationInput = {
    productRecordId?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    condition?: EnumPriceChangeSubscriptionConditionFieldUpdateOperationsInput | $Enums.PriceChangeSubscriptionCondition
    previousPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type StatusChangeNotificationUpsertWithoutDelegate_aux_notificationInput = {
    update: XOR<StatusChangeNotificationUpdateWithoutDelegate_aux_notificationInput, StatusChangeNotificationUncheckedUpdateWithoutDelegate_aux_notificationInput>
    create: XOR<StatusChangeNotificationCreateWithoutDelegate_aux_notificationInput, StatusChangeNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
    where?: StatusChangeNotificationWhereInput
  }

  export type StatusChangeNotificationUpdateToOneWithWhereWithoutDelegate_aux_notificationInput = {
    where?: StatusChangeNotificationWhereInput
    data: XOR<StatusChangeNotificationUpdateWithoutDelegate_aux_notificationInput, StatusChangeNotificationUncheckedUpdateWithoutDelegate_aux_notificationInput>
  }

  export type StatusChangeNotificationUpdateWithoutDelegate_aux_notificationInput = {
    previousStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    newStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    productRecord?: ProductRecordUpdateOneRequiredWithoutStatusChangeNotificationsNestedInput
    subscription?: StatusChangeSubscriptionUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type StatusChangeNotificationUncheckedUpdateWithoutDelegate_aux_notificationInput = {
    productRecordId?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    previousStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    newStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
  }

  export type NewProductNotificationUpsertWithoutDelegate_aux_notificationInput = {
    update: XOR<NewProductNotificationUpdateWithoutDelegate_aux_notificationInput, NewProductNotificationUncheckedUpdateWithoutDelegate_aux_notificationInput>
    create: XOR<NewProductNotificationCreateWithoutDelegate_aux_notificationInput, NewProductNotificationUncheckedCreateWithoutDelegate_aux_notificationInput>
    where?: NewProductNotificationWhereInput
  }

  export type NewProductNotificationUpdateToOneWithWhereWithoutDelegate_aux_notificationInput = {
    where?: NewProductNotificationWhereInput
    data: XOR<NewProductNotificationUpdateWithoutDelegate_aux_notificationInput, NewProductNotificationUncheckedUpdateWithoutDelegate_aux_notificationInput>
  }

  export type NewProductNotificationUpdateWithoutDelegate_aux_notificationInput = {
    product?: ProductUpdateOneRequiredWithoutNewProductNotificationsNestedInput
  }

  export type NewProductNotificationUncheckedUpdateWithoutDelegate_aux_notificationInput = {
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductRecordCreateWithoutPriceChangeNotificationsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timestamp?: Date | string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    createdBy: UserCreateNestedOneWithoutCreatedProductRecordsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProductRecordsInput
    product: ProductCreateNestedOneWithoutRecordsInput
    errors?: ProductRecordErrorCreateNestedManyWithoutRecordInput
    statusChangeNotifications?: StatusChangeNotificationCreateNestedManyWithoutProductRecordInput
    processedRecords?: ProcessedProductRecordCreateNestedManyWithoutRecordInput
  }

  export type ProductRecordUncheckedCreateWithoutPriceChangeNotificationsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    timestamp?: Date | string
    productId: string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    errors?: ProductRecordErrorUncheckedCreateNestedManyWithoutRecordInput
    statusChangeNotifications?: StatusChangeNotificationUncheckedCreateNestedManyWithoutProductRecordInput
    processedRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutRecordInput
  }

  export type ProductRecordCreateOrConnectWithoutPriceChangeNotificationsInput = {
    where: ProductRecordWhereUniqueInput
    create: XOR<ProductRecordCreateWithoutPriceChangeNotificationsInput, ProductRecordUncheckedCreateWithoutPriceChangeNotificationsInput>
  }

  export type PriceChangeSubscriptionCreateWithoutNotificationsInput = {
    conditions?: PriceChangeSubscriptionCreateconditionsInput | $Enums.PriceChangeSubscriptionCondition[]
    delegate_aux_productSubscription?: ProductSubscriptionCreateNestedOneWithoutDelegate_aux_priceChangeSubscriptionInput
  }

  export type PriceChangeSubscriptionUncheckedCreateWithoutNotificationsInput = {
    id?: string
    conditions?: PriceChangeSubscriptionCreateconditionsInput | $Enums.PriceChangeSubscriptionCondition[]
  }

  export type PriceChangeSubscriptionCreateOrConnectWithoutNotificationsInput = {
    where: PriceChangeSubscriptionWhereUniqueInput
    create: XOR<PriceChangeSubscriptionCreateWithoutNotificationsInput, PriceChangeSubscriptionUncheckedCreateWithoutNotificationsInput>
  }

  export type NotificationCreateWithoutDelegate_aux_priceChangeNotificationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedNotificationsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedNotificationsInput
    user: UserCreateNestedOneWithoutNotificationsInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_newProductNotification?: NewProductNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
  }

  export type NotificationUncheckedCreateWithoutDelegate_aux_priceChangeNotificationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    userId: string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_newProductNotification?: NewProductNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
  }

  export type NotificationCreateOrConnectWithoutDelegate_aux_priceChangeNotificationInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutDelegate_aux_priceChangeNotificationInput, NotificationUncheckedCreateWithoutDelegate_aux_priceChangeNotificationInput>
  }

  export type ProductRecordUpsertWithoutPriceChangeNotificationsInput = {
    update: XOR<ProductRecordUpdateWithoutPriceChangeNotificationsInput, ProductRecordUncheckedUpdateWithoutPriceChangeNotificationsInput>
    create: XOR<ProductRecordCreateWithoutPriceChangeNotificationsInput, ProductRecordUncheckedCreateWithoutPriceChangeNotificationsInput>
    where?: ProductRecordWhereInput
  }

  export type ProductRecordUpdateToOneWithWhereWithoutPriceChangeNotificationsInput = {
    where?: ProductRecordWhereInput
    data: XOR<ProductRecordUpdateWithoutPriceChangeNotificationsInput, ProductRecordUncheckedUpdateWithoutPriceChangeNotificationsInput>
  }

  export type ProductRecordUpdateWithoutPriceChangeNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductRecordsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductRecordsNestedInput
    product?: ProductUpdateOneRequiredWithoutRecordsNestedInput
    errors?: ProductRecordErrorUpdateManyWithoutRecordNestedInput
    statusChangeNotifications?: StatusChangeNotificationUpdateManyWithoutProductRecordNestedInput
    processedRecords?: ProcessedProductRecordUpdateManyWithoutRecordNestedInput
  }

  export type ProductRecordUncheckedUpdateWithoutPriceChangeNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    errors?: ProductRecordErrorUncheckedUpdateManyWithoutRecordNestedInput
    statusChangeNotifications?: StatusChangeNotificationUncheckedUpdateManyWithoutProductRecordNestedInput
    processedRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutRecordNestedInput
  }

  export type PriceChangeSubscriptionUpsertWithoutNotificationsInput = {
    update: XOR<PriceChangeSubscriptionUpdateWithoutNotificationsInput, PriceChangeSubscriptionUncheckedUpdateWithoutNotificationsInput>
    create: XOR<PriceChangeSubscriptionCreateWithoutNotificationsInput, PriceChangeSubscriptionUncheckedCreateWithoutNotificationsInput>
    where?: PriceChangeSubscriptionWhereInput
  }

  export type PriceChangeSubscriptionUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: PriceChangeSubscriptionWhereInput
    data: XOR<PriceChangeSubscriptionUpdateWithoutNotificationsInput, PriceChangeSubscriptionUncheckedUpdateWithoutNotificationsInput>
  }

  export type PriceChangeSubscriptionUpdateWithoutNotificationsInput = {
    conditions?: PriceChangeSubscriptionUpdateconditionsInput | $Enums.PriceChangeSubscriptionCondition[]
    delegate_aux_productSubscription?: ProductSubscriptionUpdateOneRequiredWithoutDelegate_aux_priceChangeSubscriptionNestedInput
  }

  export type PriceChangeSubscriptionUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    conditions?: PriceChangeSubscriptionUpdateconditionsInput | $Enums.PriceChangeSubscriptionCondition[]
  }

  export type NotificationUpsertWithoutDelegate_aux_priceChangeNotificationInput = {
    update: XOR<NotificationUpdateWithoutDelegate_aux_priceChangeNotificationInput, NotificationUncheckedUpdateWithoutDelegate_aux_priceChangeNotificationInput>
    create: XOR<NotificationCreateWithoutDelegate_aux_priceChangeNotificationInput, NotificationUncheckedCreateWithoutDelegate_aux_priceChangeNotificationInput>
    where?: NotificationWhereInput
  }

  export type NotificationUpdateToOneWithWhereWithoutDelegate_aux_priceChangeNotificationInput = {
    where?: NotificationWhereInput
    data: XOR<NotificationUpdateWithoutDelegate_aux_priceChangeNotificationInput, NotificationUncheckedUpdateWithoutDelegate_aux_priceChangeNotificationInput>
  }

  export type NotificationUpdateWithoutDelegate_aux_priceChangeNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedNotificationsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedNotificationsNestedInput
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_newProductNotification?: NewProductNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutDelegate_aux_priceChangeNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_newProductNotification?: NewProductNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
  }

  export type ProductRecordCreateWithoutStatusChangeNotificationsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timestamp?: Date | string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    createdBy: UserCreateNestedOneWithoutCreatedProductRecordsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProductRecordsInput
    product: ProductCreateNestedOneWithoutRecordsInput
    errors?: ProductRecordErrorCreateNestedManyWithoutRecordInput
    priceChangeNotifications?: PriceChangeNotificationCreateNestedManyWithoutProductRecordInput
    processedRecords?: ProcessedProductRecordCreateNestedManyWithoutRecordInput
  }

  export type ProductRecordUncheckedCreateWithoutStatusChangeNotificationsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    timestamp?: Date | string
    productId: string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    errors?: ProductRecordErrorUncheckedCreateNestedManyWithoutRecordInput
    priceChangeNotifications?: PriceChangeNotificationUncheckedCreateNestedManyWithoutProductRecordInput
    processedRecords?: ProcessedProductRecordUncheckedCreateNestedManyWithoutRecordInput
  }

  export type ProductRecordCreateOrConnectWithoutStatusChangeNotificationsInput = {
    where: ProductRecordWhereUniqueInput
    create: XOR<ProductRecordCreateWithoutStatusChangeNotificationsInput, ProductRecordUncheckedCreateWithoutStatusChangeNotificationsInput>
  }

  export type StatusChangeSubscriptionCreateWithoutNotificationsInput = {
    conditions?: StatusChangeSubscriptionConditionCreateNestedManyWithoutSubscriptionInput
    delegate_aux_productSubscription?: ProductSubscriptionCreateNestedOneWithoutDelegate_aux_statusChangeSubscriptionInput
  }

  export type StatusChangeSubscriptionUncheckedCreateWithoutNotificationsInput = {
    id?: string
    conditions?: StatusChangeSubscriptionConditionUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type StatusChangeSubscriptionCreateOrConnectWithoutNotificationsInput = {
    where: StatusChangeSubscriptionWhereUniqueInput
    create: XOR<StatusChangeSubscriptionCreateWithoutNotificationsInput, StatusChangeSubscriptionUncheckedCreateWithoutNotificationsInput>
  }

  export type NotificationCreateWithoutDelegate_aux_statusChangeNotificationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedNotificationsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedNotificationsInput
    user: UserCreateNestedOneWithoutNotificationsInput
    delegate_aux_priceChangeNotification?: PriceChangeNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_newProductNotification?: NewProductNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
  }

  export type NotificationUncheckedCreateWithoutDelegate_aux_statusChangeNotificationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    userId: string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_newProductNotification?: NewProductNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
  }

  export type NotificationCreateOrConnectWithoutDelegate_aux_statusChangeNotificationInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutDelegate_aux_statusChangeNotificationInput, NotificationUncheckedCreateWithoutDelegate_aux_statusChangeNotificationInput>
  }

  export type ProductRecordUpsertWithoutStatusChangeNotificationsInput = {
    update: XOR<ProductRecordUpdateWithoutStatusChangeNotificationsInput, ProductRecordUncheckedUpdateWithoutStatusChangeNotificationsInput>
    create: XOR<ProductRecordCreateWithoutStatusChangeNotificationsInput, ProductRecordUncheckedCreateWithoutStatusChangeNotificationsInput>
    where?: ProductRecordWhereInput
  }

  export type ProductRecordUpdateToOneWithWhereWithoutStatusChangeNotificationsInput = {
    where?: ProductRecordWhereInput
    data: XOR<ProductRecordUpdateWithoutStatusChangeNotificationsInput, ProductRecordUncheckedUpdateWithoutStatusChangeNotificationsInput>
  }

  export type ProductRecordUpdateWithoutStatusChangeNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductRecordsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductRecordsNestedInput
    product?: ProductUpdateOneRequiredWithoutRecordsNestedInput
    errors?: ProductRecordErrorUpdateManyWithoutRecordNestedInput
    priceChangeNotifications?: PriceChangeNotificationUpdateManyWithoutProductRecordNestedInput
    processedRecords?: ProcessedProductRecordUpdateManyWithoutRecordNestedInput
  }

  export type ProductRecordUncheckedUpdateWithoutStatusChangeNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    errors?: ProductRecordErrorUncheckedUpdateManyWithoutRecordNestedInput
    priceChangeNotifications?: PriceChangeNotificationUncheckedUpdateManyWithoutProductRecordNestedInput
    processedRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutRecordNestedInput
  }

  export type StatusChangeSubscriptionUpsertWithoutNotificationsInput = {
    update: XOR<StatusChangeSubscriptionUpdateWithoutNotificationsInput, StatusChangeSubscriptionUncheckedUpdateWithoutNotificationsInput>
    create: XOR<StatusChangeSubscriptionCreateWithoutNotificationsInput, StatusChangeSubscriptionUncheckedCreateWithoutNotificationsInput>
    where?: StatusChangeSubscriptionWhereInput
  }

  export type StatusChangeSubscriptionUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: StatusChangeSubscriptionWhereInput
    data: XOR<StatusChangeSubscriptionUpdateWithoutNotificationsInput, StatusChangeSubscriptionUncheckedUpdateWithoutNotificationsInput>
  }

  export type StatusChangeSubscriptionUpdateWithoutNotificationsInput = {
    conditions?: StatusChangeSubscriptionConditionUpdateManyWithoutSubscriptionNestedInput
    delegate_aux_productSubscription?: ProductSubscriptionUpdateOneRequiredWithoutDelegate_aux_statusChangeSubscriptionNestedInput
  }

  export type StatusChangeSubscriptionUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    conditions?: StatusChangeSubscriptionConditionUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type NotificationUpsertWithoutDelegate_aux_statusChangeNotificationInput = {
    update: XOR<NotificationUpdateWithoutDelegate_aux_statusChangeNotificationInput, NotificationUncheckedUpdateWithoutDelegate_aux_statusChangeNotificationInput>
    create: XOR<NotificationCreateWithoutDelegate_aux_statusChangeNotificationInput, NotificationUncheckedCreateWithoutDelegate_aux_statusChangeNotificationInput>
    where?: NotificationWhereInput
  }

  export type NotificationUpdateToOneWithWhereWithoutDelegate_aux_statusChangeNotificationInput = {
    where?: NotificationWhereInput
    data: XOR<NotificationUpdateWithoutDelegate_aux_statusChangeNotificationInput, NotificationUncheckedUpdateWithoutDelegate_aux_statusChangeNotificationInput>
  }

  export type NotificationUpdateWithoutDelegate_aux_statusChangeNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedNotificationsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedNotificationsNestedInput
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_newProductNotification?: NewProductNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutDelegate_aux_statusChangeNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_newProductNotification?: NewProductNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
  }

  export type ProductCreateWithoutNewProductNotificationsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name?: string | null
    slug: string
    code?: string | null
    imageSrc?: string | null
    status?: $Enums.ProductStatus | null
    statusLastUpdatedAt?: Date | string | null
    statusAsOf?: Date | string | null
    price?: number | null
    priceLastUpdatedAt?: Date | string | null
    priceAsOf?: Date | string | null
    category: $Enums.ProductCategory
    subCategories?: ProductCreatesubCategoriesInput | $Enums.ProductSubCategory[]
    createdBy: UserCreateNestedOneWithoutCreatedProductsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProductsInput
    records?: ProductRecordCreateNestedManyWithoutProductInput
    subscriptions?: ProductSubscriptionCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutNewProductNotificationsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    name?: string | null
    slug: string
    code?: string | null
    imageSrc?: string | null
    status?: $Enums.ProductStatus | null
    statusLastUpdatedAt?: Date | string | null
    statusAsOf?: Date | string | null
    price?: number | null
    priceLastUpdatedAt?: Date | string | null
    priceAsOf?: Date | string | null
    category: $Enums.ProductCategory
    subCategories?: ProductCreatesubCategoriesInput | $Enums.ProductSubCategory[]
    records?: ProductRecordUncheckedCreateNestedManyWithoutProductInput
    subscriptions?: ProductSubscriptionUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutNewProductNotificationsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutNewProductNotificationsInput, ProductUncheckedCreateWithoutNewProductNotificationsInput>
  }

  export type NotificationCreateWithoutDelegate_aux_newProductNotificationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedNotificationsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedNotificationsInput
    user: UserCreateNestedOneWithoutNotificationsInput
    delegate_aux_priceChangeNotification?: PriceChangeNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationCreateNestedOneWithoutDelegate_aux_notificationInput
  }

  export type NotificationUncheckedCreateWithoutDelegate_aux_newProductNotificationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    userId: string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUncheckedCreateNestedOneWithoutDelegate_aux_notificationInput
  }

  export type NotificationCreateOrConnectWithoutDelegate_aux_newProductNotificationInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutDelegate_aux_newProductNotificationInput, NotificationUncheckedCreateWithoutDelegate_aux_newProductNotificationInput>
  }

  export type ProductUpsertWithoutNewProductNotificationsInput = {
    update: XOR<ProductUpdateWithoutNewProductNotificationsInput, ProductUncheckedUpdateWithoutNewProductNotificationsInput>
    create: XOR<ProductCreateWithoutNewProductNotificationsInput, ProductUncheckedCreateWithoutNewProductNotificationsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutNewProductNotificationsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutNewProductNotificationsInput, ProductUncheckedUpdateWithoutNewProductNotificationsInput>
  }

  export type ProductUpdateWithoutNewProductNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    imageSrc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    statusLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    priceLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priceAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    subCategories?: ProductUpdatesubCategoriesInput | $Enums.ProductSubCategory[]
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductsNestedInput
    records?: ProductRecordUpdateManyWithoutProductNestedInput
    subscriptions?: ProductSubscriptionUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutNewProductNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    imageSrc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    statusLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    priceLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priceAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    subCategories?: ProductUpdatesubCategoriesInput | $Enums.ProductSubCategory[]
    records?: ProductRecordUncheckedUpdateManyWithoutProductNestedInput
    subscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutProductNestedInput
  }

  export type NotificationUpsertWithoutDelegate_aux_newProductNotificationInput = {
    update: XOR<NotificationUpdateWithoutDelegate_aux_newProductNotificationInput, NotificationUncheckedUpdateWithoutDelegate_aux_newProductNotificationInput>
    create: XOR<NotificationCreateWithoutDelegate_aux_newProductNotificationInput, NotificationUncheckedCreateWithoutDelegate_aux_newProductNotificationInput>
    where?: NotificationWhereInput
  }

  export type NotificationUpdateToOneWithWhereWithoutDelegate_aux_newProductNotificationInput = {
    where?: NotificationWhereInput
    data: XOR<NotificationUpdateWithoutDelegate_aux_newProductNotificationInput, NotificationUncheckedUpdateWithoutDelegate_aux_newProductNotificationInput>
  }

  export type NotificationUpdateWithoutDelegate_aux_newProductNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedNotificationsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedNotificationsNestedInput
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutDelegate_aux_newProductNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
  }

  export type ProductCreateManyCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    name?: string | null
    slug: string
    code?: string | null
    imageSrc?: string | null
    status?: $Enums.ProductStatus | null
    statusLastUpdatedAt?: Date | string | null
    statusAsOf?: Date | string | null
    price?: number | null
    priceLastUpdatedAt?: Date | string | null
    priceAsOf?: Date | string | null
    category: $Enums.ProductCategory
    subCategories?: ProductCreatesubCategoriesInput | $Enums.ProductSubCategory[]
  }

  export type ProductCreateManyUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    name?: string | null
    slug: string
    code?: string | null
    imageSrc?: string | null
    status?: $Enums.ProductStatus | null
    statusLastUpdatedAt?: Date | string | null
    statusAsOf?: Date | string | null
    price?: number | null
    priceLastUpdatedAt?: Date | string | null
    priceAsOf?: Date | string | null
    category: $Enums.ProductCategory
    subCategories?: ProductCreatesubCategoriesInput | $Enums.ProductSubCategory[]
  }

  export type ProductRecordCreateManyCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    timestamp?: Date | string
    productId: string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
  }

  export type ProductRecordCreateManyUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    timestamp?: Date | string
    productId: string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
  }

  export type ProductSubscriptionCreateManyCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    subscriptionType: $Enums.SubscriptionType
    userId: string
    productId: string
    enabled?: boolean
  }

  export type ProductSubscriptionCreateManyUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    subscriptionType: $Enums.SubscriptionType
    userId: string
    productId: string
    enabled?: boolean
  }

  export type ProductSubscriptionCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    subscriptionType: $Enums.SubscriptionType
    productId: string
    enabled?: boolean
  }

  export type NotificationCreateManyCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    userId: string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
  }

  export type NotificationCreateManyUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    userId: string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    notificationType: $Enums.NotificationType
    state: $Enums.NotificationState
    stateAsOf: Date | string
    failedAt?: Date | string | null
    sentAt?: Date | string | null
  }

  export type ProcessedProductRecordCreateManyCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    recordId: string
    userId: string
  }

  export type ProcessedProductRecordCreateManyUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    recordId: string
    userId: string
  }

  export type ProcessedProductRecordCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    recordId: string
  }

  export type ProductUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    imageSrc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    statusLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    priceLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priceAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    subCategories?: ProductUpdatesubCategoriesInput | $Enums.ProductSubCategory[]
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductsNestedInput
    records?: ProductRecordUpdateManyWithoutProductNestedInput
    subscriptions?: ProductSubscriptionUpdateManyWithoutProductNestedInput
    newProductNotifications?: NewProductNotificationUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    imageSrc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    statusLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    priceLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priceAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    subCategories?: ProductUpdatesubCategoriesInput | $Enums.ProductSubCategory[]
    records?: ProductRecordUncheckedUpdateManyWithoutProductNestedInput
    subscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutProductNestedInput
    newProductNotifications?: NewProductNotificationUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    imageSrc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    statusLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    priceLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priceAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    subCategories?: ProductUpdatesubCategoriesInput | $Enums.ProductSubCategory[]
  }

  export type ProductUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    imageSrc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    statusLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    priceLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priceAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    subCategories?: ProductUpdatesubCategoriesInput | $Enums.ProductSubCategory[]
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductsNestedInput
    records?: ProductRecordUpdateManyWithoutProductNestedInput
    subscriptions?: ProductSubscriptionUpdateManyWithoutProductNestedInput
    newProductNotifications?: NewProductNotificationUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    imageSrc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    statusLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    priceLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priceAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    subCategories?: ProductUpdatesubCategoriesInput | $Enums.ProductSubCategory[]
    records?: ProductRecordUncheckedUpdateManyWithoutProductNestedInput
    subscriptions?: ProductSubscriptionUncheckedUpdateManyWithoutProductNestedInput
    newProductNotifications?: NewProductNotificationUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    imageSrc?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    statusLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    statusAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    priceLastUpdatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priceAsOf?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: EnumProductCategoryFieldUpdateOperationsInput | $Enums.ProductCategory
    subCategories?: ProductUpdatesubCategoriesInput | $Enums.ProductSubCategory[]
  }

  export type ProductRecordUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductRecordsNestedInput
    product?: ProductUpdateOneRequiredWithoutRecordsNestedInput
    errors?: ProductRecordErrorUpdateManyWithoutRecordNestedInput
    statusChangeNotifications?: StatusChangeNotificationUpdateManyWithoutProductRecordNestedInput
    priceChangeNotifications?: PriceChangeNotificationUpdateManyWithoutProductRecordNestedInput
    processedRecords?: ProcessedProductRecordUpdateManyWithoutRecordNestedInput
  }

  export type ProductRecordUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    errors?: ProductRecordErrorUncheckedUpdateManyWithoutRecordNestedInput
    statusChangeNotifications?: StatusChangeNotificationUncheckedUpdateManyWithoutProductRecordNestedInput
    priceChangeNotifications?: PriceChangeNotificationUncheckedUpdateManyWithoutProductRecordNestedInput
    processedRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutRecordNestedInput
  }

  export type ProductRecordUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
  }

  export type ProductRecordUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductRecordsNestedInput
    product?: ProductUpdateOneRequiredWithoutRecordsNestedInput
    errors?: ProductRecordErrorUpdateManyWithoutRecordNestedInput
    statusChangeNotifications?: StatusChangeNotificationUpdateManyWithoutProductRecordNestedInput
    priceChangeNotifications?: PriceChangeNotificationUpdateManyWithoutProductRecordNestedInput
    processedRecords?: ProcessedProductRecordUpdateManyWithoutRecordNestedInput
  }

  export type ProductRecordUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    errors?: ProductRecordErrorUncheckedUpdateManyWithoutRecordNestedInput
    statusChangeNotifications?: StatusChangeNotificationUncheckedUpdateManyWithoutProductRecordNestedInput
    priceChangeNotifications?: PriceChangeNotificationUncheckedUpdateManyWithoutProductRecordNestedInput
    processedRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutRecordNestedInput
  }

  export type ProductRecordUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
  }

  export type ProductSubscriptionUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    enabled?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductSubscriptionsNestedInput
    user?: UserUpdateOneRequiredWithoutProductSubscriptionsNestedInput
    product?: ProductUpdateOneRequiredWithoutSubscriptionsNestedInput
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
  }

  export type ProductSubscriptionUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUncheckedUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUncheckedUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
  }

  export type ProductSubscriptionUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductSubscriptionUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductSubscriptionsNestedInput
    user?: UserUpdateOneRequiredWithoutProductSubscriptionsNestedInput
    product?: ProductUpdateOneRequiredWithoutSubscriptionsNestedInput
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
  }

  export type ProductSubscriptionUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUncheckedUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUncheckedUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
  }

  export type ProductSubscriptionUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductSubscriptionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductSubscriptionsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductSubscriptionsNestedInput
    product?: ProductUpdateOneRequiredWithoutSubscriptionsNestedInput
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
  }

  export type ProductSubscriptionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    productId?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUncheckedUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUncheckedUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
  }

  export type ProductSubscriptionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    productId?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedNotificationsNestedInput
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_newProductNotification?: NewProductNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_newProductNotification?: NewProductNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
  }

  export type NotificationUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedNotificationsNestedInput
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_newProductNotification?: NewProductNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_newProductNotification?: NewProductNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
  }

  export type NotificationUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedNotificationsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedNotificationsNestedInput
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_newProductNotification?: NewProductNotificationUpdateOneWithoutDelegate_aux_notificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delegate_aux_priceChangeNotification?: PriceChangeNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_statusChangeNotification?: StatusChangeNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
    delegate_aux_newProductNotification?: NewProductNotificationUncheckedUpdateOneWithoutDelegate_aux_notificationNestedInput
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    state?: EnumNotificationStateFieldUpdateOperationsInput | $Enums.NotificationState
    stateAsOf?: DateTimeFieldUpdateOperationsInput | Date | string
    failedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProcessedProductRecordUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProcessedProductRecordsNestedInput
    record?: ProductRecordUpdateOneRequiredWithoutProcessedRecordsNestedInput
    user?: UserUpdateOneRequiredWithoutProcessedProductRecordsNestedInput
  }

  export type ProcessedProductRecordUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessedProductRecordUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessedProductRecordUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedProcessedProductRecordsNestedInput
    record?: ProductRecordUpdateOneRequiredWithoutProcessedRecordsNestedInput
    user?: UserUpdateOneRequiredWithoutProcessedProductRecordsNestedInput
  }

  export type ProcessedProductRecordUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessedProductRecordUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessedProductRecordUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedProcessedProductRecordsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProcessedProductRecordsNestedInput
    record?: ProductRecordUpdateOneRequiredWithoutProcessedRecordsNestedInput
  }

  export type ProcessedProductRecordUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessedProductRecordUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductRecordErrorCreateManyRecordInput = {
    id?: string
    errorId: string
    errorCode: $Enums.ScrapingErrorCode
    field: $Enums.ProductRecordDataField
    message: string
  }

  export type StatusChangeNotificationCreateManyProductRecordInput = {
    id?: string
    subscriptionId: string
    previousStatus: $Enums.ProductStatus
    newStatus: $Enums.ProductStatus
  }

  export type PriceChangeNotificationCreateManyProductRecordInput = {
    id?: string
    subscriptionId: string
    condition: $Enums.PriceChangeSubscriptionCondition
    previousPrice: number
    newPrice: number
  }

  export type ProcessedProductRecordCreateManyRecordInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    userId: string
  }

  export type ProductRecordErrorUpdateWithoutRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    errorId?: StringFieldUpdateOperationsInput | string
    errorCode?: EnumScrapingErrorCodeFieldUpdateOperationsInput | $Enums.ScrapingErrorCode
    field?: EnumProductRecordDataFieldFieldUpdateOperationsInput | $Enums.ProductRecordDataField
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ProductRecordErrorUncheckedUpdateWithoutRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    errorId?: StringFieldUpdateOperationsInput | string
    errorCode?: EnumScrapingErrorCodeFieldUpdateOperationsInput | $Enums.ScrapingErrorCode
    field?: EnumProductRecordDataFieldFieldUpdateOperationsInput | $Enums.ProductRecordDataField
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ProductRecordErrorUncheckedUpdateManyWithoutRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    errorId?: StringFieldUpdateOperationsInput | string
    errorCode?: EnumScrapingErrorCodeFieldUpdateOperationsInput | $Enums.ScrapingErrorCode
    field?: EnumProductRecordDataFieldFieldUpdateOperationsInput | $Enums.ProductRecordDataField
    message?: StringFieldUpdateOperationsInput | string
  }

  export type StatusChangeNotificationUpdateWithoutProductRecordInput = {
    previousStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    newStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    subscription?: StatusChangeSubscriptionUpdateOneRequiredWithoutNotificationsNestedInput
    delegate_aux_notification?: NotificationUpdateOneRequiredWithoutDelegate_aux_statusChangeNotificationNestedInput
  }

  export type StatusChangeNotificationUncheckedUpdateWithoutProductRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    previousStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    newStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
  }

  export type StatusChangeNotificationUncheckedUpdateManyWithoutProductRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    previousStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    newStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
  }

  export type PriceChangeNotificationUpdateWithoutProductRecordInput = {
    condition?: EnumPriceChangeSubscriptionConditionFieldUpdateOperationsInput | $Enums.PriceChangeSubscriptionCondition
    previousPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
    subscription?: PriceChangeSubscriptionUpdateOneRequiredWithoutNotificationsNestedInput
    delegate_aux_notification?: NotificationUpdateOneRequiredWithoutDelegate_aux_priceChangeNotificationNestedInput
  }

  export type PriceChangeNotificationUncheckedUpdateWithoutProductRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    condition?: EnumPriceChangeSubscriptionConditionFieldUpdateOperationsInput | $Enums.PriceChangeSubscriptionCondition
    previousPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type PriceChangeNotificationUncheckedUpdateManyWithoutProductRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    condition?: EnumPriceChangeSubscriptionConditionFieldUpdateOperationsInput | $Enums.PriceChangeSubscriptionCondition
    previousPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type ProcessedProductRecordUpdateWithoutRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedProcessedProductRecordsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProcessedProductRecordsNestedInput
    user?: UserUpdateOneRequiredWithoutProcessedProductRecordsNestedInput
  }

  export type ProcessedProductRecordUncheckedUpdateWithoutRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessedProductRecordUncheckedUpdateManyWithoutRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductRecordCreateManyProductInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    timestamp?: Date | string
    price?: number | null
    rawPrice?: string | null
    status?: $Enums.ProductStatus | null
    wasManuallyCreated?: boolean
    manuallyChangedFields?: ProductRecordCreatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
  }

  export type ProductSubscriptionCreateManyProductInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    subscriptionType: $Enums.SubscriptionType
    userId: string
    enabled?: boolean
  }

  export type NewProductNotificationCreateManyProductInput = {
    id?: string
  }

  export type ProductRecordUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductRecordsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductRecordsNestedInput
    errors?: ProductRecordErrorUpdateManyWithoutRecordNestedInput
    statusChangeNotifications?: StatusChangeNotificationUpdateManyWithoutProductRecordNestedInput
    priceChangeNotifications?: PriceChangeNotificationUpdateManyWithoutProductRecordNestedInput
    processedRecords?: ProcessedProductRecordUpdateManyWithoutRecordNestedInput
  }

  export type ProductRecordUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
    errors?: ProductRecordErrorUncheckedUpdateManyWithoutRecordNestedInput
    statusChangeNotifications?: StatusChangeNotificationUncheckedUpdateManyWithoutProductRecordNestedInput
    priceChangeNotifications?: PriceChangeNotificationUncheckedUpdateManyWithoutProductRecordNestedInput
    processedRecords?: ProcessedProductRecordUncheckedUpdateManyWithoutRecordNestedInput
  }

  export type ProductRecordUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    rawPrice?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableEnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus | null
    wasManuallyCreated?: BoolFieldUpdateOperationsInput | boolean
    manuallyChangedFields?: ProductRecordUpdatemanuallyChangedFieldsInput | $Enums.ProductRecordDataField[]
  }

  export type ProductSubscriptionUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedProductSubscriptionsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProductSubscriptionsNestedInput
    user?: UserUpdateOneRequiredWithoutProductSubscriptionsNestedInput
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
  }

  export type ProductSubscriptionUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    userId?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    delegate_aux_statusChangeSubscription?: StatusChangeSubscriptionUncheckedUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
    delegate_aux_priceChangeSubscription?: PriceChangeSubscriptionUncheckedUpdateOneWithoutDelegate_aux_productSubscriptionNestedInput
  }

  export type ProductSubscriptionUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    subscriptionType?: EnumSubscriptionTypeFieldUpdateOperationsInput | $Enums.SubscriptionType
    userId?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NewProductNotificationUpdateWithoutProductInput = {
    delegate_aux_notification?: NotificationUpdateOneRequiredWithoutDelegate_aux_newProductNotificationNestedInput
  }

  export type NewProductNotificationUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type NewProductNotificationUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type StatusChangeSubscriptionConditionCreateManySubscriptionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromStatus?: StatusChangeSubscriptionConditionCreatefromStatusInput | $Enums.ProductStatus[]
    toStatus?: StatusChangeSubscriptionConditionCreatetoStatusInput | $Enums.ProductStatus[]
  }

  export type StatusChangeNotificationCreateManySubscriptionInput = {
    id?: string
    productRecordId: string
    previousStatus: $Enums.ProductStatus
    newStatus: $Enums.ProductStatus
  }

  export type StatusChangeSubscriptionConditionUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromStatus?: StatusChangeSubscriptionConditionUpdatefromStatusInput | $Enums.ProductStatus[]
    toStatus?: StatusChangeSubscriptionConditionUpdatetoStatusInput | $Enums.ProductStatus[]
  }

  export type StatusChangeSubscriptionConditionUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromStatus?: StatusChangeSubscriptionConditionUpdatefromStatusInput | $Enums.ProductStatus[]
    toStatus?: StatusChangeSubscriptionConditionUpdatetoStatusInput | $Enums.ProductStatus[]
  }

  export type StatusChangeSubscriptionConditionUncheckedUpdateManyWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromStatus?: StatusChangeSubscriptionConditionUpdatefromStatusInput | $Enums.ProductStatus[]
    toStatus?: StatusChangeSubscriptionConditionUpdatetoStatusInput | $Enums.ProductStatus[]
  }

  export type StatusChangeNotificationUpdateWithoutSubscriptionInput = {
    previousStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    newStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    productRecord?: ProductRecordUpdateOneRequiredWithoutStatusChangeNotificationsNestedInput
    delegate_aux_notification?: NotificationUpdateOneRequiredWithoutDelegate_aux_statusChangeNotificationNestedInput
  }

  export type StatusChangeNotificationUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    productRecordId?: StringFieldUpdateOperationsInput | string
    previousStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    newStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
  }

  export type StatusChangeNotificationUncheckedUpdateManyWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    productRecordId?: StringFieldUpdateOperationsInput | string
    previousStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
    newStatus?: EnumProductStatusFieldUpdateOperationsInput | $Enums.ProductStatus
  }

  export type PriceChangeNotificationCreateManySubscriptionInput = {
    id?: string
    productRecordId: string
    condition: $Enums.PriceChangeSubscriptionCondition
    previousPrice: number
    newPrice: number
  }

  export type PriceChangeNotificationUpdateWithoutSubscriptionInput = {
    condition?: EnumPriceChangeSubscriptionConditionFieldUpdateOperationsInput | $Enums.PriceChangeSubscriptionCondition
    previousPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
    productRecord?: ProductRecordUpdateOneRequiredWithoutPriceChangeNotificationsNestedInput
    delegate_aux_notification?: NotificationUpdateOneRequiredWithoutDelegate_aux_priceChangeNotificationNestedInput
  }

  export type PriceChangeNotificationUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    productRecordId?: StringFieldUpdateOperationsInput | string
    condition?: EnumPriceChangeSubscriptionConditionFieldUpdateOperationsInput | $Enums.PriceChangeSubscriptionCondition
    previousPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type PriceChangeNotificationUncheckedUpdateManyWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    productRecordId?: StringFieldUpdateOperationsInput | string
    condition?: EnumPriceChangeSubscriptionConditionFieldUpdateOperationsInput | $Enums.PriceChangeSubscriptionCondition
    previousPrice?: FloatFieldUpdateOperationsInput | number
    newPrice?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductRecordCountOutputTypeDefaultArgs instead
     */
    export type ProductRecordCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductRecordCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCountOutputTypeDefaultArgs instead
     */
    export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatusChangeSubscriptionCountOutputTypeDefaultArgs instead
     */
    export type StatusChangeSubscriptionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatusChangeSubscriptionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PriceChangeSubscriptionCountOutputTypeDefaultArgs instead
     */
    export type PriceChangeSubscriptionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PriceChangeSubscriptionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HttpNetworkErrorDataDefaultArgs instead
     */
    export type HttpNetworkErrorDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HttpNetworkErrorDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HttpSerializationErrorDataDefaultArgs instead
     */
    export type HttpSerializationErrorDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HttpSerializationErrorDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HttpClientErrorDataDefaultArgs instead
     */
    export type HttpClientErrorDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HttpClientErrorDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MissingAttributeErrorDataDefaultArgs instead
     */
    export type MissingAttributeErrorDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MissingAttributeErrorDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InvalidAttributeErrorDataDefaultArgs instead
     */
    export type InvalidAttributeErrorDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvalidAttributeErrorDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InvalidTextErrorDataDefaultArgs instead
     */
    export type InvalidTextErrorDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvalidTextErrorDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MissingTextErrorDataDefaultArgs instead
     */
    export type MissingTextErrorDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MissingTextErrorDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NonUniqueTextErrorDataDefaultArgs instead
     */
    export type NonUniqueTextErrorDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NonUniqueTextErrorDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MissingElementErrorDataDefaultArgs instead
     */
    export type MissingElementErrorDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MissingElementErrorDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NonUniqueElementErrorDataDefaultArgs instead
     */
    export type NonUniqueElementErrorDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NonUniqueElementErrorDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductRecordErrorDefaultArgs instead
     */
    export type ProductRecordErrorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductRecordErrorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductRecordDefaultArgs instead
     */
    export type ProductRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductRecordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProcessedProductRecordDefaultArgs instead
     */
    export type ProcessedProductRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProcessedProductRecordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductSubscriptionDefaultArgs instead
     */
    export type ProductSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductSubscriptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatusChangeSubscriptionConditionDefaultArgs instead
     */
    export type StatusChangeSubscriptionConditionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatusChangeSubscriptionConditionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatusChangeSubscriptionDefaultArgs instead
     */
    export type StatusChangeSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatusChangeSubscriptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PriceChangeSubscriptionDefaultArgs instead
     */
    export type PriceChangeSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PriceChangeSubscriptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PriceChangeNotificationDefaultArgs instead
     */
    export type PriceChangeNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PriceChangeNotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatusChangeNotificationDefaultArgs instead
     */
    export type StatusChangeNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatusChangeNotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NewProductNotificationDefaultArgs instead
     */
    export type NewProductNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NewProductNotificationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}