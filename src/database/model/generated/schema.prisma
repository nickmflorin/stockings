//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
  output   = "../model/generated"
}

enum ElementAttribute {
  HREF
  SRC
  VALUE
  DATA_GA_PRODUCT_NAME
}

enum ScrapingErrorCode {
  MISSING_ATTRIBUTE
  INVALID_ATTRIBUTE
  MISSING_TEXT
  INVALID_TEXT
  NONUNIQUE_TEXT
  MISSING_ELEMENT
  NONUNIQUE_ELEMENT
  HTTP_NETWORK
  HTTP_CLIENT
  HTTP_SERIALIZATION
}

enum ProductRecordDataField {
  PRICE
  RAW_PRICE
  STATUS
}

enum ProductStatus {
  OutOfStock
  InStock
  AvailableForBackorder
  NotListed
}

enum ProductCategory {
  HandTools
}

enum ProductSubCategory {
  HandPlanes
  Saws
  Chisels
  Spokeshaves
  GreenWoodworking
  AccessoryTools
}

enum PriceChangeEventCondition {
  PriceIncrease
  PriceDecrease
}

model User {
  id                    String                @id() @default(uuid()) @db.Uuid()
  clerkId               String                @unique()
  firstName             String
  lastName              String
  profileImageUrl       String?
  emailAddress          String
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt()
  createdProducts       Product[]             @relation("createdProducts")
  updatedProducts       Product[]             @relation("updatedProducts")
  createdProductRecords ProductRecord[]       @relation("createdProductRecords")
  updatedProductRecords ProductRecord[]       @relation("updatedProductRecords")
  createdSubscriptions  ProductSubscription[] @relation("createdSubscriptions")
  updatedSubscriptions  ProductSubscription[] @relation("updatedSubscriptions")
  subscriptions         ProductSubscription[] @relation("subscriptions")
}

model HttpNetworkErrorData {
  id  String @id() @default(uuid()) @db.Uuid()
  url String
}

model HttpSerializationErrorData {
  id  String @id() @default(uuid()) @db.Uuid()
  url String
}

model HttpClientErrorData {
  id     String @id() @default(uuid()) @db.Uuid()
  url    String
  status Int
}

model MissingAttributeErrorData {
  id         String           @id() @default(uuid()) @db.Uuid()
  attribute  ElementAttribute
  parentHtml String?
}

model InvalidAttributeErrorData {
  id         String           @id() @default(uuid()) @db.Uuid()
  attribute  ElementAttribute
  parentHtml String?
  value      String
}

model InvalidTextErrorData {
  id         String  @id() @default(uuid()) @db.Uuid()
  parentHtml String?
  value      String
}

model MissingTextErrorData {
  id         String  @id() @default(uuid()) @db.Uuid()
  parentHtml String?
}

model NonUniqueTextErrorData {
  id         String  @id() @default(uuid()) @db.Uuid()
  parentHtml String?
}

model MissingElementErrorData {
  id         String  @id() @default(uuid()) @db.Uuid()
  parentHtml String?
  selector   String
}

model NonUniqueElementErrorData {
  id         String  @id() @default(uuid()) @db.Uuid()
  parentHtml String?
  selector   String
}

model ProductRecordError {
  id        String                 @id() @default(uuid()) @db.Uuid()
  errorId   String                 @unique() @db.Uuid()
  errorCode ScrapingErrorCode
  record    ProductRecord          @relation("errors", fields: [recordId], references: [id])
  recordId  String                 @unique() @db.Uuid()
  field     ProductRecordDataField
  message   String
}

model ProductRecord {
  id                    String                   @id() @default(uuid()) @db.Uuid()
  createdAt             DateTime                 @default(now())
  createdById           String                   @db.Uuid()
  updatedAt             DateTime                 @updatedAt()
  updatedById           String                   @db.Uuid()
  timestamp             DateTime                 @default(now())
  createdBy             User                     @relation("createdProductRecords", fields: [createdById], references: [id])
  updatedBy             User                     @relation("updatedProductRecords", fields: [updatedById], references: [id])
  product               Product                  @relation("records", fields: [productId], references: [id])
  productId             String                   @db.Uuid()
  price                 Float?
  rawPrice              String?
  status                ProductStatus?
  wasManuallyCreated    Boolean                  @default(false)
  manuallyChangedFields ProductRecordDataField[] @default([])
  errors                ProductRecordError[]     @relation("errors")
}

model Product {
  id               String                @id() @default(uuid()) @db.Uuid()
  createdAt        DateTime              @default(now())
  createdById      String                @db.Uuid()
  updatedAt        DateTime              @updatedAt()
  updatedById      String                @db.Uuid()
  createdBy        User                  @relation("createdProducts", fields: [createdById], references: [id])
  updatedBy        User                  @relation("updatedProducts", fields: [updatedById], references: [id])
  name             String?
  slug             String                @unique()
  code             String?
  imageSrc         String?
  records          ProductRecord[]       @relation("records")
  status           ProductStatus?
  statusRecordedAt DateTime?
  price            Float?
  priceRecordedAt  DateTime?
  category         ProductCategory
  subCategories    ProductSubCategory[]
  subscriptions    ProductSubscription[] @relation("subscriptions")
}

model PriceChangeSubscribedEvent {
  id             String                      @id() @default(uuid()) @db.Uuid()
  enabled        Boolean                     @default(true)
  subscriptionId String                      @unique() @db.Uuid()
  subscription   ProductSubscription         @relation(fields: [subscriptionId], references: [id])
  conditions     PriceChangeEventCondition[] @default([PriceIncrease, PriceDecrease])
}

model StatusChangeEventCondition {
  id                String                      @id() @default(uuid()) @db.Uuid()
  fromStatus        ProductStatus[]
  toStatus          ProductStatus[]
  anyFromStatus     Boolean
  anyToStatus       Boolean
  subscribedEvent   StatusChangeSubscribedEvent @relation("conditions", fields: [subscribedEventId], references: [id])
  subscribedEventId String                      @db.Uuid()
}

model StatusChangeSubscribedEvent {
  id             String                       @id() @default(uuid()) @db.Uuid()
  enabled        Boolean                      @default(true)
  subscriptionId String                       @unique() @db.Uuid()
  subscription   ProductSubscription          @relation(fields: [subscriptionId], references: [id])
  conditions     StatusChangeEventCondition[] @relation("conditions")
}

model ProductSubscription {
  id           String                       @id() @default(uuid()) @db.Uuid()
  createdAt    DateTime                     @default(now())
  createdById  String                       @db.Uuid()
  updatedAt    DateTime                     @updatedAt()
  updatedById  String                       @db.Uuid()
  createdBy    User                         @relation("createdSubscriptions", fields: [createdById], references: [id])
  updatedBy    User                         @relation("updatedSubscriptions", fields: [updatedById], references: [id])
  product      Product                      @relation("subscriptions", fields: [productId], references: [id])
  productId    String                       @db.Uuid()
  user         User                         @relation("subscriptions", fields: [userId], references: [id])
  userId       String                       @db.Uuid()
  enabled      Boolean                      @default(true)
  statusChange StatusChangeSubscribedEvent?
  priceChange  PriceChangeSubscribedEvent?

  @@unique([productId, userId])
}
