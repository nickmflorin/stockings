//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
  output   = "../model/generated"
}

enum ElementAttribute {
  HREF
  SRC
  VALUE
  DATA_GA_PRODUCT_NAME
}

enum ScrapingErrorCode {
  MISSING_ATTRIBUTE
  INVALID_ATTRIBUTE
  MISSING_TEXT
  INVALID_TEXT
  NONUNIQUE_TEXT
  MISSING_ELEMENT
  NONUNIQUE_ELEMENT
  HTTP_NETWORK
  HTTP_CLIENT
  HTTP_SERIALIZATION
}

enum ProductRecordDataField {
  PRICE
  RAW_PRICE
  STATUS
}

enum ProductStatus {
  OUT_OF_STOCK
  IN_STOCK
  AVAILABLE_FOR_BACKORDER
  NOT_LISTED
}

enum ProductCategory {
  HandTools
}

enum ProductSubCategory {
  HandPlanes
  Saws
  Chisels
  Spokeshaves
  GreenWoodworking
  AccessoryTools
}

enum PriceChangeEventType {
  PriceIncrease
  PriceDecrease
}

enum NotificationEventContentType {
  PriceChange
  StatusChange
}

model User {
  id                        String              @id() @default(uuid()) @db.Uuid()
  clerkId                   String              @unique()
  firstName                 String
  lastName                  String
  profileImageUrl           String?
  emailAddress              String
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt()
  createdProducts           Product[]           @relation("createdProducts")
  updatedProducts           Product[]           @relation("updatedProducts")
  createdProductRecords     ProductRecord[]     @relation("createdProductRecords")
  updatedProductRecords     ProductRecord[]     @relation("updatedProductRecords")
  createdNotificationEvents NotificationEvent[] @relation("createdNotificationEvents")
  updatedNotificationEvents NotificationEvent[] @relation("updatedNotificationEvents")
  notificationEvents        NotificationEvent[] @relation("notificationEvents")
}

model HttpNetworkErrorData {
  id  String @id() @default(uuid()) @db.Uuid()
  url String
}

model HttpSerializationErrorData {
  id  String @id() @default(uuid()) @db.Uuid()
  url String
}

model HttpClientErrorData {
  id     String @id() @default(uuid()) @db.Uuid()
  url    String
  status Int
}

model MissingAttributeErrorData {
  id         String           @id() @default(uuid()) @db.Uuid()
  attribute  ElementAttribute
  parentHtml String?
}

model InvalidAttributeErrorData {
  id         String           @id() @default(uuid()) @db.Uuid()
  attribute  ElementAttribute
  parentHtml String?
  value      String
}

model InvalidTextErrorData {
  id         String  @id() @default(uuid()) @db.Uuid()
  parentHtml String?
  value      String
}

model MissingTextErrorData {
  id         String  @id() @default(uuid()) @db.Uuid()
  parentHtml String?
}

model NonUniqueTextErrorData {
  id         String  @id() @default(uuid()) @db.Uuid()
  parentHtml String?
}

model MissingElementErrorData {
  id         String  @id() @default(uuid()) @db.Uuid()
  parentHtml String?
  selector   String
}

model NonUniqueElementErrorData {
  id         String  @id() @default(uuid()) @db.Uuid()
  parentHtml String?
  selector   String
}

model ProductRecordError {
  id        String                 @id() @default(uuid()) @db.Uuid()
  errorId   String                 @unique() @db.Uuid()
  errorCode ScrapingErrorCode
  record    ProductRecord          @relation("errors", fields: [recordId], references: [id])
  recordId  String                 @unique() @db.Uuid()
  field     ProductRecordDataField
  message   String
}

model ProductRecord {
  id                    String                   @id() @default(uuid()) @db.Uuid()
  createdAt             DateTime                 @default(now())
  createdById           String                   @db.Uuid()
  updatedAt             DateTime                 @updatedAt()
  updatedById           String                   @db.Uuid()
  timestamp             DateTime                 @default(now())
  createdBy             User                     @relation("createdProductRecords", fields: [createdById], references: [id])
  updatedBy             User                     @relation("updatedProductRecords", fields: [updatedById], references: [id])
  product               Product                  @relation("records", fields: [productId], references: [id])
  productId             String                   @db.Uuid()
  price                 Float?
  rawPrice              String?
  status                ProductStatus?
  wasManuallyCreated    Boolean                  @default(false)
  manuallyChangedFields ProductRecordDataField[] @default([])
  errors                ProductRecordError[]     @relation("errors")
}

model Product {
  id                 String               @id() @default(uuid()) @db.Uuid()
  createdAt          DateTime             @default(now())
  createdById        String               @db.Uuid()
  updatedAt          DateTime             @updatedAt()
  updatedById        String               @db.Uuid()
  createdBy          User                 @relation("createdProducts", fields: [createdById], references: [id])
  updatedBy          User                 @relation("updatedProducts", fields: [updatedById], references: [id])
  name               String?
  slug               String               @unique()
  code               String?
  imageSrc           String?
  records            ProductRecord[]      @relation("records")
  status             ProductStatus?
  statusRecordedAt   DateTime?
  price              Float?
  priceRecordedAt    DateTime?
  category           ProductCategory
  subCategories      ProductSubCategory[]
  notificationEvents NotificationEvent[]  @relation("notificationEvents")
}

/// @@delegate(contentType)
model NotificationEvent {
  id                             String                       @id() @default(uuid()) @db.Uuid()
  createdAt                      DateTime                     @default(now())
  createdById                    String                       @db.Uuid()
  updatedAt                      DateTime                     @updatedAt()
  updatedById                    String                       @db.Uuid()
  createdBy                      User                         @relation("createdNotificationEvents", fields: [createdById], references: [id])
  updatedBy                      User                         @relation("updatedNotificationEvents", fields: [updatedById], references: [id])
  product                        Product                      @relation("notificationEvents", fields: [productId], references: [id])
  productId                      String                       @db.Uuid()
  user                           User                         @relation("notificationEvents", fields: [userId], references: [id])
  userId                         String                       @db.Uuid()
  contentType                    NotificationEventContentType
  delegate_aux_priceChangeEventC PriceChangeEventC?
  delegate_aux_statusChangeEvent StatusChangeEvent?
}

model PriceChangeEventC {
  id                             String                 @id() @default(uuid()) @db.Uuid()
  eventTypes                     PriceChangeEventType[] @default([PriceIncrease, PriceDecrease])
  delegate_aux_notificationEvent NotificationEvent      @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model StatusChangeEvent {
  id                             String            @id() @default(uuid()) @db.Uuid()
  eventTypes                     ProductStatus[]
  delegate_aux_notificationEvent NotificationEvent @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
